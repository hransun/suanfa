./un-install/run.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# run.sh  - Performs a the un-installation of  Apache or Perl or PHP or ModSecurity on a host
#
# Description:
# Performs a prerequisite and post check on a host for the specific product ex: apache 2.2 or perl or php or mod security and    
# removes the installed product and does a clean up of all the files
#
# Input Parameters: See usage
#
# Revison History:
# MA    02 Mar 2011    Created for Apahce 2.2
#================================================================================


scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilcommon.sh

# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product                Un-install Apache or Perl or PHP or ModSecurity or Siteminder or Janus"
        print "                               (default:server, options: server or perl or php or modsecurity or siteminder or janus)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)        configpath=$2 ;;
                -product)          product=$2 ;;
                -custom)            custom=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

#check if  for if right paramater for Apache or Perl or PHP or ModSecurity is specified 

if [[ "$product" == "server" ||  "$product" == "perl" ||  "$product" == "php" || "$product" == "modsecurity" || "$product" == "siteminder" || "$product" == "janus" ]] ; then
        print " "
else
        usage
fi

if [[ "$custom" = "true" ]] ; then
        if [[ "$configpath" == "" ]] ; then
            configpath=/tmp
        fi
else
        configpath=${baseDir}/conf/
fi

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/uninstallapache22.conf
        print ""
        echo "----------------------------------------------------------------------------------------------"
        echo "You are using default conf file to un-install Apache HTTP Server 2.2 with below key value pair:"
        echo "----------------------------------------------------------------------------------------------"
        cat ${baseDir}/conf/uninstallapache22.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   elif [[ $product = "php" ]] ; then
          . ${baseDir}/conf/uninstallphp.conf
        print ""
        echo "--------------------------------------------------------------------------------------"
        echo "You are using default conf file to un-install PHP for Apache with below key value pair:"
        echo "--------------------------------------------------------------------------------------"
        cat ${baseDir}/conf/uninstallphp.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey
  elif [[ $product = "perl" ]] ; then
          . ${baseDir}/conf/uninstallperl.conf
        print ""
        echo "--------------------------------------------------------------------------------------"
        echo "You are using default conf file to un-install Perl for Apache with below key value pair:"
        echo "--------------------------------------------------------------------------------------"
        cat ${baseDir}/conf/uninstallperl.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   elif [[ $product = "siteminder" ]] ; then
         . ${baseDir}/conf/uninstallsiteminder.conf
        print ""
        echo "--------------------------------------------------------------------------------"
        echo "You are using default conf file to un-install Siteminder with below key value pair:"
        echo "--------------------------------------------------------------------------------"
        cat ${baseDir}/conf/uninstallsiteminder.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey
  
   elif [[ $product = "janus" ]] ; then
         . ${baseDir}/conf/uninstalljanus.conf
        print ""
        echo "--------------------------------------------------------------------------------"
        echo "You are using default conf file to un-install Janus with below key value pair:"
        echo "--------------------------------------------------------------------------------"
        cat ${baseDir}/conf/uninstalljanus.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

  elif [[ $product = "modsecurity" ]] ; then
         . ${baseDir}/conf/uninstallmodsecurity.conf
        print ""
        echo "---------------------------------------------------------------------------------"
        echo "You are using default conf file to un-install ModSecurity with below key value pair:"
        echo "---------------------------------------------------------------------------------"
        cat ${baseDir}/conf/uninstallmodsecurity.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   fi
fi


############## Pre-check

#Calling pre-chk
# ${baseDir}/un-install/pre-chk.sh -product $product -custom $custom -configpath $configpath 

if [[ $? -ne 0 ]] ; then
        exit 12
else

#Calling pre-chk
 ${baseDir}/un-install/pre-chk.sh -product $product -custom $custom -configpath $configpath

fi

if [[ $? -ne 0 ]] ; then
        exit 12
else

#Calling uninstall.sh
 ${baseDir}/un-install/uninstall.sh $custom $configpath $product
fi

if [[ $? -ne 0 ]] ; then
        exit 12
else

#Calling post check
 ${baseDir}/un-install/post-chk.sh -product $product -custom $custom -configpath $configpath
fi
./un-install/post-chk.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# pre-check.sh  - Performs a prerequisite check for apache or perl or php or mod security on a host
#
# Description:
# Performs a prerequisite check on a host for the specific product such as apache 2.2, perl,php and
# shuts down the  process before un-installing
#
# Input Parameters: See usage
#
# Revison History:
# MA    02 Mar 2011    Created for Apahce 2.2
#================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product               Prerequisite check Apache Server, PHP or PERL or ModSecurity or Siteminder or Janus"
        print "                               (default:server, options: server,php or perl or modsecurity or siteminder or janus)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)        configpath=$2 ;;
                -product)          product=$2 ;;
                -custom)            custom=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/uninstallapache22.conf
   elif [[ $product = "php" ]] ; then
         . ${baseDir}/conf/uninstallphp.conf
   elif [[ $product = "perl" ]] ; then
         . ${baseDir}/conf/uninstallperl.conf
   elif [[ $product = "modsecurity" ]] ; then
         . ${baseDir}/conf/uninstallmodsecurity.conf
   elif [[ $product = "siteminder" ]] ; then
         . ${baseDir}/conf/uninstallsiteminder.conf
   elif [[ $product = "janus" ]] ; then
         . ${baseDir}/conf/uninstalljanus.conf
    fi
fi

#check if path exists or not

if [[ ! -d "$configpath" ]] ; then
        echo "Config path $configpath is not specified.."
        usage
fi

if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=uninstallapache22.conf
     elif [[ $product = "php" ]] ; then
          cfgfile=uninstallphp.conf
      elif [[ $product = "perl" ]] ; then
          cfgfile=uninstallperl.conf
      elif [[ $product = "modsecurity" ]] ; then
          cfgfile=uninstallmodsecurity.conf
      elif [[ $product = "siteminder" ]] ; then
          cfgfile=uninstallsiteminder.conf
      elif [[ $product = "janus" ]] ; then
          cfgfile=uninstalljanus.conf

     fi
 if [[ -r $configpath ]] ; then
           . $configpath/$cfgfile
     fi
fi

#check if Apache 2.2 Server,PHP or PERL installation to execute


if [[ "$product" = "server" ]] ; then
        prdtocheck="Apache 2.2"
        print "Info: $prdtocheck $product un-installation post check"
elif [[ "$product" = "php" ]] ; then
        prdtocheck="PHP 5"
        print "Info: $prdtocheck $product un-installation post check"
elif [[ "$product" = "perl" ]] ; then
        prdtocheck="PERL 5"
        print "Info: $prdtocheck $product un-installation post check"
elif [[ "$product" = "modsecurity" ]] ; then
        prdtocheck="Mod Security"
        print "Info: $prdtocheck $product un-installation post check"
elif [[ "$product" = "siteminder" ]] ; then
        prdtocheck="Siteminder R12"
        print "Info: $prdtocheck $product un-installation post check"
elif [[ "$product" = "janus" ]] ; then
        prdtocheck="Janus 3.8.0.0"
        print "Info: $prdtocheck $product un-installation post check"
else
        usage
fi

# How to ensure /etc/rc.shutdown doesn't invokes our script.
rc_shutdown_del()
        # $1=command
        {
        if [[ -r /etc/rc.shutdown ]] ; then
                cp /etc/rc.shutdown /etc/rc.shutdown-pre_del
                grep -v "^$1\$" /etc/rc.shutdown-pre_del > /etc/rc.shutdown
                chmod 744 /etc/rc.shutdown
        fi
        }

# How to uninstall init-scripts
# We name the target script differently depending upon the OS.
# Also, what links we put in depends upon the OS too.
# eg: on Linux, running
#   initscript_del /tmp/sometempfile apache22.0 99 01
# removes
#   /etc/init.d/apache22.0
#   /etc/rc3.d/S99apache22.0
#   /etc/rc0.d/K01apache22.0
#   /etc/rc6.d/K01apache22.0

initscript_del()
        # $1=initscriptname
        # $2=sindex
        # $3=kindex
        {
        name=$1
        sindex=$2
        kindex=$3
        case `uname -s` in
                Linux)
                        rm /etc/init.d/${name} 2> /dev/null
                        rm /etc/rc3.d/S${sindex}${name} 2> /dev/null
                        rm /etc/rc0.d/K${kindex}${name} 2> /dev/null
                        rm /etc/rc6.d/K${kindex}${name} 2> /dev/null
                        ;;
                SunOS)
                        rm /etc/init.d/${name} 2> /dev/null
                        rm /etc/rc3.d/S${sindex}${name} 2> /dev/null
                        rm /etc/rc0.d/K${kindex}${name} 2> /dev/null
                        ;;
                AIX)
                        rm /etc/rc.${name} 2> /dev/null
                        rm /etc/rc.d/rc2.d/S${sindex}${name} 2> /dev/null
                        rc_shutdown_del "/etc/rc.${name} stop"
                        ;;
        esac
        }


#modify conf
mod_conf()
        # $1=httpdConf
        # $2=httpdConf-backup
        # $3=product
        {
   if [[ "$product" = "php" ]] ; then
                cat $1 | \
                sed \
                -e '/php5_module/d' \
                -e '/x-httpd-php/d' \
                -e '/PHPIniDir/d' \
                > $2
    fi

   if [[ "$product" = "perl" ]] ; then
                cat $1 | \
                sed \
                -e '/perl_module/d' \
                -e '/PerlSwitches/d' \
                -e '/PerlModule/d' \
                -e '/<Location/d' \
                -e '/SetHandler/d' \
                -e '/PerlResponseHandler/d' \
                -e '/PerlOptions/d' \
                -e '/PerlSendHeader On/d' \
                -e '/<\/Location>/d' \
                -e '/Options +ExecCGI/d' \
                > $2
    fi

   if [[ "$product" = "modsecurity" ]] ; then
                cat $1 | \
                sed \
                -e '/security2_module/d' \
                -e '/modsecurity_crs/d' \
                -e '/ifmodule/d' \
                -e '/ModSecurity/d' \
                > $2
   fi

        }


 update()
        # $1=target
        # $2=source
        {
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
                rm $2
        elif [[ -w $1 ]] ; then
                cp -p $1 $1-pre_config
                cat $2 > $1
                rm $2
                print "$0: $1 backed up and updated"
        else
                print "$0: $1 needs replacing with $2"
        fi
        }


if [[ "$product" = "server" ]]  ; then

	### Post check
	#finally clean up other directories
	# Remove the initscripts

	initscript_del apache22.$inst 99 01

	#Remove the Symlinks for signature file
#	rm /var/jpmcappsig/web_sigfile/Apache2.2.$inst  2> /dev/null
	
	# unregister signature file
        all_sigfiles=`ls ${apc_enggutils_dir}/admin/SignatureFile*`
        for i in $all_sigfiles ; do
          ../admin/sigfile-reg-web.sh -s $i
          if [[ $? -eq 0 ]] ; then
                ../admin/sigfile-reg-web.sh -d $i
          fi
        done

	#Deleted Engg utility directory

	cd $apc_enggutils_dir
	for i in `ls`; do
			/bin/rm -rf ${apc_enggutils_dir}/${i}
	done;
        
        cd ..
        rm -rf $apc_enggutils_dir 

print "Info: $prdtocheck Uninstall Complete."
fi

if [[ "$product" = "php" ]]  ; then
	print "Info: Removing php configuration details from $website.conf"
	mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup "php" > /dev/null 2>&1
	update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1

	# unregister signature file
        all_sigfiles=`ls ${apc_enggutils_dir}/admin/SignatureFile.PHP*`
        for i in $all_sigfiles ; do
          ../admin/sigfile-reg-web.sh -s $i
          if [[ $? -eq 0 ]] ; then
                ../admin/sigfile-reg-web.sh -d $i
          fi
        done

        if [[ $? -ne 0 ]] ; then
        	echo "Couldn't remove php configuration details from $website.conf.."
                exit 12
	else
        	print "Info: $prdtocheck Uninstall Complete."
        	print "Info: Please modify envvars and remove php library references"
	fi
fi

if [[ "$product" = "perl" ]]  ; then
	print "Info: Removing perl configuration details from $website.conf"
        mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup "perl" > /dev/null 2>&1
        update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1

	# unregister signature file
        all_sigfiles=`ls ${apc_enggutils_dir}/admin/SignatureFile.Perl*`
        for i in $all_sigfiles ; do
          ../admin/sigfile-reg-web.sh -s $i
          if [[ $? -eq 0 ]] ; then
                ../admin/sigfile-reg-web.sh -d $i
          fi
        done

        if [[ $? -ne 0 ]] ; then
                echo "Couldn't remove perl configuration details from $website.conf.."
       	        exit 12
        else
		print "Info: $prdtocheck Uninstall Complete."
	        print "Info: Please modify envvars and remove perl library references"
	fi
fi

if [[ "$product" = "modsecurity" ]]  ; then

	print "Info: Removing modsecurity configuration details from envvars and $website.conf"

        mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup "modsecurity" > /dev/null 2>&1
        update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1

   if [[ $? -ne 0 ]] ; then
                echo "Couldn't remove modsecurity configuration details from $website.conf.."
        exit 12
        else

        print "Info: $prdtocheck Uninstall Complete."
        fi

fi

if [[ "$product" = "siteminder" ]]  ; then
        print "Info: Removing siteminder configuration details from $website.conf"
        mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup "siteminder" > /dev/null 2>&1
        update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1

        # unregister signature file
        all_sigfiles=`ls ${apc_enggutils_dir}/admin/SignatureFile.SM*`
        for i in $all_sigfiles ; do
          ../admin/sigfile-reg-web.sh -s $i
          if [[ $? -eq 0 ]] ; then
                ../admin/sigfile-reg-web.sh -d $i
          fi
        done

        if [[ $? -ne 0 ]] ; then
                echo "Couldn't remove siteminder configuration details from $website.conf.."
                exit 12
        else
                print "Info: $prdtocheck Uninstall Complete."
                print "Info: Please modify envvars and remove siteminder library references"
        fi
fi

if [[ "$product" = "janus" ]]  ; then
        print "Info: Removing Janus configuration details from $website.conf"
        mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup "janus" > /dev/null 2>&1
        update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1

        # unregister signature file
        all_sigfiles=`ls ${apc_enggutils_dir}/admin/SignatureFile.JW*`
        for i in $all_sigfiles ; do
          ../admin/sigfile-reg-web.sh -s $i
          if [[ $? -eq 0 ]] ; then
                ../admin/sigfile-reg-web.sh -d $i
          fi
        done

        if [[ $? -ne 0 ]] ; then
                echo "Couldn't remove janus configuration details from $website.conf.."
                exit 12
        else
                print "Info: $prdtocheck Uninstall Complete."
        fi
fi

exit 0
./un-install/pre-chk.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# pre-check.sh  - Performs a prerequisite check for apache or perl or php or mod security on a host
#
# Description:
# Performs a prerequisite check on a host for the specific product such as apache 2.2, perl,php and
# shuts down the  process before un-installing
#
# Input Parameters: See usage
#
# Revison History:
# MA    02 Mar 2011    Created for Apahce 2.2
#================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product               Prerequisite check Apache Server, PHP or PERL or ModSecurity or Siteminder or Janus"
        print "                               (default:server, options: server,php or perl or modsecurity or siteminder or janus)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)        configpath=$2 ;;
                -product)          product=$2 ;;
                -custom)            custom=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done


if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/uninstallapache22.conf
   elif [[ $product = "php" ]] ; then
         . ${baseDir}/conf/uninstallphp.conf
   elif [[ $product = "perl" ]] ; then
         . ${baseDir}/conf/uninstallperl.conf
   elif [[ $product = "modsecurity" ]] ; then
         . ${baseDir}/conf/uninstallmodsecurity.conf
   elif [[ $product = "siteminder" ]] ; then
         . ${baseDir}/conf/uninstallsiteminder.conf
   elif [[ $product = "janus" ]] ; then
         . ${baseDir}/conf/uninstalljanus.conf
    fi
fi

#check if path exists or not

if [[ ! -d "$configpath" ]] ; then
        echo "Config path $configpath is not specified.."
        usage
fi

if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=uninstallapache22.conf
     elif [[ $product = "php" ]] ; then
          cfgfile=uninstallphp.conf
      elif [[ $product = "perl" ]] ; then
          cfgfile=uninstallperl.conf
      elif [[ $product = "modsecurity" ]] ; then
          cfgfile=uninstallmodsecurity.conf
      elif [[ $product = "siteminder" ]] ; then
          cfgfile=uninstallsiteminder.conf
      elif [[ $product = "janus" ]] ; then
          cfgfile=uninstalljanus.conf
     fi
 if [[ -r $configpath ]] ; then
           . $configpath/$cfgfile
     fi
fi

#check if Apache 2.2 Server,PHP or PERL installation to execute

if [[ "$product" = "server" ]] ; then
        prdtocheck="Apache 2.2"
        print "Info: $prdtocheck $product un-installation prerequisite check"
elif [[ "$product" = "php" ]] ; then
        prdtocheck="PHP 5"
        print "Info: $prdtocheck $product un-installation prerequisite check"
elif [[ "$product" = "perl" ]] ; then
        prdtocheck="PERL 5"
        print "Info: $prdtocheck $product un-installation prerequisite check"
elif [[ "$product" = "modsecurity" ]] ; then
        prdtocheck="Mod Security"
        print "Info: $prdtocheck $product un-installation prerequisite check"
elif [[ "$product" = "siteminder" ]] ; then
        prdtocheck="Siteminder R12"
        print "Info: $prdtocheck $product un-installation prerequisite check"
elif [[ "$product" = "janus" ]] ; then
        prdtocheck="Janus 3.8.0.0"
        print "Info: $prdtocheck $product un-installation prerequisite check"
else
        usage
fi

if [[ "$product" = "server" ]]  ; then

# Check its there to remove

if [[   ! -r $apc_enggutils_dir/admin/apacheutil.conf || \
        ! -r $apc_enggutils_dir/admin/apache22.sh  ]] ; then
        print "$0: no standard build of apache22 at $apache22_root"
        exit 21
fi

	case `uname -s` in
        	SunOS|Linux)
                	/etc/init.d/apache22.$inst stop
                	;;
        	AIX)
                	/etc/rc.apache22.$inst stop
                	;;
	esac
fi 

if [[ "$product" = "php" ||  "$product" = "perl" || $product = "modsecurity" || $product = "siteminder" || $product = "janus" ]]  ; then

# Check its there to remove

#stop apache service
     	print "Info: Stopping Websites $website before uninstalling $prdtocheck"
        c=$apache22_root/conf/$website.conf
        if [[ ! -r $c ]] ; then
                print "$0: $c does not exists. Please specify the correct website name"
                exit 24
        else 
        case `uname -s` in
                SunOS|Linux)
                        /etc/init.d/apache22.$inst stop $website
                        ;;
                AIX)
                        /etc/rc.apache22.$inst stop $website
                        ;;
        esac

        fi
fi
./un-install/deleteJanus.sh
========================================
#!/bin/ksh
#set -x
# deleteJanus.sh - Remove Janus installation and configuration details 
#
#
#
# MA, 15 Apr 2009,Initial version 
# MA, 13 May 2009, Minor script changes
# AR, 12 Sep 2013, Add Janus Support to the Apache build.

# Platform specific things

case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        print "                               default: none, must be specified)"
        print "       -backupflag  flag       Janus backup flag)"
        print "                               (default: no)"
        print "       -backuppath  dir        Janus backup path)"
        print "                               (default: none,must be specified)"
        exit 2
       } 

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
jw_root=
apache22_root=
backupflag="no"
backuppath=

#
# get inst apache22_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
jw_root=$apache22_root
apache22_root=$apache22_root
instno=$inst


# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		       -web*)        website=$2    ;;
		-backupflag*)        backupflag=$2 ;;
		-backuppath*)        backuppath=$2 ;;
		           *)	     usage         ;;
	esac
	shift 2
done

mod_conf()
        # $1=httpdConf
	# $2=httpdConf-backup
        {
        	cat $1 | \
        	sed \
                -e '/janus.conf/d' \
                > $2
        }

update()
        # $1=target
        # $2=source
        {
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
                rm $2
        elif [[ -w $1 ]] ; then
                cp -p $1 $1-pre_config
                cat $2 > $1
                rm $2
                print "$0: $1 backed up and updated"
        else
                print "$0: $1 needs replacing with $2"
        fi
        }

#Checks to be done
if [[ "$website" = "" ]] ; then
	usage
fi

if [[ "$jw_root" = "" ]] ; then
      jw_root=$apache22_root 
fi

if [[ "$apache22_root" = "" ]] ; then
	usage
fi

if [[ "$backupflag" = "" ]] ; then
      usage
fi 

if [[ "$backupflag" != "no" ]] ; then

if [[ "$backuppath" = "" ]] ; then
print ""
print "****Enter backup path"
print "" 
        usage
   fi
fi

#check if website exists
if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
     print "Website $website.conf does not exists "
     exit 49
fi

#check if Janus directory exists
if [[ ! -d $jw_root/janusweb ]] ; then
     print "Janus directory does not exists under "$jw_root/janusweb
     exit 45
fi

if [[ ! -d $apache22_root ]] ; then
     print "Apache directory does not exists under "$apache22_root
     exit 45
fi

#Check if services are running.
#Check if website is running

if [[ `$apache22_root/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
        print "$0: Website $website must be stopped before deleting Janus"
        exit 48
fi

#Check Janus is running
    if [[ `$jw_root/janusweb/current/bin/janusweb.sh check | grep -c "Process 'janusweb agent' is not running"` -ne 1 ]] ; then
        print "$0: Janus web agent must be stopped"
        exit 50
fi

#Delete install directory 
if [[ $backupflag != "no" ]] ; then

	curdate=`date '+%Y%m%d'`
        tar -cvf $jw_root/janus-backup-$curdate.tar $jw_root  > /dev/null 2>&1
        print ""
        print "Files backed up under : $backuppath/janus-backup-$curdate.tar"
        mv $jw_root/janus-backup-$curdate.tar $backuppath  > /dev/null 2>&1
        rm -rf $jw_root/janusweb > /dev/null 2>&1
else 
# if backup flag is NO everything will just be deleted.
	rm -rf $jw_root/janusweb > /dev/null 2>&1
fi

#Sed website conf remove janus stuff 
		
mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1
update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup 

# remove registered Signature files
eu_sigfiles=`ls SignatureFile.JW*3*`
for i in $eu_sigfiles ; do
  ./sigfile-reg-web.sh -s $i
  if [[ $? -eq 0 ]] ; then
    ./sigfile-reg-web.sh -d $i
  fi
done


# Delete Janus scripts

files="
janusweb
janus-version.txt
janusweb.sh
configurejanus.sh
unconfigurejanus.sh
janustemplate.properties
janusaddsite.sh
janusdelsite.sh
SignatureFile.JW*3*
"

for f in $files ; do
    rm $apc_enggutils_dir/admin/$f
done


#Give some kind of advice
print " Startup apache and test the application url......."
exit 0
./un-install/uninstall.sh
========================================
#!/bin/ksh 
#set -x
# uninstall.sh - Uninstall Apache 2.2
#
# This should be copied out of the Apache install, then run from outside.
# Removes the product binaries.
# Can be told to leave the conf directory behind.
#
# SM, Mar 25, 2009   initial version, from  similar script in Tomcat 6.0
# 

# Platform specific things

case `uname -s` in
        Linux)
                whoami=whoami
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
	AIX)
		whoami=whoami
		;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac



scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

#Config file for Standard build architecture


     if [[ $3 = "server" ]] ; then
          cfgfile=uninstallapache22.conf
     elif [[ $3 = "php" ]] ; then
          cfgfile=uninstallphp.conf
      elif [[ $3 = "perl" ]] ; then
          cfgfile=uninstallperl.conf
      elif [[ $3 = "modsecurity" ]] ; then
          cfgfile=uninstallmodsecurity.conf
      elif [[ $3 = "siteminder" ]] ; then
          cfgfile=uninstallsiteminder.conf
      elif [[ $3 = "janus" ]] ; then
          cfgfile=uninstalljanus.conf
     fi

if [[ $1 = "true" ]] ; then
. $2/$cfgfile
else
. ${baseDir}/conf/$cfgfile
fi

# Remove stuff for the product you need to un-install

if [[ $3 = "server" ]] ; then
     cd $apache22_root
	if [[ "$keepdata" = "yes" ]] ; then
		rm -rf `ls -1d * | egrep -v "^(conf)"` 
	else
            if [[ $inst = "web" ]] ; then
                mv eu-apache22u ..
		rm -rf *
                mv ../eu-apache22u .
                #cd ..
                #rm -rf $apache22_root
            else
		rm -rf *
                cd ..
                rm -rf $apache22_root
            fi       
	fi
fi 

## PHP 
if [[ $3 = "php" ]] ; then
   cd $apache22_root
        test ! -e $apache22_root/php5 && echo "Info: PHP already uninstalled at $apache22_root/php5" && exit 1 
	rm -rf `ls -1d php5` 
fi

## Perl
if [[ $3 = "perl" ]] ; then
   cd $apache22_root
        test ! -e $apache22_root/perl5 && echo "Info: Perl already uninstalled at $apache22_root/perl5" && exit 1 
        rm -rf `ls -1d perl5`
fi

## Mod Security
if [[ $3 = "modsecurity" ]] ; then
        rm -rf `ls -1d $apache22_root/conf/modsecurity_crs`
        #rm -rf `ls -1 $apc_enggutils_dir/security/configuremodsecurity.sh $apc_enggutils_dir/security/deletemodsecurity.sh $apc_enggutils_dir/security/version-modsecurity.txt`
        #rm -rf `ls -ld $apc_enggutils_dir/security/modsecurity`
        rm -rf `ls -1 $apache22_root/security/configuremodsecurity.sh $apache22_root/security/deletemodsecurity.sh $apache22_root/security/version-modsecurity.txt`
        rm -rf `ls -ld $apache22_root/security/modsecurity`
fi

## Siteminder
if [[ $3 = "siteminder" ]] ; then
  
  echo "Info: Removing Siteminder"
  cd $apache22_root
  test ! -e $apache22_root/webagent &&  echo "Info: Siteminder webagent already uninstalled at $apache22_root/webagent" && exit 1 
  rm -rf `ls -1d webagent` 
  rm -rf `ls -1 $apc_enggutils_dir/admin/configuresiteminder.sh $apc_enggutils_dir/admin/siteminder-version.txt $apc_enggutils_dir/admin/unconfiguresiteminder.sh`
fi

## Janus
if [[ $3 = "janus" ]] ; then

  echo "Info: Removing Janus"
  cd $apache22_root
  test ! -e $apache22_root/janusweb &&  echo "Info: Janus already uninstalled at $apache22_root/janusweb" && exit 1 
        rm -rf `ls -1d janusweb`
  rm -f `ls -1 $apc_enggutils_dir/admin/configurejanus.sh $apc_enggutils_dir/admin/janus-version.txt $apc_enggutils_dir/admin/unconfigurejanus.sh $apc_enggutils_dir/admin/janusaddsite.sh $apc_enggutils_dir/admin/janusweb.sh $apc_enggutils_dir/admin/janustemplate.properties $apc_enggutils_dir/admin/janusweb $apc_enggutils_dir/admin/deleteJanus.sh $apc_enggutils_dir/admin/janusdelsite.sh`
fi


exit 0
./build/buildapache22.sh
========================================
#!/bin/ksh
# buildapache22.sh - Build Apache 2.2.x from source
#
# This script is used by DCS eCommerce Engineering to prepare a build of
# Apache binaries from source. It also builds and embeds OpenSSL, as our
# Apache build must support SSL.
#
# The code is derived from the existing build script for apache2 
#
# Records in /tmp/apache22/buildapache22.log
#   environment and disk space
#   output of expand, configure, compile and install
#   dependencies of generated executables
#
# Allows the generated .tar.gz to be placed in a directory of the users choice,
# allowing 3rd parties to use this script, from the R/O filer.
#
# SM, 01 Nov 2006, initial version from Apache2 by AK.
# SM, 01 Aug 2007, Updated apache version to 2.2.4 and Openssl to 0.9.8e 
# RR, 14 Jan 2008, Updated apache version to 2.2.6  
# IS, 17 Mar 2008, Updated apache version to 2.2.8
# IS, 10 Dec 2008, Update apache version to 2.2.10, OpenSSL to 0.9.8i
# IS, 16 Dec 2008, Update apache version to 2.2.11
# PP, 29 Jan 2009, Include support for 64 bit
# RR, 23 Jan 2010, Update apache version to 2.2.14, OpenSSL to 0.9.8l
# MA, 23 Jan 2011, Update apache version to 2.2.17, OpenSSL to 0.9.8q
# RR, 02 Sep 2011, Update apache version to 2.2.21, OpenSSL to 0.9.8r
# RR, 02 Feb 2013, Update apache version to 2.2.23, OpenSSL to 0.9.8v
# RR, 02 Aug 2013, Update apache version to 2.2.25, OpenSSL to 0.9.8y
# RR, 25 May 2014, Update apache version to 2.2.27, OpenSSL to 0.9.8y
# RR, 11 Jan 2015, Update apache version to 2.2.29, OpenSSL to 1.0.1j
# Platform specific things

case `uname -s` in
	Linux)
		patch=patch
		;;
	SunOS)
		patch=/usr/local/bin/patch
		;;
	AIX)
		patch=/opt/freeware/bin/patch
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -media dir      directory with source archives"
	print "                       (default: media)"
	print "       -version v      Apache version to compile"
	print "                       (default: 2.2.29)"
	print "       -sslversion v   OpenSSL version to compile"
	print "                       (default: 1.0.1j)"
	print "       -jpmcversion v  Apache JPMC version"
	print "                       (default: none, must be specified)"
	print "       -patches p      Apache patches to apply"
	print "                       (default: none)"
	print "       -sslpatches p   OpenSSL patches to apply"
	print "                       (default: none)"
	print "       -mpms m1,m2     MPMs to compile, normal choice last"
	print "                       (default: prefork,worker)"
	print "       -out dir        target directory to write results"
	print "                       (default: media)"
	print "       -64bit flag     whether to compile 64 bit"
	print "                       (default: false, can be true or false )"
	print "       -zap flag       overwrite output files"
	print "                       (default: false)"
	exit 2
	}

# Build OpenSSL.
# Pass "threads", so the generate code can be used by worker MPM.
# Use zlib, and prefer to pick up the systems copy.
# Avoid picking up dependencies on Kerberos (when we build on Global Linux 3)

build_openssl()
	{
	print "=== Build OpenSSL $sslversion"
	print "Expanding ..."
	expand_arc $media/openssl-$sslversion /local/apache22build$m
	cd /local/apache22build$m/openssl-$sslversion
	for p in `print $sslpatches | sed 's/,/ /g'` ; do
		print "Patching with $p ..."
		$patch -p1 < $media/$p
	done
	print "Configuring ..."
	
	if [[ "$m64mode" = "true" ]] ; then
		if [[ `uname -s` = Linux ]] ; then
                         export LIBS=-ldl
			./config --openssldir=/local/apache22build$m/apache22/openssl threads zlib zlib-dynamic no-krb -ldl
                elif [[ `uname -s` = AIX ]] ; then
                        ./Configure aix64-gcc --openssldir=/local/apache22build$m/apache22/openssl threads zlib zlib-dynamic no-krb -ldl
		else
			./Configure solaris64-sparcv9-gcc --openssldir=/local/apache22build$m/apache22/openssl threads zlib zlib-dynamic no-krb -ldl
		fi
	else
		if [[ `uname -s` = Linux ]] ; then
                         export LIBS=-ldl
		fi
	      ./config --openssldir=/local/apache22build/apache22/openssl threads zlib zlib-dynamic no-krb -ldl
	fi      
	print "Compiling (5mins) ..."
	make
	print "Installing ..."
	mkdir -p /local/apache22build$m/apache22/openssl
	make install
	if [[ -d /local/apache22build$m/apache22/openssl/include/openssl ]] ; then
		cp /local/apache22build$m/apache22/openssl/include/openssl/*.h /local/apache22build$m/apache22/openssl/include
	fi
	}

# The libtool autoconfig logic in Apache 2.2.4 makes some poor choices on AIX.
#   libaprutil-1 ends up knowing the absolute path of libapr-1 and libexpat.
#   httpd ends up knowing the path of libaprutil.
# This can be seen using the AIX dump -H command.
# We "make" in /local/apache22-build, and "make install" to /local/apache22.
# But we'll run in some other directory /local/apache22/<inst>.
# See http://www.mail-archive.com/dev@httpd.apache.org/msg17168.html
# The logic below fixes httpd and other binaries.
# But libraries still end up knowing both "make" and "make install" paths.

unhardcode_libraries()
	{
	if [[ `uname -s` = AIX ]] ; then
		for f in `find . -name libtool` ; do
			cp $f $f-pre_unhardcode
			# we don't want hard coded paths in libraries
			# linking with DIR/libNAME.so won't hardcode DIR (as we are using -bnoipath)
			# -LDIR does hardcode DIR (not sure if this is true)
			# when libtool tries to hardcode $libdir using the flag spec, we've ensured that $libdir isn't actually added
			sed \
				-e "s?^\(hardcode_into_libs\)=yes?\1=no?" \
				-e "s?^\(hardcode_direct\)=yes?\1=no?" \
				-e "s?^\(hardcode_minus_L\)=no?\1=yes?" \
                                -e "s?^\(hardcode_libdir_flag_spec\)=.*?\1=\"\\\${wl}-bnoipath \\\${wl}-blibpath:/opt/freeware/lib64:/opt/freeware/lib:/usr/lib:/lib\"?" \
				< $f-pre_unhardcode > $f
		done 
	fi
	}

# Build Apache (with a particular choice of MPM).
# Prefer to dynamically load modules.
# We are forced to statically link mod_ssl.so, see comments below.
# We need zlib to be able to build mod_deflate.so.
# We use the copy of SSL we are building and bundling with Apache.
# We avoid dependencies on GDBM, NDBM and Berkeley DB, as they may not be on
# target machine, and instead we rely on the built-in SDBM implementation.

# Why statically link mod_ssl.so?
# http://www.issociate.de/board/goto/12717/Problems_with_Apache_2.0.35_and_SSL.html
# says
#   Yes, it's a fairly frequently asked question. The problem is that you've
#   built a shared mod_ssl against a static OpenSSL (ie, libssl.a and
#   libcrypto.a instead of .so). That won't work because the way the build
#   system currently works, OpenSSL is linked into httpd, not mod_ssl. httpd
#   doesn't need the symbols from the OpenSSL libraries, so the static linker
#   throws them away, meaning they're no longer available when mod_ssl is
#   dynamically linked at runtime.
#   Solution: use a shared OpenSSL.
# However, support for dynamic OpenSSL libraries is "experimental", and worse
# is not supported on AIX, therefore parts of OpenSSL end up being linked into
# httpd, and as a result we must statically link mod_ssl into httpd also.

build_apache()
	# $1=mpm
	{
	print "=== Build Apache $version"
	print "Expanding ..."
	expand_arc $media/httpd-$version /local/apache22build$m
	cd /local/apache22build$m/httpd-$version
	for p in `print $patches | sed 's/,/ /g'` ; do
		print "Patching with $p ..."
		$patch -p1 < $media/$p
	done
	print "Configuring (40mins) ..."
	if [[ "$m64mode" = "true" &&  `uname -s` = AIX ]] ; then
		export CC='gcc -maix64' ;
	fi
	if [[ `uname -s` = Linux ]] ; then
		# Linux typically has a system install of OpenSSL and on the
		# Linux RHEL 3 build, this has dependencies on Kerberos.
		# Unfortunately the Apache configure script detects this
		# and makes Apache dependant on this too.
		# But we are using our own local OpenSSL.
		# So we try to prevent this happening. 
		mv -f configure configure-old
		sed 's/$PKGCONFIG openssl/false/g' < configure-old > configure
		chmod 755 configure
	fi
	./configure \
		--prefix=/local/apache22build$m/apache22  \
		--enable-mods-shared=all \
		--enable-deflate \
		--enable-so=static \
		--enable-proxy=shared \
		--enable-ssl=static \
		--enable-cgid=shared \
		--enable-cache=shared \
		--enable-mem-cache=shared \
		--enable-file-cache=shared \
		--enable-disk-cache=shared \
		--with-z \
		--with-ssl=/local/apache22build$m/apache22/openssl \
		--without-gdbm \
		--without-ndbm \
		--without-berkeley-db \
		--with-mpm=$mpm \
                --with-included-apr \
		CFLAGS=-DSSL_EXPERIMENTAL_ENGINE
	unhardcode_libraries
	print "Cleaning ..."
	make clean
	print "Compiling (6mins) ..."
	make
	print "Installing (8mins) ..."
	make install
	cp /local/apache22build$m/apache22/bin/httpd /local/apache22build$m/apache22/bin/httpd_$mpm
	}

# Pick up handy code

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


# Get the utility functions we need
. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh


# Defaults

media=media
version=2.2.29
sslversion=1.0.1j
jpmcversion=
patches=auto
sslpatches=auto
mpms=prefork,worker
out=media
zap=false
#64bit=false
m64mode=false

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-media*)	media=$2 ;;
		-v*)		version=$2 ;;
		-sslv*)		sslversion=$2 ;;
		-jpmcv*)	jpmcversion=$2 ;;
		-p*)		patches=$2 ;;
		-sslp*)		sslpatches=$2 ;;
		-mpm*)		mpms=$2 ;;
		-o*)		out=$2 ;;
		-64bit)		m64mode=$2 ;;
		-z*)		zap=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$jpmcversion" = "" ]] ; then
	usage
fi

if [[ "$patches" = "auto" ]] ; then
	patches=
fi

if [[ "$sslpatches" = "auto" ]] ; then
	sslpatches=
fi

if [[ "$out" != /* ]] ; then
	out=`pwd`/$out
fi

if [[ "$zap" != "true" && "$zap" != "false" ]] ; then
	usage
fi

if [[ "$1" != "" ]] ; then
	usage
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
fi	

# Check there isn't already an Apache directory before proceeding.
# This could save us from overwriting a Existing Apache install.

if [[ -d /local/apache22build$m/apache22 ]] ; then
	if [[ $zap = true ]] ; then
		rm -rf /local/apache22build$m/apache22
	else
		print "$0: /local/apache22build$m/apache22 exists, aborting"
		exit 5
	fi
fi

# Check there isn't already the output file before proceeding.
# If you want to regenerate a previous file, delete it first.
# This could save us from accidentally deleting previous builds.
#haoran
determine_rhel_version

if [[ "$m64mode" = "true" ]] ; then
	if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
		outfile=$out/apache-$version.$jpmcversion-`uname -s`-${rhel_version}-x64-jpmc.bin.tar
	else 
		outfile=$out/apache-$version.$jpmcversion-`uname -s`-x64-jpmc.bin.tar
	fi
	
else

	if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
                outfile=$out/apache-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin.tar
        else
                outfile=$out/apache-$version.$jpmcversion-`uname -s`-jpmc.bin.tar
        fi
fi


if [[ -r $outfile.gz ]] ; then
	if [[ $zap = true ]] ; then
		rm $outfile.gz
	else
		print "$0: $outfile.gz exists, aborting"
		exit 6
	fi
fi

# Note that we cannot build /tmp, as on AIX, the libraries end up including
# these directories on their search paths, which is a security exposure,
# given that mere mortal users can write into /tmp, and the system will look
# for libraries along these search paths, ahead of system search paths.

mkdir -p /local/apache22build$m

# http://www-128.ibm.com/developerworks/blogs/dw_blog.jspa?roll=-4&blog=750
# says the following can dramatically reduce configure times.
# Indeed on ubli31 (4x1GHz CPU), this can reduce a couple of hours to 40mins.
if [[ `uname -s` = AIX ]] ; then
	bash=/opt/freeware/bin/bash
	if [[ -x $bash ]] ; then
		export CONFIG_SHELL=$bash
		export CONFIG_ENV_ARGS=$bash
	fi

	if [[  "$m64mode" = "true" ]] ; then
		export OBJECT_MODE=64;
	fi
fi

# Build
mkdir -p /tmp/apache22$m #Directory for logs
log=/tmp/apache22$m/buildapache22$m_`date +%H%M%d%m%Y`.log
print "=== buildapache22$m.log" > $log
env >> $log
df -k >> $log


build_openssl >> $log 2>&1
print "Build openssl COMPLETED............... "
print "Will start Apache22 for 64 bit........... "
for mpm in `print $mpms | sed 's/,/ /g'` ; do
	build_apache $mpm >> $log 2>&1
done

# Check out a few things

print "=== dependency checking" >> $log
for f in bin/httpd lib/libapr-1.so lib/libaprutil-1.so ; do
	print -- "--- file $f" >> $log
	ldd /local/apache22build$m/apache22/$f >> $log 2>&1
	if [[ `uname -s` = AIX ]] ; then
		dump -H /local/apache22build$m/apache22/$f >> $log 2>&1
	fi
done

# Make the package

cd /local/apache22build$m/apache22
tar -cf $outfile *
gzip $outfile
chmod 644 $outfile.gz

exit 0
./build/buildperl5.sh
========================================
#!/bin/ksh
#
#set -x
# buildperl5.sh - Build Perl 5 from source for use in Apache 2.2
#
# This script is used by DCS eCommerce Engineering to prepare a build of
# Perl binaries and mod_perl from source, for use within Apache 2.2.
#
# This script would be used after buildapache22.sh.
# Its not a part of buildapache22.sh, as building Apache takes ages, and
# we would not want to repeat this every time we attempt a build of Perl.
#
# Records in /tmp/apache22/buildperl5.log
#   environment and disk space
#   output of expand, configure, compile and install
#
# Output is a .tar.gz of perl5 subdirectory, and mod_perl module.
#
# Allows the generated .tar.gz to be placed in a directory of the users choice,
# allowing 3rd parties to use this script, from the R/O filer.
#
# SM  28 Sept 2006 Initail Version,based on buildperl5.sh from Apache2 Build
#                  Added a parameter MP_APR_CONFIG in build_modperl.
# SM  01 Aug 2007 updated modperl version to 2.0.3
# PP, 09 Feb 2009 Updated to include 64 bit support
# RR, 01 Feb 2010 Updated to include 64-bit support for AIX
# MA, 05 Feb 2011 updated modperl version to 2.0.4 and build perl 5.12.3

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -media dir         directory with source archives"
	print "                          (default: media)"
	print "       -version v         Perl version to compile"
	print "                          (default: 5.12.3)"
	print "       -modperlversion v  mod_perl version to compile (if compiling mod_perl)"
	print "                          (default: 2.0.4)"
	print "       -jpmcversion v     Perl JPMC version"
	print "                          (default: none, must be specified)"
	print "       -out dir           target directory to write results"
	print "                          (default: media)"
	print "       -64bit falg        whether to compile 64 bit"
	print "                       	 (default: false, can be true or false )"
	print "       -zap flag          overwrite output files"
	print "                          (default: false)"
	exit 2
	}

# Build Perl5, multithreaded, using gcc, and embed within Apache 2.2

build_perl()
	{
	set -x
	print "=== Build perl $version"
	print "Expanding ..."
	expand_arc $media/perl-$version /local/apache22build$m
	cd /local/apache22build$m/perl-$version
	print "Cleaning ..."
	make clean
	print "Configuring ..."
	if [[ `uname -s` == AIX ]] ; then
		# Can't use shared perl library, compilation fails
		# The way in which linker arguments are passed through gcc
		# is incorrect.
		useshrplib=
	elif [[ `uname -s` == Linux ]] ; then
		useshrplib=
	else	
		useshrplib=-Duseshrplib=true
	fi
	if [[ "$m64mode" = "true" ]] ; then
		if [[ `uname -s` == Linux ]] ; then
			./Configure \
			-Dprefix=/local/apache22build$m/apache22/perl5 \
			-Dcc=gcc \
			-Duse64bitall \
			-Dusedevel \
			-Dusethreads \
			-des \
			-Accflags='-fPIC' \
			-Dloclibpth=/usr/lib64 \
			$useshrplib
		elif [[ `uname -s` == AIX ]] ; then
                        ./Configure \
                        -Dprefix=/local/apache22build$m/apache22/perl5 \
                        -Dcc=gcc \
                        -Duse64bitall \
                        -Dusedevel \
                        -Dusethreads \
                        -des \
			 $useshrplib
			 
		else
			./Configure \
			-Dprefix=/local/apache22build$m/apache22/perl5 \
			-Dcc=gcc \
			-Duse64bitall \
			-Dusedevel \
			-Dusethreads \
			-des \
			-Aldflags="-m64" \
			-Alddlflags="-m64" \
			$useshrplib
		 	
		fi	
	else
                if [[ `uname -s` == Linux ]] ; then
	 	./Configure \
                -Dprefix=/local/apache22build/apache22/perl5 \
                -des \
                -Dusedevel \
                -Dcc=gcc \
                -Dusethreads \
		-Accflags='-fPIC' \
                $useshrplib	

		else

		./Configure \
		-Dprefix=/local/apache22build/apache22/perl5 \
		-des \
		-Dusedevel \
		-Dcc=gcc \
		-Dusethreads \
		$useshrplib

		fi
	fi
	print "Compiling ..."
	make
	print "Installing ..."
	mkdir -p /local/apache22build$m/apache22/perl5
	make install
	if [[ ! -d /local/apache22build$m/apache22/perl5/bin ]] ; then
		print "/local/apache22build$m/apache22/perl5/bin does not exist, install exit"
		exit 3
	fi
	if [[ ! -x /local/apache22build$m/apache22/perl5/bin/perl && -x /local/apache22build$m/apache22/perl5/bin/perl$version ]] ; then
		( cd /local/apache22build$m/apache22/perl5/bin ; ln -s perl$version perl ) 
	fi
	}

# Build mod_perl.

build_modperl()
	{
	print "=== Build mod_perl"
	print "Expanding ..."
	expand_arc $media/mod_perl-$modversion /local/apache22build$m
	if [[  -d /local/apache22build$m/mod_perl-$modversion ]] ; then
		cd /local/apache22build$m/mod_perl-$modversion
	else
		print "no /local/apache22build$m/mod_perl-$modversion dir found, aborting"
		exit 3
	fi
	print "Cleaning ..."
	make clean
	print "perl Makefile..."
	/local/apache22build$m/apache22/perl5/bin/perl Makefile.PL MP_APXS=/local/apache22build$m/apache22/bin/apxs MP_APR_CONFIG=/local/apache22build$m/apache22/bin/apr-1-config
	print "Compiling ..."
	make
	print "Installing ..."
	make install
	}

# Pick up handy code

# Pick up handy code

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


# Get the utility functions we need
. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Defaults

media=media
version=5.12.3
modversion=2.0.4
jpmcversion=
out=media
zap=false
#64bit=false
m64mode=false
# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-me*)		media=$2 ;;
		-v*)		version=$2 ;;
		-modperlv*)	modversion=$2 ;;
		-jpmcv*)	jpmcversion=$2 ;;
		-o*)		out=$2 ;;
		-z*)		zap=$2 ;;
		-64bit*)	m64mode=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$jpmcversion" = "" ]] ; then
	usage
fi

if [[ ! -f $media/perl-$version.tar.gz ]] ; then
	print "$0: $media/perl-$version.tar.gz not exists, aborting"
	exit 5
fi

if [[ ! -f $media/mod_perl-$modversion.tar.gz ]] ; then
	print "$0: $media/mod_perl-$modversion.tar.gz not exists, aborting"
	exit 5
fi

if [[ "$out" != /* ]] ; then
	out=`pwd`/$out
fi

if [[ "$zap" != "true" && "$zap" != "false" ]] ; then
	usage
fi

if [[ "$1" != "" ]] ; then
	usage
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
fi	


# Check there is an Apache build to compile against
if [[ "$m64mode" = "false" ]] ; then
	if [[ ! -d /local/apache22build/apache22 ]] ; then
		print "$0: /local/apache22build/apache22 does not exist, aborting"
		exit 5
	fi
	
elif [[ "$m64mode" = "true" ]] ; then
	if [[ ! -d /local/apache22build$m/apache22 ]] ; then
		print "$0: /local/apache22build$m/apache22 does not exist, aborting"
		exit 5
	fi
fi	
	
	

# Check there isn't already an Apache Perl directory before proceeding.
if [[ "$m64mode" = "false" ]] ; then
	if [[ -d /local/apache22build/apache22/perl5 ]] ; then
		if [[ $zap = true ]] ; then
			rm -rf /local/apache22build/apache22/perl5
		else
			print "$0: /local/apache22build/apache22/perl5 exists, aborting"
		exit 5
		fi
	fi
elif [[ "$m64mode" = "true" ]] ; then
	if [[ -d /local/apache22build$m/apache22/perl5 ]] ; then
		if [[ $zap = true ]] ; then
			rm -rf /local/apache22build$m/apache22/perl5
		else
			print "$0: /local/apache22build$m/apache22/perl5 exists, aborting"
		exit 5
		fi
	fi

fi

# Check there isn't already the output file before proceeding.
# If you want to regenerate a previous fie, delete it first.
# This could save us from accidentally deleting previous builds.

determine_rhel_version

if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
                outfile=$out/apache-perl-$version.$jpmcversion-`uname -s`-${rhel_version}-x64-jpmc.bin.tar
        else
                outfile=$out/apache-perl-$version.$jpmcversion-`uname -s`-x64-jpmc.bin.tar
        fi

else

        if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
                outfile=$out/apache-perl-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin.tar
        else
                outfile=$out/apache-perl-$version.$jpmcversion-`uname -s`-jpmc.bin.tar
        fi
fi
	
if [[ -r $outfile.gz ]] ; then
	if [[ $zap = true ]] ; then
		rm $outfile.gz
	else
		print "$0: $outfile.gz exists, aborting"
		exit 6
	fi
fi

# Note that we cannot build /tmp, as on AIX, the libraries end up including
# these directories on their search paths, which is a security exposure,
# given that mere mortal users can write into /tmp, and the system will look
# for libraries along these search paths, ahead of system search paths.

mkdir -p /local/apache22build$m

# http://www-128.ibm.com/developerworks/blogs/dw_blog.jspa?roll=-4&blog=750
# says the following can dramatically reduce configure times.
# Indeed on ubli31 (4x1GHz CPU), this can reduce a couple of hours to 40mins.
if [[ `uname -s` = AIX ]] ; then
	bash=/opt/freeware/bin/bash
	if [[ -x $bash ]] ; then
		export CONFIG_SHELL=$bash
		export CONFIG_ENV_ARGS=$bash
	fi
fi

# Build
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/buildperl5_`date +%H%M%d%m%Y`.log
print "=== buildperl5.log started at `date +%H%M%d%m%Y`....." > $log
env >> $log
df -k >> $log

build_perl >> $log 2>&1
build_modperl >> $log 2>&1

# Check out a few things

print "=== dependency checking" >> $log
for f in lib/site_perl/*/*/auto/*.so \
	 lib/site_perl/*/*/auto/*/*.so ; do
	print -- "--- file $f" >> $log
	ldd /local/apache22build$m/apache22/perl5/$f >> $log 2>&1
	if [[ `uname -s` = AIX ]] ; then
		dump -H /local/apache22build$m/apache22/perl5/$f >> $log 2>&1
	fi
done

# Make the package

cd /local/apache22build$m/apache22
tar -cf $outfile perl5 modules/mod_perl.*
gzip $outfile
chmod 644 $outfile.gz


exit 0
./build/buildmodsecurity.sh
========================================
#!/bin/ksh
# Build modsecurity 2.7.x from source
#
# This script is used by  Web Engineering to prepare a build of
# mod security  binaries from source.
#

# Records in /tmp/apache22/buildmodsecurity.log
#   environment and disk space
#   output of expand, configure, compile and install
#   dependencies of generated executables
#
# Allows the generated .tar.gz to be placed in a directory of the users choice,
# allowing 3rd parties to use this script, from the R/O filer.
#



usage()
	{
	print "usage: $0 {flags}"
	print "flags: -media dir         directory with source archives"
	print "                          (default: media)"
	print "       -curlversion v  	 curl version to compile"
	print "                          (default: 7.29.0"
	print "       -luaversion v  	 Lua version to compile"
	print "                          (default: 5.2.1)"	
	print "       -jpmcversion v     PHP JPMC version"
	print "                          (default: none, must be specified)"
	print "       -64bit flag     	 whether to compile 64 bit"
	print "                       	 (default: false, can be true or false )"
	print "       -out dir           target directory to write results"
	print "                          (default: media)"
	print "       -zap flag          overwrite output files"
	print "                          (default: false)"
	exit 2
	}

        check_library()
		{
		case `uname -s` in
		        Linux)
		                set -A library "lua" "pkgconfig" "expat" "expat-devel" \
		               "libcurl" "libcurl-devel"
		                ;;
		        SunOS)
		                set -A library
				;;
		        AIX)
		                set -A library "lua" "lua-devel" "pcre" "pcre-devel" "libiconv" "pkg-config" "expat" "expat-devel" \
		               "curl" "curl-devel"
				;;
		        *)
		                print "$0: unsupported platform"
		                exit 1
		                ;;
		esac
		
		all_lib_pass=yes
		
		for i in ${library[@]}
		do
			if [[ "`rpm -q  $i`" == *"not installed"* ]]; then
				echo "$i not installed"
				all_lib_pass=no	
			fi
		done
		if test "$all_lib_pass" = "no"; then
		       print "Some libraries not found"
		       exit 1
		fi
	}
	
	build_curl()
		{
		print "=== Build curl $curlversion"
		print "Expanding ..."
		expand_arc $media/curl-$curlversion /local/apache22build$m
		cd /local/apache22build$m/curl-$curlversion
		print "Cleaning ..."
		make clean
		print "Configuring ..."
		./configure --prefix=/local/apache22build$m/compiled_curl
		print "Compiling  curl..."
		make
		print "Installing curl ..."		
		make install
	}
	
	build_lua()
		{
		print "=== Build lua $luaversion"
		print "Expanding ..."
		expand_arc $media/lua-$luaversion /local/apache22build$m
		cd /local/apache22build$m/lua-$luaversion
		
		case `uname -s` in
		        Linux)
		                OS=linux
		                ;;
		        SunOS)
		                OS=solaris
		                ;;
		        AIX)
		                OS=aix
		                ;;
		        *)
		                print "$0: unsupported platform"
		                exit 1
		                ;;
		esac
		
		#http://people.apache.org/~trawick/apache-2-on-aix.html
		#Use -Wl,-bexpall instead of simply -bexpall with gcc. gcc doesn't understand -bexpall, 
		#but prefixing it with -Wl tells gcc to pass it on to the loader
		
		if [[ `uname -s` = AIX ]] ; then
			if [[ "$m64mode" = "true" ]] ; then
				sed -e 's/xlc/gcc -maix64/' < ./src/Makefile > tmp1
			else
				sed -e 's/xlc/gcc/' < ./src/Makefile > tmp1
			fi			
			sed -e 's/-brtl -bexpall/-Wl,-brtl -Wl,-bexpall/' < tmp1 > tmp2
			cp tmp2 ./src/Makefile
		fi
		# configure is not required
		make clean
		#make locally
		make $OS install INSTALL_TOP=/local/apache22build$m/compiled_lua
		#modsecurity likes so file and not archive file, so we are going to create so file manually
		#gcc -shared -o /local/apache22build$m/compiled_lua/lib/liblua.so /local/apache22build$m/compiled_lua/lib/liblua.a
	}

	build_libxml2()
	{
		print "=== Build libxml2 $libxml2version"
		print "Expanding libxml2 ..."
		expand_arc $media/libxml2-$libxml2version /local/apache22build$m
		cd /local/apache22build$m/libxml2-$libxml2version
        	# Aix - make does not like /usr/bin/m4 becuase it is older vesion, so we have to set new version which
        	# is in /opt/freeware 
        	if [[ `uname -s` = AIX ]] ; then
            		export M4=/opt/freeware/bin/m4
            		bash=/usr/bin/bash
        	fi 
        	if [[ `uname -s` = Linux ]] ; then
           		bash=`which bash`
        	fi 
		print "Cleaning ..."
		make clean
		print "Configuring ..."
        	$bash ./configure --prefix=/local/apache22build$m/compiled_libxml2
		print "Compiling (5mins) ..."
        	make
		print "Installing ..."
		mkdir -p /local/apache22build$m/compiled_libxml2
		make install
	}


# Build modsecurity

build_modsecurity()
	{
	print "=== Build mod_security $modsecurityversion"
	print "Expanding mod_security ..."
	# configure of modsecurity does respect prefix path, so modsecurity2.so file is stored in ./apache2/.libs directory
	# so at the end it tries to check the so file in prefix path and fails. so we need to run this build script twice
	# in the first run modsecurity2.so is crated, so in this build script needs to run second time by coping this .so file
	# in prefix path

	if [[ `uname -s` = AIX ]] ; then
	
		if [[  -f /local/apache22build$m/modsecurity-apache_$modsecurityversion/apache2/.libs/mod_security2.so ]] ; then
			cp /local/apache22build$m/modsecurity-apache_$modsecurityversion/apache2/.libs/mod_security2.so /local/apache22build$m/compiled_modsecurity/lib
		fi
	fi
		
	expand_arc $media/modsecurity-apache_$modsecurityversion /local/apache22build$m
	cd /local/apache22build$m/modsecurity-apache_$modsecurityversion       
	print "Cleaning ..."
	make clean
	print "Configuring mod security..."
        export PKG_CONFIG_PATH=/local/apache22build$m/lua-$luaversion/etc 
        ./configure \
        	--prefix=/local/apache22build$m/compiled_modsecurity \
                --with-apxs=/local/apache22build$m/apache22/bin/apxs \
        	--with-apr=/local/apache22build$m/httpd-$apacheversion/srclib/apr \
        	--with-apu=/local/apache22build$m/httpd-$apacheversion/srclib/apr-util \
        	--with-pcre=/local/apache22build$m/httpd-$apacheversion/srclib/pcre \
        	--with-libxml=/local/apache22build$m/compiled_libxml2 \
        	--with-curl=/local/apache22build$m/compiled_curl \
		--with-lua=/local/apache22build$m/compiled_lua
        
	mkdir -p /local/apache22build$m/modsecurity_compiled
        print "Compiling modsecurity ..."
        make
	print "Installing modsecurity..."
	make install
	}


# Pick up handy code

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


# Get the utility functions we need
. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Defaults

modsecurityversion=2.7.7
libxml2version=2.8.0
luaversion=5.2.1
curlversion=7.29.0
apacheversion=2.2.29
media=media
jpmcversion=
out=media
zap=false
#64bit=false
m64mode=false

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-med*)		media=$2 ;;		
		-curlv*)	curlversion=$2 ;;
		-luav*)		luaversion=$2 ;;
		-jpmcv*)	jpmcversion=$2 ;;
		-o*)		out=$2 ;;
		-64bit*)	m64mode=$2 ;;
		-z*)		zap=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$jpmcversion" = "" ]] ; then
	usage
fi

if [[ "$out" != /* ]] ; then
	out=`pwd`/$out
fi

if [[ "$zap" != "true" && "$zap" != "false" ]] ; then
	usage
fi

if [[ "$1" != "" ]] ; then
	usage
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
        export OBJECT_MODE=64
fi	


# Check there isn't already the output file before proceeding.
# If you want to regenerate a previous file, delete it first.
# This could save us from accidentally deleting previous builds.

determine_rhel_version

if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
                outfile=$out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-${rhel_version}-x64-jpmc.bin.tar
        else
                outfile=$out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin.tar
        fi

else

        if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
                outfile=$out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin.tar
        else
                outfile=$out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin.tar
        fi
fi
if [[ -r $outfile.gz ]] ; then
	if [[ $zap = true ]] ; then
		rm $outfile.gz
	else
		print "$0: $outfile.gz exists, aborting"
		exit 6
	fi
fi

# Note that we cannot build /tmp, as on AIX, the libraries end up including
# these directories on their search paths, which is a security exposure,
# given that mere mortal users can write into /tmp, and the system will look
# for libraries along these search paths, ahead of system search paths.

mkdir -p /local/apache22build$m

# http://www-128.ibm.com/developerworks/blogs/dw_blog.jspa?roll=-4&blog=750
# says the following can dramatically reduce configure times.
# Indeed on ubli31 (4x1GHz CPU), this can reduce a couple of hours to 40mins.
if [[ `uname -s` = AIX ]] ; then
	bash=/opt/freeware/bin/bash
        export PATH=/opt/freeware/bin:/usr/bin:/usr/local/bin:$PATH
	if [[ -x $bash ]] ; then
		export CONFIG_SHELL=$bash
		export CONFIG_ENV_ARGS=$bash
	fi
fi


check_library

# Build
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/buildmodsecurity_`date +%H%M%d%m%Y`.log
print "=== buildmodsecurity.log started at `date +%H%M%d%m%Y`....." > $log
#env >> $log
#df -k >> $log


build_curl >> $log 2>&1
if [[ ! -f /local/apache22build$m/compiled_curl/bin/curl ]] ; then
	print "no /local/apache22build$m/compiled_curl/bin/curl file, build exit"
	print "Install curl fail"
	exit 3
fi

build_lua >> $log 2>&1
if [[ ! -f /local/apache22build$m/compiled_lua/bin/lua ]] ; then
	print "no /local/apache22build$m/compiled_lua/bin/lua, build  exit"
	print "Install lua fail"
	exit 3
fi

build_libxml2 >> $log 2>&1
if [[ ! -f /local/apache22build$m/compiled_libxml2/bin/xml2-config ]] ; then
        print "no /local/apache22build$m/compiled_libxml2/bin/xml2-config, build  exit"
        print "Install libxml fail"
        exit 3
fi

mkdir -p /local/apache22build$m/apache22/modsecurity
build_modsecurity >> $log 2>&1

case `uname -s` in
	Linux)
		modsec_path=/local/apache22build$m/compiled_modsecurity/lib
		if [[ ! -f $modsec_path/mod_security2.so ]] ; then
			print "mod_security2.so $modsec_path not found"
			exit 3
		fi
		print "=== dependency checking" >> $log
		ldd  $modsec_path/mod_security2.so >>$log 2>&1
		;;
	AIX)
		modsec_path=/local/apache22build$m/modsecurity-apache_$modsecurityversion/apache2/.libs
		if [[ ! -f $modsec_path/mod_security2.so ]] ; then
			print "mod_security2.so $modsec_path not found"
			exit 3
		fi
		print "=== dependency checking" >> $log
		ldd     $modsec_path/mod_security2.so >>$log 2>&1
		print "=== dump command ===" >> $log
		dump -H $modsec_path/mod_security2.so >>$log 2>&1
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

if [[ "$m64mode" = "true" ]] ; then

mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/rules
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/module
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/libraries

cp -R /local/apache22buildx64/compiled_modsecurity/lib/* $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/libraries
mv $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/libraries/mod_security2.so $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/module
cp /local/apache22buildx64/modsecurity-apache_$modsecurityversion/modsecurity.conf-recommended $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf/
mv $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf/modsecurity.conf-recommended $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf/modsecurity.conf
cp /local/apache22buildx64/SpiderLabs-owasp-modsecurity-crs-ebe8790/modsecurity_crs_10_setup.conf.example $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf
mv $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf/modsecurity_crs_10_setup.conf.example $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf/modsecurity_crs_10_setup.conf
cp -R /local/apache22buildx64/SpiderLabs-owasp-modsecurity-crs-ebe8790/base_rules $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/rules

cd $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin

else

mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/rules
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/module
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/conf
mkdir -p $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/libraries

cp -R /local/apache22build/compiled_modsecurity/lib/* $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/libraries
mv $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/libraries/mod_security2.so $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/module
cp /local/apache22build/modsecurity-apache_$modsecurityversion/modsecurity.conf-recommended $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/conf/
mv $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/conf/modsecurity.conf-recommended $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/conf/modsecurity.conf
cp /local/apache22build/SpiderLabs-owasp-modsecurity-crs-ebe8790/modsecurity_crs_10_setup.conf.example $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-x64-jpmc.bin/conf
mv $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/conf/modsecurity_crs_10_setup.conf.example $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/conf/modsecurity_crs_10_setup.conf
cp -R /local/apache22build/SpiderLabs-owasp-modsecurity-crs-ebe8790/base_rules $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin/rules

cd $out/apache-modsecurity-$modsecurityversion.$jpmcversion-`uname -s`-jpmc.bin

fi
tar -cf $outfile *
gzip $outfile
chmod 644 $outfile.gz

exit 0

./build/buildphp5.sh
========================================
#!/bin/ksh
#set -x
# buildphp5.sh - Build PHP 5.x.x from source
#
# This script is used by DCS eCommerce Engineering to prepare a build of
# PHP 5 binaries from source.
#
# This script would be used after buildapache22.sh and buildperl5.sh if
# perl is not already installed on the host machine.

# Records in /tmp/apache22/buildphp5.log
#   environment and disk space
#   output of expand, configure, compile and install
#   dependencies of generated executables
#
# Allows the generated .tar.gz to be placed in a directory of the users choice,
# allowing 3rd parties to use this script, from the R/O filer.
#
# SM  29 Sept 2006 Initial Version from buildphp5.sh from Apache2 build by AK
# SM  23 Jan 2007 Included the support for PHP 5.2.0 and made it the default version.
# SM  01 Aug 2007 Pick up PHP 5.2.3
# RR  14 Jan 2008 Pick up PHP 5.2.5
# IS  10 Dec 2008 Pick up PHP 5.2.6
# IS  18 Dec 2008 Pick up LibXML2 2.7.2
# PP  11 Feb 2009 Updated to include 64 bit install 
# RR  25 Jan 2010 Pick up PHP 5.2.6 for 64-bit UNIX 
# SM  08 Feb 2010 reverted back the version to 5.2.6.  Included the --enable-libxml for resolving compilation issue with 64-bit AIX.
# 		  Included the logic setting 64-bit options for AIX. Fixed a bug with setting the make path by moving platform setting after user input.
# MA 05 Feb 2011 Pick up PHP 5.2.17


usage()
	{
	print "usage: $0 {flags}"
	print "flags: -media dir         directory with source archives"
	print "                          (default: media)"
	print "       -gettextversion v  gettext version to compile"
	print "                          (default: 0.18.1.1"
	print "       -libxml2version v  libxml2 version to compile"
	print "                          (default: 2.7.8)"
	print "       -phpversion v      PHP version number"
	print "                          (default: 5.2.17)"
	print "       -phpconf flags     additional PHP configure flags"
	print "                          (default: none)"
	print "       -jpmcversion v     PHP JPMC version"
	print "                          (default: none, must be specified)"
	print "       -64bit flag     	 whether to compile 64 bit"
	print "                       	 (default: false, can be true or false )"
	print "       -out dir           target directory to write results"
	print "                          (default: media)"
	print "       -zap flag          overwrite output files"
	print "                          (default: false)"
	exit 2
	}

#Build GNU Make

build_gnumake()
	{
	  print "Expanding ...."
	  expand_arc $media/make-3.81 /local/apache22build$m
	  cd /local/apache22build$m/make-3.81
	  print "Configuring ...."
	  ./configure --prefix=/local/apache22build$m/gnumake
	  print "Compiling (5mins) ..."
	  make
	  print "Installing ...."
	  make install
	}



# Build gettext.

build_gettext()
	{
	print "=== Build gettext $gettextversion"
	print "Expanding ..."
	expand_arc $media/gettext-$gettextversion /local/apache22build$m
	cd /local/apache22build$m/gettext-$gettextversion
	print "Cleaning ..."
	$make clean
	print "Configuring ..."
	./configure --prefix=/local/apache22build$m/apache22/php5/gettext
	print "Compiling (5mins) ..."
	$make
	print "Installing ..."
	mkdir -p /local/apache22build$m/apache22/php5/gettext
	$make install
	}

# Build libxml2.

build_libxml2()
	{
	print "=== Build libxml2 $libxml2version"
	print "Expanding ..."
	expand_arc $media/libxml2-$libxml2version /local/apache22build$m
	cd /local/apache22build$m/libxml2-$libxml2version
	print "Cleaning ..."
	$make clean
	print "Configuring ..."
	./configure --prefix=/local/apache22build$m/apache22/php5/libxml2
	print "Compiling (5mins) ..."
	$make
	print "Installing ..."
	mkdir -p /local/apache22build$m/apache22/php5/libxml2
	$make install
	}

# Build mod_php as a Dynamically-Loaded Object

build_php5()
	{
	print "=== Build PHP $phpversion"
	print "Expanding ..."
	expand_arc $media/php-$phpversion /local/apache22build$m
	cd /local/apache22build$m/php-$phpversion
	if [[ -f config.status ]] ; then
		rm -f config.status
	fi
	if [[ -f config.cache ]] ; then
		rm -f config.cache
	fi
	print "Cleaning ..."
	$make clean
	print "Configuring (40mins) ..."
	
	# There is a dependency on the libiconv.so.2 by ld in solaris that cannot be resolved by passing in
	# --with-iconv=dir option to the configure script.  Is resolved by explicitly setting the LDFLAG 
        # set the LDFLAG explicitly to the libiconv.so.2 location.	
	if [[ `uname -s` = SunOS ]]; then
           cp $media/libiconv.so.2 /local/apache22build$m/apache22/lib
	   export LDFLAGS=$LDFLAGS' -R/local/apache22build$m/apache22/lib -L/local/apache22build$m/apache22/lib'
	fi
                ./configure \
                        --prefix=/local/apache22build$m/apache22/php5 \
                        --with-apxs2=/local/apache22build$m/apache22/bin/apxs \
                        --with-gettext=/local/apache22build$m/apache22/php5/gettext \
                        --with-libxml-dir=/local/apache22build$m/apache22/php5/libxml2 \
		#	--with-mysql=/local/LAMP/mysql \
	               # --with-mysqli=/local/LAMP/mysql/bin/mysql_config \			
			#--with-zlib_dir=/usr/lib64 \
                        #--disable-cli \
                        --disable-cgi \
                        --enable-soap \
                        --enable-sockets \
                        --enable-mbstring \
                        --enable-ftp \
                        --enable-shared \
                        --enable-so \
                        $phpconf
	
	#workaround for bug http://bugs.php.net/bug.php?id=38872
	if [[ `uname -s` = AIX ]] ; then
	                sed 's!\\1\.o!.libs\\/\\1.o!' <Makefile >tmp1
                        #sed 's/\([A-Za-z0-9_]*\)\.lo/.libs\/\1.o/g' <Makefile >tmp1
	                cp tmp1 Makefile
        fi
        print "Compiling (15mins) ..."
	$make
	
	print "Installing (10mins) ..."
	if [[ `uname -s` = AIX ]] ; then
		# There is an issue with building php on AIX carried over from previous version where we can't simply make install.
		# we'll use the same  workaround as in previous versions.
		# ie: install the stuff that works, and copy the .so file.
		# Note: order changed to reflect the Makefile
		# Note: install-modules omitted - we've not built any
		cp .libs/libphp5.so /local/apache22build$m/apache22/modules
		$make install-cli install-pear install-build install-headers install-programs
		#$make install
	else
		$make install
	fi
	}

# Pick up handy code

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


# Get the utility functions we need
. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Defaults

media=media
phpversion=5.2.17
phpconf=
gettextversion=0.18.1.1
libxml2version=2.7.8
jpmcversion=
out=media
zap=false
#64bit=false
m64mode=false

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-med*)		media=$2 ;;
		-phpv*)		phpversion=$2 ;;
		-phpc*)		phpconf=$2 ;;
		-gettextv*)	gettextversion=$2 ;;
		-libxml2v*)	libxml2version=$2 ;;
		-jpmcv*)	jpmcversion=$2 ;;
		-o*)		out=$2 ;;
		-64bit*)	m64mode=$2 ;;
		-z*)		zap=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$jpmcversion" = "" ]] ; then
	usage
fi

if [[ "$out" != /* ]] ; then
	out=`pwd`/$out
fi

if [[ "$zap" != "true" && "$zap" != "false" ]] ; then
	usage
fi

if [[ "$1" != "" ]] ; then
	usage
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
fi	


#set Platform specific things
case `uname -s` in
        Linux)
                make=`which make`
                ;;
        SunOS)
                make=`which make`
                ;;
        AIX)
                #Should use the gnu make that will be installed at below location for building php.
                #note that for building gnu make itself, the native AIX make is used.
                make=/local/apache22build$m/gnumake/bin/make
        #       make=/local/apache22buildx64/gnumake/bin/make
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Check there isn't already an PHP directory before proceeding.
# This could save us from overwriting a real PHP install.

if [[ -d /local/apache22build$m/apache22/php5 ]] ; then
	if [[ $zap = true ]] ; then
		rm -rf /local/apache22build$m/apache22/php5
	else
		print "$0: /local/apache22build$m/apache22/php5 exists, aborting"
		exit 5
	fi
fi

# Check there isn't already the output file before proceeding.
# If you want to regenerate a previous file, delete it first.
# This could save us from accidentally deleting previous builds.


determine_rhel_version

if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
                outfile=$out/apache-php-$phpversion.$jpmcversion-`uname -s`-${rhel_version}-x64-jpmc.bin.tar
        else
                outfile=$out/apache-php-$phpversion.$jpmcversion-`uname -s`-x64-jpmc.bin.tar
        fi

else

        if [ -n "$(grep 5.[0-9] /etc/redhat-release)" ];then
                outfile=$out/apache-php-$phpversion.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin.tar
        else
                outfile=$out/apache-php-$phpversion.$jpmcversion-`uname -s`-jpmc.bin.tar
        fi
fi


if [[ -r $outfile.gz ]] ; then
	if [[ $zap = true ]] ; then
		rm $outfile.gz
	else
		print "$0: $outfile.gz exists, aborting"
		exit 6
	fi
fi

# Note that we cannot build /tmp, as on AIX, the libraries end up including
# these directories on their search paths, which is a security exposure,
# given that mere mortal users can write into /tmp, and the system will look
# for libraries along these search paths, ahead of system search paths.

mkdir -p /local/apache22build$m

# http://www-128.ibm.com/developerworks/blogs/dw_blog.jspa?roll=-4&blog=750
# says the following can dramatically reduce configure times.
# Indeed on ubli31 (4x1GHz CPU), this can reduce a couple of hours to 40mins.
if [[ `uname -s` = AIX ]] ; then
	bash=/opt/freeware/bin/bash
	if [[ -x $bash ]] ; then
		export CONFIG_SHELL=$bash
		export CONFIG_ENV_ARGS=$bash
	fi
fi

# Build
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/buildphp5_`date +%H%M%d%m%Y`.log
print "=== buildphp5.log started at `date +%H%M%d%m%Y`....." > $log
#env >> $log
#df -k >> $log


# GNU Make needs to be used to make php on AIX because of the following bug 
#http://bugs.php.net/bug.php?id=35888
#Installing in it's own directory to prevent any conflict with any other versions 
# installed in default path /usr/local/bin

if [[ `uname -s` = AIX ]] ; then
 mkdir -p /local/apache22build$m/gnumake
 if [[ "$m64mode" = "true" ]] ; then
    export OBJECT_MODE=64
    export CC='gcc -maix64'
 fi
 build_gnumake >> $log 2>&1
fi

build_gettext >> $log 2>&1
if [[ ! -f /local/apache22build$m/apache22/php5/gettext/bin/gettext ]] ; then
	print "no /local/apache22build$m/apache22/php5/gettext/bin/gettext file, intall exit"
	print "Install gettext fail"
	exit 3
fi
build_libxml2 >> $log 2>&1
if [[ ! -d /local/apache22build$m/apache22/php5/libxml2/lib ]] ; then
	print "no /local/apache22build$m/apache22/php5/libxml2/lib directory, intall exit"
	print "Install libxml2 fail"
	exit 3
fi

mkdir -p /local/apache22build$m/apache22/php5
build_php5 >> $log 2>&1
if [[ `uname -s` != AIX ]] ; then
    if [[ ! -d /local/apache22build$m/apache22/php5/bin ]] ; then
	print "Install php5 fail"
	exit 3
    fi
fi

# Check libphp5.so file, if exists copy to php5 dir

if [[ ! -f /local/apache22build$m/apache22/modules/libphp5.so ]] ; then
	print "Install php5 apache22 fail, no libphp5.so created"
	exit 3
fi
cp /local/apache22build$m/apache22/modules/libphp5.so /local/apache22build$m/apache22/php5/lib

# Check out a few things

print "=== dependency checking" >> $log
for f in bin/php lib/libphp5.so ; do
	print -- "--- file $f" >> $log
	ldd /local/apache22build$m/apache22/php5/$f >> $log 2>&1
	if [[ `uname -s` = AIX ]] ; then
		dump -H /local/apache22build$m/apache22/php5/$f >> $log 2>&1
	fi
done

# Make the package

cd /local/apache22build$m/apache22/php5
tar -cf $outfile *
gzip $outfile
chmod 644 $outfile.gz

exit 0
./admin/janusaddsite.sh
========================================
#!/bin/ksh
#set -x
# configurewebiste.sh - Configures websites and application to work with a 
# single instance of Janus
#
# MA, 13 Apr 2009,Initial version.
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
#

# Platform specific things

case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp   
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        print "                               default: none, must be specified)"
        print "       -ctxroot str             Application context root"
        print "                               (default: none, must be specified)" 
        print "       -entitlement_id         Entitlement Id"
        print "                               (default: none, must be specified)"
        print "       -trust_level             Janus Trust Level"
        print "                               (default: 0 ,0 = secure,1 = insecure,2 = persistent)" 
        exit 2
        }

#Modify Apache website 
mod_conf()
        # $1=httpdConf
        # $2=httpdConf-Backup
        {
        cat $1 | \
        sed \
                -e "/janus.conf/d" \
                > $2
              print "Include $jw_root/janusweb/current/config/janus.conf" >> $2
        }

#Function to modify janus.conf
mod_janus_conf()
        # $1=janusConf
        # $2=entlid
        # $3=ctxroot
        # $4=JanusTrustLevel
        # $5=janusConf-Backup
        {
        cat $1 | \
         sed \
             -e "s/"@SYSTEM_PRINCIPAL@"//" \
            > $5
         print "<Location "$3"> " >> $5
         print "       require valid-user" >> $5
	 print "       AuthType Janus" >> $5
 	 print "       JanusAuthoritative On" >> $5
	 print "       JanusAllow $2 " >> $5
	 print "       JanusSecurityLevel 100 " >> $5
	 print "       JanusTrustLevel $4 " >> $5
	 print "       JanusSessionTimeout 14400 " >> $5
	 print "       JanusActivityTimeout 1800 " >> $5
         print "</Location> " >> $5
         }

update()
        # $1=target
        # $2=source
        {
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
        elif [[ -w $1 ]] ; then
                cp -p $1 $1-pre_config
                cat $2 > $1
                rm $2
                print "$0: $1 backed up and updated"
        else
                print "$0: $1 needs replacing with $2"
        fi
        }


# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
instno=
jw_root=
apache22_root=
entitlement_id=
trust_level=0
ctxroot=

#
# get inst apache_install_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
jw_root=$apache22_root
apache22_root=$apache22_root
instno=$inst

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-web*)		website=$2 ;;
                -entitlemen*)   entitlement_id=$2 ;;
                -trust*)        trust_level=$2 ;;
                -ctx*)          ctxroot=$2 ;;
		  *)		usage ;;
	esac
	shift 2
done


#Checks to be done
if [[ "$website" = "" ]] ; then
	usage
fi

if [[ "$entitlement_id" = "" ]] ; then
       usage
fi

if [[ "$ctxroot" = "" ]] ; then
        usage
fi

# Validate if script is executed under root 
userid=`$whoami`
if [[ $userid = "root" ]] ; then
	print "$0: Cant use root to execute, su - fire a/c "
	exit 30
fi

#Important check: Janus version compatibility with Apache 2.2
if [[ `uname -s` = "AIX" ]] ; then

        LIBPATH="$apache22_root/lib:$LIBPATH"
        export LIBPATH
else
        LD_LIBRARY_PATH="$apache22_root/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH
fi

jw_bitver=`grep "Product Architecture:" $jw_root/janusweb/current/bin/janus-version.txt | cut -d':' -f2 | tr -d " " | cut -c 1-2`
apache_bitver=`$apache22_root/bin/./httpd -V | grep "Architecture:"  | cut -d':' -f2 | tr -d " " | cut -c 1-2`

if [[  $apache_bitver = "64" && $jw_bitver = "32" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
fi

if [[  $apache_bitver = "32" && $jw_bitver = "64" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
fi


if [[ `uname -s` = "SunOS" ]] ; then
 if [[  $apache_bitver = "64" && $jw_bitver = "64" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
  fi
fi

if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
        print "Website $website.conf does not exists "
        exit 45
fi

#Check if Janus is installed under the specified directory.
if [[ ! -r $jw_root/janusweb/current/bin/janusweb.sh ]] ; then
        print "$0: Janus Web Agent is'nt installed"
 exit 53
fi

if [[ $trust_level !=  0 && $trust_level != 1 && $trust_level != 2 ]] ; then
	print "Invalid trust level entered"
	exit 47
fi

#check if website is running
if [[ `$apache22_root/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
        print "$0: $website must be stopped before configuring Janus"
        exit 48
fi

#check Janus is running

if [[ `$ps | grep -v grep | grep $jw_root/janusweb/current` != "" ]] ; then
        print "$0: Janus web agent must be stopped"
        exit 50
fi

# Modify janus.conf  

mod_janus_conf $jw_root/janusweb/current/config/janus.conf $entitlement_id $ctxroot $trust_level $jw_root/janusweb/current/config/janus.conf-backup  2> /dev/null

update $jw_root/janusweb/current/config/janus.conf $jw_root/janusweb/current/config/janus.conf-backup

# Modify Apache website ws1.conf
mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup  2> /dev/null

update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup 

# Ok, give some worthwhile advice, if relevant.

print " "
print " New website/application configuration complete..."
print " Next Steps"
print " 1) Start Jauns web agent ./janusweb.sh start"
print " 2) Test Janus web agent ./janusweb.sh test"
print " 3) Validate Janus web agent ./janusweb.sh validate"
print " 4) Start apache server "$apache22_root"/apache22u/apache22.sh start "$website
print " 5) Test Application url "
print "    http://<hostname>:<port no>/<application context >"

exit 0
./admin/sigfile-reg-web.sh
========================================
#!/bin/ksh
#set -x
# Similar to sgtfile.sh but this is intent to run at after product installation 
# The client administrator can check the Signature link status, re-generate link, or remove during product decomm.
#
# Assumpsion:-
# Signaturefile should already been created in the engineering script area during installation.
#
# History
# AC May 2011, initial build

LinkDirBase="/var/jpmcappsig"
LinkDir="${LinkDirBase}/web_sigfile"
SIGFILE=""
PRODUCT_CODE=""

case `uname -s` in
  Linux)
         whoami=whoami
         unalias rm mv cp
         ;;
  SunOS)
         whoami=/usr/ucb/whoami
         ;;
  AIX)
         whoami=whoami
         ;;
  *)
         print "$0: unsupported platform"
         exit 1
         ;;
esac

if [[ `$whoami` != "root" ]] ; then
  print "$0: must be root to update links in Signaturefile registry"
  exit 33
fi

usage() {
        print "usage: $0 [flag] [Signaturefile]"
        print "flags: -s (Status of Signaturefile registration)"
        print "       -r (Register Signaturefile)"
        print "       -d (Delete Signaturefile registration)"
	exit 2
}

validate_sig_file() {
	# $1 absolute path of signaturefile
	#
	print -n "Validating Signaturefile [$1]... "
	# if [ `grep -c "^Web Products Signature File$" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Web Products Signature File\"" ; exit 1 ; fi
	if [ `grep -c "^Product:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product:\"" ; exit 1 ; fi
	if [ `grep -c "^Product Version:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Version:\"" ; exit 1 ; fi
	if [ `grep -c "^Product Architecture:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Architecture:\"" ; exit 1 ; fi
	if [ `grep -c "^Product Install Date:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Install Date:\"" ; exit 1 ; fi
#	if [ `grep -c "^JDK Version and Patch Level:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"JDK Version and Patch Level:\"" ; exit 1 ; fi
	if [ `grep -c "^Product Installation Path:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Installation Path:\"" ; exit 1 ; fi
	if [ `grep -c "^Product Owner:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Owner:\"" ; exit 1 ; fi
	if [ `grep -c "^Patch Level/Fix Pack Level:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Patch Level/Fix Pack Level:\"" ; exit 1 ; fi
	if [ `grep -c "^File Update Data Stamp:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"File Update Data Stamp:\"" ; exit 1 ; fi
        print "ok"
}

sig_status() {
	# $1 absolute path of signaturefile
	#
	print "Registration Status..."
	inode=`ls -i $1 | awk '{print $1}'`
	ls -Lai ${LinkDir}/* 2>/dev/null | grep "^[ ]*${inode} " 
	if [ $? -ne 0 ] ; then 
	  print "Not registered"
	  exit 1
	else
	  print "Registered"
	  exit 0
	fi
}

sig_register() {
	# $1 absolute path of signaturefile
	#
	print "Registering entry..."
	if [ "$PRODUCT_CODE" = "" ] ; then
	  PRODUCT_CODE=`grep "^Product:" $1 | awk -F: '{printf("%s\n",$2)}' |  sed 's/ //g'`
	  if [ "$PRODUCT_CODE" = "" ] ; then PRODUCT_CODE="UnknownProduct" ; fi
	fi
	PRODUCT_INST=`grep "^Product Installation Path:" $1 | awk -F/ '{printf("%s\n",$NF)}' |  sed 's/ //g'`
	if [ "$PRODUCT_INST" = "" ] ; then PRODUCT_INST="UnknownInstance" ; fi

	#Create Signature file symlink folder if not created. Set the right permission if not set properly
	if [ ! -d "${LinkDirBase}" ] ; then
	  mkdir -p ${LinkDirBase}
	  chmod 1777 ${LinkDirBase}/
	elif [ "`ls -ld ${LinkDirBase}/ | grep drwxrwxrwt`" = "" ] ; then
	  chmod 1777 ${LinkDirBase}/
	fi
	#Create symlink directory
	if [ ! -d "${LinkDir}" ] ; then
	  mkdir -p ${LinkDir}/
	  chmod 1777 ${LinkDir}/
	fi

	#Create Symlink
	((num=$RANDOM))
	dt=`date +%m-%d-%Y_%H:%M:%S`
	ln -s $1 ${LinkDir}/${PRODUCT_CODE}.${PRODUCT_INST}-$dt:$num
	if [ $? -ne 0 ] ; then
	  print "Failed creating symlink. Please investigate."
	  exit 1
	else
	  print "Registration success."
	  exit 0
	fi
}

sig_delete() {
	# $1 absolute path of signaturefile
	#
	print "Deleting Registration entry..."
	inode=`ls -i $1 | awk '{print $1}'`
	L=`ls -Lai ${LinkDir}/* 2>/dev/null | grep "^[ ]*${inode} " | awk '{print $2}' `
	if [ "${L}" = "" ] ; then 
	  print "Cannot delete as it is not registered"
	  exit 1
	else
	  EXITSTATUS=0
	  for i in ${L} ; do
	    if [ -f $i ] ; then
	      rm -f $i
	      if [ $? -ne 0 ] ; then
	        print "Failed deleting $i"
	        EXITSTATUS= 1
	      else
	        print "Deleted $i"
	      fi
	    fi
	  done
	fi
	if [ $EXITSTATUS -ne 0 ] ; then
	  print "Error in deleting. Please investigate."
	else
	  print "Delete success."
	fi
	exit $EXITSTATUS
}

# Parse arguments

if [ "$2" == "" ] ; then
  usage
elif [ ! -f "$2" ] ; then
  print "Invalid file"
  exit 1
fi

############ main program ##################

# get absolution path of sigfile
CURRENTPWD=$PWD
SIGFILEPATH=`dirname $2`
cd -P $SIGFILEPATH
SIGFILE=${PWD}/`basename $2`
cd $CURRENTPWD

validate_sig_file $SIGFILE

PRODUCT_CODE=`grep "^Product Code:" $SIGFILE | awk -F: '{printf("%s\n",$2)}' |  sed 's/ //g'`

if [ "${PRODUCT_CODE}" = "" ] ; then
  # Retro fit "Product Code:" in SignatureFile if its not already there
  # Product code is extracted from first part of the symlink filename
  # But need to tackle multiple links like below and you want the most recent one
  # ls -lt | grep " /local/WebSphere7/AppServer/7/w7u/SignatureFile"
  # lrwxrwxrwx   1 root other  47 Apr 21 21:15 Websphere7ND.7-04-21-2011_21:15:21:9270 -> /local/WebSphere7/AppServer/7/w7u/SignatureFile
  # lrwxrwxrwx   1 root other  47 Apr 18 15:02 Websphere7ND.7-04-18-2011_15:02:15:10689 -> /local/WebSphere7/AppServer/7/w7u/SignatureFile
  # lrwxrwxrwx   1 root other  47 Apr 18 14:21 Websphere7Base.7-04-18-2011_14:21:07:21612 -> /local/WebSphere7/AppServer/7/w7u/SignatureFile
  # lrwxrwxrwx   1 root other  47 Apr 15 17:54 Websphere7ND.7-04-15-2011_17:54:40:26610 -> /local/WebSphere7/AppServer/7/w7u/SignatureFile
  # note. if the link file is Apache2.2.9-05-12-2011_06:52:25:30587 we want to extract "Apache2.2"
  PRODUCT_CODE=`ls -lti $LinkDir | grep "$SIGFILE$" | head -1 | awk '{printf("%s\n",$(NF-2))}' | sed 's/\(.*\)\.\(.*\)/\1/`
  echo "Product Code: ${PRODUCT_CODE}" >> $SIGFILE
fi

case $1 in
	-s)	sig_status $SIGFILE ;;
	-r)	sig_register $SIGFILE ;;
	-d)	sig_delete $SIGFILE ;;
	*)	usage ;;
esac

exit 0
./admin/configurejanus.sh
========================================
#!/bin/ksh
#set -x
# configurejanus.sh - Configures Janus Web agent  and Apache 2.2
# The scripts helps the user to configure janus.conf and janus.properties files. 
# substitution of values from janustemplate.properties to 
# janus.conf and janus.properties files are done by this script
# MA, 13 Apr 2009,Initial version of Janus.
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
#

# Platform specific things

case `uname -s` in
        Linux)
                ps='ps auxwww'
                whoami=whoami
		unalias rm mv cp
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        print "                               (default: none, must be specified)"
        print "       -janustemplt path        Janus Template Path "
        print "                               (default: none, must be specified)"
        print "       -ctxroot str             Application context root"
        print "                               (default: none, must be specified)" 
        exit 2
        }

#Modify Apache website 
mod_conf()
        # $1=httpdConf
        # $2=httpdConf-Backup
        {
        cat $1 | \
        sed \
                -e "/janus.conf/d" \
                > $2
              print "Include $jw_root/janusweb/current/config/janus.conf" >> $2
        }
#Function to modify janus.conf
mod_janus_conf()
        # $1=janusConf
        # $2=principalid
        # $3=appltid
        # $4=entlid
        # $5=ctxroot
        # $6=janusConf-Backup
        # $7=JanusTrustLevel
        {
        cat $1 | \
         sed \
             -e "s/"@SYSTEM_PRINCIPAL@"/$2/" \
             -e "s/"@APPLICATION_ID@"/$3/" \
            > $6
         print "<Location "$5"> " >> $6
         print "       require valid-user" >> $6
	 print "       AuthType Janus" >> $6
 	 print "       JanusAuthoritative On" >> $6
	 print "       JanusAllow $4 " >> $6
	 print "       JanusSecurityLevel 100 " >> $6
	 print "       JanusTrustLevel $7 " >> $6
	 print "       JanusSessionTimeout 14400 " >> $6
	 print "       JanusActivityTimeout 1800 " >> $6
         print "</Location> " >> $6
         }

update()
        # $1=target
        # $2=source
        {
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
        elif [[ -w $1 ]] ; then
                cp -p $1 $1-pre_config
                cat $2 > $1
                rm $2
                print "$0: $1 backed up and updated"
        else
                print "$0: $1 needs replacing with $2"
        fi
        }


# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
instno=
jw_root=
apache22_root_dir=
janustempltpath=
ctxroot=

#
# get inst apache_install_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
jw_root=$apache22_root
# apache22_root=$apache22_root
apache22_root_dir=$apache22_root
instno=$inst

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-web*)		website=$2 ;;
                -janu*)         janustempltpath=$2 ;;
                -ctxroot*)      ctxroot=$2 ;;
		  *)		usage ;;
	esac
	shift 2
done


#Checks to be done
if [[ "$website" = "" ]] ; then
	usage
fi

if [[ "$instno" = "" ]] ; then
     usage
fi

if [[ "$apache22_root_dir" = "" && $inst != "web" ]] ; then
       apache22_root_dir=/local/apache22/$instno
else
       apache22_root_dir=/local/web/apache22
fi

if [[ "$janustempltpath" = "" ]] ; then
	usage
fi

if [[ "$ctxroot" = "" ]] ; then
        usage
fi

# Validate if script is executed under root 
userid=`$whoami`
if [[ $userid = "root" ]] ; then
	print "$0: Cant use root to execute, su - fire a/c "
	exit 30
fi

if [[ ! -d $apache22_root_dir ]] ; then
     print "Apache not installed under" $apache22_root_dir
     exit 44
fi

if [[ ! -d $jw_root/janusweb/current ]] ; then
     print "Janus not installed under" $jw_root/janusweb
     exit 45
fi

#Important check: Janus version compatibility with Apache 2.2
if [[ `uname -s` = "AIX" ]] ; then

        LIBPATH="$apache22_root_dir/lib:$LIBPATH"
        export LIBPATH
else
        LD_LIBRARY_PATH="$apache22_root_dir/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH
fi

jw_bitver=`grep "Product Architecture:" $jw_root/janusweb/current/bin/janus-version.txt | cut -d':' -f2 | tr -d " " | cut -c 1-2`
apache_bitver=`$apache22_root_dir/bin/./httpd -V | grep "Architecture:"  | cut -d':' -f2 | tr -d " " | cut -c 1-2`


if [[  $apache_bitver = "64" && $jw_bitver = "32" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
fi

if [[  $apache_bitver = "32" && $jw_bitver = "64" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
fi

if [[ `uname -s` = "SunOS" ]] ; then 
 if [[  $apache_bitver = "64" && $jw_bitver = "64" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
  fi
fi


if [[ ! -f $apache22_root_dir/conf/$website.conf ]] ; then
        print "Website $website.conf does not exists "
        exit 45
fi


#check if website is running
if [[ `$apache22_root_dir/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
        print "$0: $website must be stopped before configuring Janus"
        exit 48
fi

#check Janus is running
#if [[ `$ps | grep -v grep | grep $jw_root/janusweb/current/bin/janusweb.sh` != "" ]] ; then
if [[ `$ps | grep -v grep | grep $jw_root/janusweb/current` != "" ]] ; then
        print "$0: Janus web agent must be stopped" 
        exit 50
fi

#check if janustemplate.properties exists
if [[ ! -r $janustempltpath ]] ; then
       print "$0: Janus template$janustemplt does not exist."
 exit 53
fi


#Check if Janus is installed under the specified directory. 
if [[ ! -r $jw_root/janusweb/current/bin/janusweb.sh ]] ; then
	print "$0: Janus Web Agent is'nt installed"
 exit 53
fi


#If configure script is rum multiple times, take a backup of 
#janus.conf and janus.properties and rename it to 
#janus.conf-GTI janus.properties-GTI and copy janus.properties-sample and janus.conf-sample
#to janus.conf and janus.properties

if [[ -e $jw_root/janusweb/current/config/janus.properties-pre_config && -e $jw_root/janusweb/current/config/janus.conf-pre_config ]] ; then 
	mv $jw_root/janusweb/current/config/janus.properties $jw_root/janusweb/current/config/janus.properties-GTI
	mv $jw_root/janusweb/current/config/janus.conf  $jw_root/janusweb/current/config/janus.conf-GTI

	cp -p $jw_root/janusweb/current/config/janus.conf-sample $jw_root/janusweb/current/config/janus.conf
 	cp -p $jw_root/janusweb/current/config/janus.properties-sample $jw_root/janusweb/current/config/janus.properties
fi

#Make a backup of the janus.properties file before sed starts
cp -p $jw_root/janusweb/current/config/janus.properties $jw_root/janusweb/current/config/janus.properties-backup 2> /dev/null

#Generate a random number for MemorySegmentKey
((num=$RANDOM*200))
get6digts=`echo $num | cut -b 1-6`

## Initialize the Janus Template file
#. ${janustempltpath}

## Removing all the default paramater values.
sed \
 -e "s/"pajpm1@COOKIE_SUFFIX@"//g" \
 -e "s/"pajpm2@COOKIE_SUFFIX@"//g" \
 -e "s/"pajpm3@COOKIE_SUFFIX@"//g" \
 -e "s/"pajpm6@COOKIE_SUFFIX@"//g" \
 -e "s/"@SYSTEM_PRINCIPAL@"//g" \
 -e "s/"@LOGIN_SERVER_ADDRESS@"/loginserver/g" \
 -e "s/"@LICENSE_KEY@"//g" \
 -e "s/prProxyCnt=4/prProxyCnt=/g" \
 -e "s/"@PROXY1_ADDRESS@"//g" \
 -e "s/"@PROXY2_ADDRESS@"//g" \
 -e "s/"@PROXY3_ADDRESS@"//g" \
 -e "s/"@PROXY4_ADDRESS@"//g" \
 -e "s/"@ENTITLEMENTS@"//g" \
 -e "s/"@AUDIT_EMAIL@"//g" \
 -e "s/"@AUDIT_SMTP_HOST@"//g" \
 -e "s/"@AUDIT_SMTP_PORT@"//g" \
 -e "s/"@VALIDATE_EMAIL@"//g" \
 -e "s/"@VALIDATE_SMTP_HOST@"//g" \
 -e "s/"@VALIDATE_SMTP_PORT@"//g" \
 -e "s/"@CONTACT@"//g" \
 -e "s/janus.trustLevel=0/janus.trustLevel=/g" \
 -e "s/MemorySegmentKey=43981/MemorySegmentKey=$get6digts/g" \
    $jw_root/janusweb/current/config/janus.properties-backup > $jw_root/janusweb/current/config/janus.properties 2> /dev/null

    rm $jw_root/janusweb/current/config/janus.properties-backup

#Make a backup of the janus.properties file before sed starts
cp -p $jw_root/janusweb/current/config/janus.properties $jw_root/janusweb/current/config/janus.properties-pre_config 2> /dev/null

for line in `cat $janustempltpath`
do
         valbrfeq=`echo $line | cut -f1 -d '='` 
         valafteq=`echo $line | cut -f2 -d '='` 
 
 cp -p $jw_root/janusweb/current/config/janus.properties $jw_root/janusweb/current/config/janus.properties-pre_config 2> /dev/null
 if [[ $valbrfeq = "loginServer" ]] ; then
        sed -e "s/"loginserver"/"$valafteq"/" $jw_root/janusweb/current/config/janus.properties-pre_config > $jw_root/janusweb/current/config/janus.properties 2> /dev/null
 elif [[ $valbrfeq = "LogDir" ]] ; then
       LogDirValue=$(grep LogDir $jw_root/janusweb/current/config/janus.properties-pre_config | cut -d'=' -f2) 
       sed -e "s?$LogDirValue?$jw_root/janusweb/current/var/log?g" $jw_root/janusweb/current/config/janus.properties-pre_config > $jw_root/janusweb/current/config/janus.properties 2> /dev/null
 elif [[ $valbrfeq = "httpd.conf" ]] ; then
        sed "s?@HTTPD_CONF@?$apache22_root_dir/conf/$website.conf?g" $jw_root/janusweb/current/config/janus.properties-pre_config > $jw_root/janusweb/current/config/janus.properties 2> /dev/null
 else
        sed -e "s/"$valbrfeq="/"$valbrfeq"="$valafteq"/" $jw_root/janusweb/current/config/janus.properties-pre_config > $jw_root/janusweb/current/config/janus.properties 2> /dev/null
 fi

     #Gather values for janus.conf 
     if [[ $valbrfeq = "principalId" ]] ; then
           principalid=$valafteq;
     elif [[  $valbrfeq = "applicationId" ]] ;then
           appltid=$valafteq;
     elif [[ $valbrfeq = "entitlementList" ]] ; then
           entlid=$valafteq;
     elif [[ $valbrfeq = "JanusTrustLevel" ]] ; then
           janustrustlevel=$valafteq
     fi
done

#Remove all space from janus.properties file

sed -e 's/ *,/,/g' -e 's/, */,/g' -e 's/^ *//' -e 's/ *$//' $jw_root/janusweb/current/config/janus.properties-pre_config > $jw_root/janusweb/current/config/janus.properties 2> /dev/null

#Remove janus.properties-pre_config no longer needed
rm $jw_root/janusweb/current/config/janus.properties-pre_config

# Modify janus.conf  
cp -p $jw_root/janusweb/current/config/janus.conf $jw_root/janusweb/current/config/janus.conf-backup

# Update Janus Path in Default Janus.conf file

mod_janus_conf $jw_root/janusweb/current/config/janus.conf $principalid $appltid $entlid $ctxroot $jw_root/janusweb/current/config/janus.conf-backup $janustrustlevel > /dev/null 2>&1

update $jw_root/janusweb/current/config/janus.conf $jw_root/janusweb/current/config/janus.conf-backup > /dev/null 2>&1

# Modify Apache website ws1.conf
mod_conf $apache22_root_dir/conf/$website.conf $apache22_root_dir/conf/$website.conf-backup > /dev/null 2>&1

update $apache22_root_dir/conf/$website.conf $apache22_root_dir/conf/$website.conf-backup > /dev/null 2>&1

# Ok, give some worthwhile advice, if relevant.

print " " 
print " Janus configuration complete..."
print " Next Steps" 
print " 1) Start Jauns web agent ./janusweb.sh start"
print " 2) Test Janus web agent ./janusweb.sh test"
print " 3) Validate Janus web agent ./janusweb.sh validate"
print " 4) Start apache server "$apache22_root_dir"/admin/apache22.sh start "$website
print " 5) Test Application url "
print "    http://<hostname>:<Port No>/<application context>"

exit 0
./admin/configuresiteminder.sh
========================================
#!/bin/ksh
#set -x
# configuresiteminder.sh - Configures Siteminder Web agent and Apache 2.2
#
# This script performs the functions like registering details with the policy server and 
# configures Apache website (ws1.conf) details. In addition to this the script has the capability 
# of configuring multiple websites to a single instance of siteminder installed.  

# Inherited from First version of Siteminder
# RR, 07 Aug 2009, Modified to take care in Apache 2.2 
# AC, 18 May 2011, Modified for E-1.2.0 build.  Package installation is now within Apache build under Standard Build Architect
# AC, 15 Oct 2013, Changed usage options abbreviation
# AC, 15 Oct 2013, Added option -ac for specifying AgentConfigObject rather then fix to hostname.
# AC, 15 Oct 2013, Added option -register rereg to allow reregistration


# Platform specific things

case `uname -s` in
  Linux)
         whoami=whoami
         unalias rm mv cp
         ;;
  SunOS)
         whoami=/usr/ucb/whoami
         ;;
  AIX)
         whoami=whoami
         ;;
  *)
         print "$0: unsupported platform"
         exit 1
         ;;
esac

SCRIPTDIR=`dirname $0`
cd $SCRIPTDIR

# Display usage, and quit
usage() {
	print "usage: $0 {flags}"
	print "flags: -website website         Website name"
	print "                                default: none, must be specified)"
	print "       -adminid id              Siteminder admin user"
	print "                                (default: none,must be specified)"
	print "       -adminpw password        Siteminder admin password)"
	print "                                (default: false)"
	print "       -plysrv ip_or_dns        Policy Server DNS"
	print "                                (default: none,must be specified)"
	print "       -hn hostname             Host name of the server"
	print "                                (default:hostname)"
	print "       -hco hostconfigobject    Host Configuration Object"
	print "                                (default: none, must be specified)"
	print "       -aco agentconfigobject   Agent Configuration Object"
	print "                                (default: none, must be specified)"
	print "       -register status         Siteminder registration status."
        print "                                no = not yet registered, yes = already registered, rereg = overwrite existing registration"
	print "                                For rereg, make sure existing <apache_installation>/webagent/config/SmHost.conf is removed"
	print "                                (default: no)"
	exit 2
}

gen_conf() {
	# $1=httpdConf
	cat $1 | \
	sed \
	  -e "/sm_module/d" \
	  -e "/SmInitFile/d" \
	  > $2
	print "LoadModule sm_module $stmw_root/webagent/bin/libmod_sm22.so" >> $2
	print "SmInitFile $apache22_root/conf/WebAgent_$website.conf" >> $2
}

mod_envvars() {
	# $1=envvars
	if [[ `uname -s` = "AIX" ]] ; then
	cat $1 | \
	  sed 's/export LIBPATH/#export LIBPATH/' > $2
	    print "### SiteMinder PATH #####" >> $2
	    print "NETE_WA_ROOT=$stmw_root/webagent" >> $2
	    print "export NETE_WA_ROOT" >> $2
	    print "LIBPATH=\${NETE_WA_ROOT}/bin:\${NETE_WA_ROOT}/lib:\${LIBPATH}" >> $2
	    print "export LIBPATH" >> $2
	    print "PATH=\${NETE_WA_ROOT}/bin:\${PATH}" >> $2
	    print "export PATH" >> $2
	    print " " >> $2
	    print "EXTSHM=ON ; export EXTSHM" >> $2
	else
	  cat $1 | \
	  sed 's/export LD_LIBRARY_PATH/#export LD_LIBRARY_PATH/' > $2
	    print "### SiteMinder PATH #####" >> $2
	    print "NETE_WA_ROOT=$stmw_root/webagent" >> $2
	    print "export NETE_WA_ROOT" >> $2
	    print "LD_LIBRARY_PATH=\${NETE_WA_ROOT}/bin:\${NETE_WA_ROOT}/lib:\${LD_LIBRARY_PATH}" >> $2
	    print "export LD_LIBRARY_PATH" >> $2
	    print "PATH=\${NETE_WA_ROOT}/bin:\${PATH}" >> $2
	    print "export PATH" >> $2
	fi
}

update() {
	# $1=target
	# $2=source
	cmp $1 $2 > /dev/null 2> /dev/null
	if [[ $? -eq 0 ]] ; then
	  print "$0: $1 is already correct"
	  rm $2
	elif [[ -w $1 ]] ; then
	  cp -p $1 $1-pre_config
	  cat $2 > $1
	  rm $2
	  print "$0: $1 backed up and updated"
	else
	  print "$0: $1 needs replacing with $2"
	fi
}


determine_fq_host_name() {
	case `uname -s` in
	  Linux)  nslookup=/usr/bin/nslookup ;;
	  SunOS)  nslookup=/usr/sbin/nslookup ;;
	  AIX)    nslookup=/usr/bin/nslookup ;;
	esac
	hostname | grep '\.' > /dev/null
	if [ $? -eq 0 ] ; then
	  fq_host_name=`hostname`
	else
	  hostname=`hostname`
	  $nslookup $hostname 2> /dev/null | grep Name: > /dev/null
	  test $? -ne 0 && ( print "$0: $nslookup $host throws errors" ; exit 5 )
	  fq_host_name=`$nslookup $hostname 2> /dev/null | grep Name: | awk '{print $2}'`
	fi
}

determine_fq_host_name

# Vars
hostname=`hostname|cut -d. -f1`

# Defaults
# --------
website=
instno=$instno
stmw_root=
apache22_root=
adminid=
adminpw=
plysrv=
hostnamestr=$fq_host_name
hostconfigobject=
agentconfigobject=
register=no
rereg=

#
# get inst apache_install_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file" 
  exit 1
fi

# use old var for test run without making much change
stmw_root=$apache22_root
apache22_root=$apache22_root
instno=$inst

if [[ -f ${apc_enggutils_dir}/admin/siteminder-version.txt ]] ; then
  VERSIONTXT="${apc_enggutils_dir}/admin/siteminder-version.txt"
else
  print "Problem with the siteminder installation.  Please investigate" 
  exit 1
fi

# Parse arguments

while [[ "$1" != "" ]] ; do
  case $1 in
    -website)          website=$2 ;;
    -register)         register=$2 ;;
    -adminid)          adminid=$2 ;;
    -adminpw )         adminpw=$2 ;;
    -plysrv)           plysrv=$2 ;;
    -hn)               hostnamestr=$2 ;;
    -hco)              hostconfigobject=$2 ;;
    -aco)              agentconfigobject=$2 ;;
    *)		       usage ;;
  esac
  shift 2
done

#Checks to be done
if [[ "$website" = "" ]] ; then
  usage
fi

if [[ "$stmw_root" = "" ]] ; then
  print "Missing data in Apache configuration file" 
  exit 1
fi

if [[ "$instno" = "" ]] ; then
  print "Missing data in Apache configuration file" 
  exit 1
fi

if [[ "$apache22_root" = "" ]] ; then
  print "Missing data in Apache configuration file" 
  exit 1
fi

if [[ "$register" = "no" ]] || [[ "$register" = "rereg" ]] ; then
  if [[ "$adminid" = "" ]] ; then usage ; fi
  if [[ "$adminpw" = "" ]] ; then usage ; fi
  if [[ "$plysrv" = "" ]] ; then usage ; fi
  if [[ "$hostconfigobject" = "" ]] ; then usage ; fi
  if [[ "$agentconfigobject" = "" ]] ; then usage ; fi
fi  

if [[ "$register" = "rereg" ]] ; then
  rereg="-o"
fi

# Check required userids and groups exists

userid=`$whoami`
if [[ "$userid" = "root" ]] ; then
  print "$0: Cant use root to execute, su - fire a/c "
  exit 30
fi

#Check if installs exists
if [[ ! -r $stmw_root/webagent/bin/libmod_sm22.so ]] ; then
  print "$0: libmod_sm22.so missing, investigate why"
  exit 53
fi

if [[ ! -d $apache22_root ]] ; then
  print "Apache 2.2 not installed under" $apache22_root
  exit 44
fi

if [[ ! -r $VERSIONTXT ]] ; then
  print "Cannot determine Siteminder version"
  exit 45
fi

#Important check: Siteminder version compatibility with Apache 2.2
if [[ `uname -s` = "AIX" ]] ; then
  LIBPATH="$apache22_root/lib:$stmw_root/webagent/lib:$LIBPATH"
  export LIBPATH
else
  LD_LIBRARY_PATH="$apache22_root/lib:$stmw_root/webagent/lib:$LD_LIBRARY_PATH"
  export LD_LIBRARY_PATH
fi

stm_bitver=`grep -i "Product Architecture:" $VERSIONTXT | cut -d':' -f2 | tr -d " " | cut -c 1-2`
apache_bitver=`$apache22_root/bin/./httpd -V | grep -i "Architecture:"  | cut -d':' -f2 | tr -d " " | cut -c 1-2`

if [[ $stm_bitver != $apache_bitver ]] ; then
  print "Siteminder" $stm_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
  exit 78
fi

if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
  print "Website $website.conf does not exist" 
  exit 45
fi

#check if website is running
if [[ -x ${apc_enggutils_dir}/admin/apache22.sh ]] ; then
  if [[ `${apc_enggutils_dir}/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
    print "$0: $website must be stopped before configuring Siteminder"
    exit 48
  fi
else
   print "$0: Cannot determine running status of $website"
   exit 48
fi

### Create SmHost.conf. Via policy server registeration process.
### skip if registered or SmHost.conf already exists.
### Break out script if registration failed.

if [[ "$register" = "no" ]] || [[ "$register" = "rereg" ]] ; then
  if [[ ! -f $stmw_root/webagent/config/SmHost.conf ]] ; then
    if [[ `uname -s` = "AIX" ]] ; then
      LIBPATH=${LIBPATH}:$stmw_root/webagent/lib:$stmw_root/webagent/bin
      export LIBPATH
    else
      LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$stmw_root/webagent/lib:$stmw_root/webagent/bin
      export LD_LIBRARY_PATH
    fi
    cd $stmw_root/webagent/bin/
    ./smreghost -i $plysrv -u $adminid -p $adminpw -hc $hostconfigobject -hn $hostnamestr $rereg -f $stmw_root/webagent/config/SmHost.conf
    exit_status=$?
    if [ $exit_status -ne 0 ] ; then
      print "Registration failed, please check " $1
      exit $exit_status
    fi
  else
    print "Warning:"
    print "Running this scipt with -register [ no | rereg ] will create $stmw_root/webagent/config/SmHost.conf."
    print "As SmHost.conf is already exist; either run with -register yes"
    print "or delete SmHost.conf before running this script with -register [ no | rereg ] again."
    print ""
    print "This script has aborted with no change applied."
    exit 1
  fi
fi

###Create WebAgent.conf file this would be create for every website 

print "
# Web agent conf file
AgentConfigObject=\"$agentconfigobject\"
HostConfigFile=\"$stmw_root/webagent/config/SmHost.conf\"
EnableWebAgent=\"YES\"
LoadPlugin=\"$stmw_root/webagent/bin/libHttpPlugin.so\"
ServerPath=\"$apache22_root/conf/$website\"" > $apache22_root/conf/WebAgent_$website.conf

# Store the semaphore info in this directory
mkdir -p $apache22_root/conf/$website

#Modify evvars file,this done only once.In case the script is run a second time to configure another website skip modifying it again

findString=`grep -c "### SiteMinder PATH #####" $apache22_root/bin/envvars`

if [[ "$findString" != 1 ]] ; then 
  mod_envvars $apache22_root/bin/envvars $apache22_root/bin/envvars-backup 
  update $apache22_root/bin/envvars $apache22_root/bin/envvars-backup 2> /dev/null
fi

#Modify Apache ws<inst no>.conf 

gen_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup

update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup 2> /dev/null


# Ok, give some worthwhile advice, if relevant.
print ""
print " Siteminder webagent configured for $website.conf..."
print " Next Steps" 
print " 1) Start Apache server "$apc_enggutils_dir"/admin/apache22.sh start "$website 
print " 2) Test Application url" 
print "    http://<hostname>:<Port No>/<application name>"

exit 0
./admin/maketemplates.sh
========================================
#!/bin/ksh
# maketemplates.sh - make templates
#
# Make httpd.conf-template file.
# Work from the default files that got installed in the product.
# We seperate out this code into a seperate script as we may wish to redo
# it after patching the product, or upgrading our scripts.
#
# Compared to earlier UNIX builds
#   we don't enable the Indexing or FollowSymlinks options
#   we restrict ServerTokens (as per security standard)
#   we don't disable the language negotiation
#   some directives moved to the end of the file (for now, its easier)
#   always load the mod_ssl.so library (its always there)
#   leave ScoreBoard file commented out
#
# SM, 29 Sept 2006, initial version from apache 2 by AK
# IS, 28 Mar 2007, comment out Alias for /icons/ 
# IS, 12 Apr 2007, RewriteRules are not inheritted by VirtualHosts.
#                  They must be placed directly within the VirtualHost directive
# RR, 29 Jan 2008, Changed to new Cipher suite string. 
# RR, 22 Oct 2014, Remove SSLv3 

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number       installation instance number"
	print "                          (default: none, must be specified)"
	print "       -apache22_root dir  Apache installation directory"
	print "                          (default: /local/apache22/<inst>)"
        print "       -apc_enggutils_dir Apache engineering installation directory"
        print "                          (default: /local/apache22/eu-apache22u/<inst>)"
	}

#scriptDir=`dirname $0`
#if [[ "$scriptDir" = "." ]] ;then
#      scriptDir=$PWD
#fi

#   baseDir="${scriptDir}/.."
#   export baseDir

#Config file for Standard build architecture

#if [[ $7 = "true" ]] ; then
#. $8/installapache22.conf
#else
#. ${baseDir}/conf/installapache22.conf
#fi

# Defaults

inst=web
#apache22_root=
#apc_enggutils_dir=

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-i*)		inst=$2 ;;
		-apache22*)	apache22_root=$2 ;;
                -apc_engg*)     apc_enggutils_dir=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$inst" = "" ]] ; then
	usage
fi

if [[ "$apache22_root" = "" && $inst != "web" ]] ; then
	apache22_root=/local/apache22/$inst
elif [[ "$apache22_root" = "" && $inst = "web" ]] ; then
	apache22_root=/local/web/apache22
fi

if [[ "$apc_enggutils_dir" = "" && $inst != "web" ]] ; then
        apc_enggutils_dir=/local/apache22/eu-apache22u/$inst
elif [[ "$apc_enggutils_dir" = "" && $inst = "web" ]] ; then
        apc_enggutils_dir=/local/web/apache22/eu-apache22u
fi


# Check

if [[ ! -r $apache22_root/bin/apachectl ]] ; then
	print "$0: doesn't appear to be Apache in $apache22_root"
	exit 10
fi

# Create web site templates, working from default file that got installed

cat $apc_enggutils_dir/admin/httpd.conf-original | \
sed \
        -e 's?^\(ErrorLog\) .*?#ROTATELOG_F#\1 #LOGROOT#/#WEBSITE#.error_log\
#ROTATELOG_T#\1 \"| #APACHE22_ROOT#/admin/rotatelogs.sh #LOGROOT#/#WEBSITE#.error_log.%Y-%m%d #ROTATELOGTIME#\"?' \
        -e 's?^ *\(CustomLog\) \"logs/\([^ ]*\)\" \(.*\)?    #ROTATELOG_F#\1 \"#LOGROOT#/#WEBSITE#.\2\" \3\
    #ROTATELOG_T#\1 \"| #APACHE22_ROOT#/admin/rotatelogs.sh #LOGROOT#/#WEBSITE#.\2.%Y-%m%d #ROTATELOGTIME#\" \3?' | \
sed \
        -e "s?^#\(ServerName\) .*?\1 #SERVERNAME#?" \
        -e "s?^\(Listen\) .*?\1 #LISTEN#?" \
        -e "s?^\(User\) .*?\1 #USERID#?" \
        -e "s?^\(Group\) .*?\1 #GROUP#?" \
        -e "s?^\(DocumentRoot\) .*?\1 \"#DOCROOT#\"?" \
        -e "s?^\(<Directory\) \"$apache22_root/htdocs\">?\1 \"#DOCROOT#\">?" \
        -e "s?^\( *Options\) .*\$?\1 None?" \
        -e "s?$apache22_root/cgi-bin?#APACHE22_SITE_PREFIX#cgi?" \
        -e "s?^\(#Scriptsock\) .*?\1 #LOGROOT#/#WEBSITE#.cgisock?" \
        -e "s?^\(LoadModule authn_file_module .*\)?#\1?" \
        -e "s?^\(LoadModule auth_basic_module .*\)?#\1?" \
        -e "s?^\(LoadModule deflate_module .*\)?#\1?" \
        -e "s?^\(LoadModule autoindex_module .*\)?#index#\1?" \
        -e "s?^\(LoadModule info_module .*\)?#\1?" \
        -e "s?^\(LoadModule userdir_module .*\)?#\1?" \
        -e "s?^#\(LoadModule rewrite_module .*\)?\1?" \
        -e "s?^\(UserDir .*\)?#\1?" \
        -e "s?$apache22_root?#APACHE22_ROOT#?" \
        -e "s?^\(ServerAdmin\) .*?\1 webmaster@jpmchase.com?" \
        -e "s?cgi-bin?cgi?" \
        -e "s?^\(Alias /icons.*\)?#\1?" \
        > $apc_enggutils_dir/admin/httpd.conf-template

print "

#Explicitly set the ServerTokens to Prod. The default value If  not set is Full

ServerTokens Prod

#Since more than one httpd daemons can share the same server root, It is required
#to explicitly set PidFile and Lockfile with independent names corresponding to their website name.


PidFile #APACHE22_SITE_PREFIX#logs/#WEBSITE#.pid

LockFile #APACHE22_SITE_PREFIX#logs/accept.#WEBSITE#.lock


# Specify a default charset for all pages sent out. This is
# always a good idea and opens the door for future internationalisation
# of your web site, should you ever want it. Specifying it as
# a default does little harm; as the standard dictates that a page
# is in iso-8859-1 (latin1) unless specified otherwise i.e. you
# are merely stating the obvious. There are also some security
# reasons in browsers, related to javascript and URL parsing
# which encourage you to always set a default char set.

AddDefaultCharset ISO-8859-1

# If using Perl, load its module

LoadModule perl_module modules/mod_perl.so

# If using PHP, load its module and configure its type

LoadModule php5_module modules/libphp5.so
AddType application/x-httpd-php .php .phtml .php~ .phtml~

# JPMC security standard requires to disable the HTTP TRACE support 
# by default due to this vulnerability. 

RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^(PROPFIND|PROPPATCH|MKCOL|PUT|DELETE|LOCK|UNLOCK|COPY|MOVE|PATCH|CONNECT|LINK|UNLINK|SEARCH|TRACE|TRACK|OPTIONS)
RewriteRule .* - [F]

# SSL configuration

#vsslv#<IfModule mod_ssl.c>
#vsslv#<IfDefine SSL>
#vsslv#Listen #SSLLISTEN#
#vsslv#<VirtualHost #SERVERNAME#:#SSLPORT#>
#vsslv#     ServerName #SERVERNAME#
#vsslv#     SSLEngine on
#vsslv#     SSLOptions +StrictRequire
#vsslv#     SSLProtocol -all +TLSv1
#vsslv#     SSLHonorCipherOrder On
#vsslv#     SSLCipherSuite HIGH:!ADH:!MD5:!DES-CBC3-SHA:!3DES@STRENGTH 
#vsslv#     SSLCertificateFile "#APACHE22_SITE_PREFIX#conf/#SSLCERT#.cer"
#vsslv#     SSLCertificateKeyFile "#APACHE22_SITE_PREFIX#conf/#SSLCERT#.pem"
#vsslv#     LogLevel error
#vsslv#     #ROTATELOG_F#ErrorLog #LOGROOT#/#WEBSITE#.error_log_v
#vsslv#     #ROTATELOG_T#ErrorLog \"| #APACHE22_ROOT#/admin/rotatelogs.sh #LOGROOT#/#WEBSITE#.error_log_v.%Y-%m%d #ROTATELOGTIME#\"
#vsslv#     #ROTATELOG_F#CustomLog #LOGROOT#/#WEBSITE#.access_log_v common
#vsslv#     #ROTATELOG_T#CustomLog \"| #APACHE22_ROOT#/admin/rotatelogs.sh #LOGROOT#/#WEBSITE#.access_log_v.%Y-%m%d #ROTATELOGTIME#\" common
#vsslv#     DocumentRoot #DOCROOT#
#vsslv#
#vsslv#     # JPMC security standard requires to disable HTTP TRACE support
#vsslv#     # by default due to this vulnerability
#vsslv#
#vsslv#     RewriteEngine On
#vsslv#     RewriteCond %{REQUEST_METHOD} ^(PROPFIND|PROPPATCH|MKCOL|PUT|DELETE|LOCK|UNLOCK|COPY|MOVE|PATCH|CONNECT|LINK|UNLINK|SEARCH|TRACE|TRACK|OPTIONS) 
#vsslv#     RewriteRule .* - [F]
#vsslv#</VirtualHost>
#vsslv#</IfDefine>
#vsslv#</IfModule>

#vv#<VirtualHost *>
#vv#    DocumentRoot #DOCROOT#
#vv#    #ROTATELOG_F#ErrorLog #LOGROOT#/#WEBSITE#.error_log_v
#vv#    #ROTATELOG_T#ErrorLog \"| #APACHE22_ROOT#/admin/rotatelogs.sh #LOGROOT#/#WEBSITE#.error_log_v.%Y-%m%d #ROTATELOGTIME#\"
#vv#    #ROTATELOG_F#CustomLog #LOGROOT#/#WEBSITE#.access_log_v common
#vv#    #ROTATELOG_T#CustomLog \"| #APACHE22_ROOT#/admin/rotatelogs.sh #LOGROOT#/#WEBSITE#.access_log_v.%Y-%m%d #ROTATELOGTIME#\" common
#vv#
#vv#    # JPMC security standard requires to disable HTTP TRACE support
#vv#    # by default due to this vulnerability
#vv#
#vv#    RewriteEngine On
#vv#    RewriteCond %{REQUEST_METHOD} ^(PROPFIND|PROPPATCH|MKCOL|PUT|DELETE|LOCK|UNLOCK|COPY|MOVE|PATCH|CONNECT|LINK|UNLINK|SEARCH|TRACE|TRACK|OPTIONS) 
#vv#    RewriteRule .* - [F]
#vv#</VirtualHost>

# apache22.sh script looks for the following special comments.
# They control whether to
#   start/stop the site if no website names are specified
#   run the parent as root, regardless of port
#
# autostart=#AUTOSTART#
# rootparent=#ROOTPARENT#
# mpm=#MPM#
" >> $apc_enggutils_dir/admin/httpd.conf-template

exit 0
./admin/unconfiguresiteminder.sh
========================================
#!/bin/ksh
# unconfiguresiteminder.sh - remove siteminder plugin from website config file

# AC, 21 Jun 2011, initial version

# Platform specific things

case `uname -s` in
  Linux)
    whoami=whoami
    unalias rm mv cp
    ;;
  SunOS)
    whoami=/usr/ucb/whoami
    ;;
  AIX)
    whoami=whoami
    ;;
  *)
    print "$0: unsupported platform"
    exit 1
    ;;
esac

SCRIPTDIR=`dirname $0`
cd $SCRIPTDIR


# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        exit 2
       } 

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
stm_root=
apache22_root=

#
# get inst apache22_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
stm_root=$apache22_root
apache22_root=$apache22_root
instno=$inst

# Parse arguments

while [[ "$1" != "" ]] ; do
  case $1 in
    -website*)		website=$2 ;;
    # -stm_root*)	stm_root=$2 ;;
    # -apache22_root*)	apache22_root=$2 ;;
    *)			usage ;;
  esac
  shift 2
done

mod_conf() {
  # $1=httpdConf
  # $2=httpdConf-backup
  cat $1 | \
  sed \
    -e '/sm_module/d' \
    -e '/SmInitFile/d' \
    > $2
}

mod_envvars() {
  # $1=envvars
  # $2=envvars-backup
  if [[ `uname -s` = "AIX" ]] ; then
    cat $1 | \
    sed \
      -e '/### SiteMinder PATH #####/d' \
      -e '/NETE_WA_ROOT/d' \
      -e '/export NETE_WA_ROOT/d' \
      -e '/LIBPATH=${LIBPATH}:${NETE_WA_ROOT}/d' \
      -e '/PATH=${PATH}:${NETE_WA_ROOT}/d' \
      -e '/export PATH/d' \
      -e '/EXTSHM=ON ; export EXTSHM/d' \
      -e '/export LIBPATH/d' \
      -e '/LIBPATH/ a\
      export LIBPATH' \
      > $2
  else
    cat $1 | \
    sed \
      -e '/### SiteMinder PATH #####/d' \
      -e '/NETE_WA_ROOT/d' \
      -e '/export NETE_WA_ROOT/d' \
      -e '/LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${NETE_WA_ROOT}/d' \
      -e '/PATH=${PATH}:${NETE_WA_ROOT}/d' \
      -e '/export PATH/d' \
      -e '/export LD_LIBRARY_PATH/d' \
      -e '/LD_LIBRARY_PATH/ a\
      export LD_LIBRARY_PATH' \
      > $2
  fi
}

update() {
  # $1=target
  # $2=source
  cmp $1 $2 > /dev/null 2> /dev/null
  if [[ $? -eq 0 ]] ; then
    print "$0: $1 is already correct"
    rm $2
  elif [[ -w $1 ]] ; then
    cp -p $1 $1-pre_config
    cat $2 > $1
    rm $2
    print "$0: $1 backed up and updated"
  else
    print "$0: $1 needs replacing with $2"
  fi
}

#Check if services are running.

#Checks to be done
if [[ "$website" = "" ]] ; then
  usage
fi

if [[ "$stm_root" = "" ]] ; then
  print "Missing data in Apache configuration file"
  exit 1
fi

if [[ "$apache22_root" = "" ]] ; then
  print "Missing data in Apache configuration file"
  exit 1
fi

#check if website exists
if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
  print "Website $website.conf does not exists "
  exit 49
fi

#check if website is running
if [[ -x ${apc_enggutils_dir}/admin/apache22.sh ]] ; then
  if [[ `${apc_enggutils_dir}/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
    print "$0: $website must be stopped before configuring Siteminder"
    exit 48
  fi
else
   print "$0: Cannot determine running status of $website"
   exit 48
fi

#Sed conf remove Siteminder stuff

mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1
update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup
rm -rf $apache22_root/conf/WebAgent_$website.conf > /dev/null 2>&1
rm -rf $apache22_root/conf/$website > /dev/null 2>&1

#Remove details from envvars 
# this is done in deletesiteminder.sh
## mod_envvars $apache22_root/bin/envvars $apache22_root/bin/envvars-backup  > /dev/null 2>&1
## ## update $apache22_root/bin/envvars $apache22_root/bin/envvars-backup > /dev/null 2>&1

#Give some kind of advice

print "Start Apache and test the application url......."
exit 0
./admin/deletewebsite.sh
========================================
#!/bin/ksh
#
# deletewebsite.sh - Delete a web site within Apache 2.0
#
# SM, 29 2006, initial version, from Apache2 by AK
#

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -website website  new website name"
	print "                         (default: none, must be specified)"
	print "       -content flag     delete content too"
	print "                         (default: false)"
	exit 2
	}

# Where is everything

scriptDir=`dirname $0`

# Go fetch all the variables needed for this script

. $scriptDir/apacheutil.conf
. $apc_enggutils_dir/utility/utilcommon.sh

determine_apache22_root_dir
determine_apache22_site_dir
check_apache22_site_dir_writeable

# Defaults

website=
content=false

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-w*)		website=$2 ;;
		-c*)		content=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$website" = "" ]] ; then
	usage
fi

if [[ "$content" != "true" && "$content" != "false" ]] ; then
	usage
fi

if [[ "$1" != "" ]] ; then
	usage
fi

# Valid web site?

c=$apache22_site_dir/conf/$website.conf

if [[ ! -r $c ]] ; then
	print "$0: $c isn't readable or doesn't exist"
	exit 12
fi

# Check not running

if [[ `$scriptDir/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
	print "$0: Website $website must be stopped before deleting it"
	exit 12
fi

# Do it

docroot=`sed -n "s/^DocumentRoot[ 	][ 	]*\"\([^\"]*\)\"/\1/p" $c`

rm $c

if [[ "$content" = "true" ]] ; then
	if [[ "$docroot" = "" ]] ; then
		print "$0: couldn't determine and delete document root"
	elif [[ ! -d $docroot ]] ; then
		print "$0: document root isn't a directory"
	else
		rm -rf $docroot
	fi
fi

exit 0
./admin/unconfigurejanus.sh
========================================
#!/bin/ksh
# unconfigurejanus.sh - remove janus plugin from website config file

# AC, 21 Jun 2011, initial version

# Platform specific things

case `uname -s` in
  Linux)
    whoami=whoami
    unalias rm mv cp
    ;;
  SunOS)
    whoami=/usr/ucb/whoami
    ;;
  AIX)
    whoami=whoami
    ;;
  *)
    print "$0: unsupported platform"
    exit 1
    ;;
esac

SCRIPTDIR=`dirname $0`
cd $SCRIPTDIR


# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        exit 2
       } 

# Vars
hostname=`hostname|cut -d. -f1`

# Defaults

website=
jw_root=
apache22_root=

#
# get inst apache22_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
jw_root=$apache22_root
apache22_root=$apache22_root
instno=$inst

# Parse arguments

while [[ "$1" != "" ]] ; do
  case $1 in
    -website*)		website=$2 ;;
            *)		usage ;;
  esac
  shift 2
done

mod_conf() {
  # $1=httpdConf
  # $2=httpdConf-backup
  cat $1 | \
  sed \
    -e '/janus.conf/d' \
    > $2
}

update() {
  # $1=target
  # $2=source
  cmp $1 $2 > /dev/null 2> /dev/null
  if [[ $? -eq 0 ]] ; then
    print "$0: $1 is already correct"
    rm $2
  elif [[ -w $1 ]] ; then
    cp -p $1 $1-pre_config
    cat $2 > $1
    rm $2
    print "$0: $1 backed up and updated"
  else
    print "$0: $1 needs replacing with $2"
  fi
}

#Check if services are running.

#Checks to be done
if [[ "$website" = "" ]] ; then
  usage
fi

if [[ "$jw_root" = "" ]] ; then
  print "Missing data in Apache configuration file"
  exit 1
fi

if [[ "$apache22_root" = "" ]] ; then
  print "Missing data in Apache configuration file"
  exit 1
fi

#check if website exists
if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
  print "Website $website.conf does not exists "
  exit 49
fi

#check if website is running
if [[ -x ${apc_enggutils_dir}/admin/apache22.sh ]] ; then
  if [[ `${apc_enggutils_dir}/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
    print "$0: $website must be stopped before unconfiguring janus"
    exit 48
  fi
else
   print "$0: Cannot determine running status of $website"
   exit 48
fi

#Sed conf remove Siteminder stuff

mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1
update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup

#Remove details from envvars 
# this is done in deletesiteminder.sh
## mod_envvars $apache22_root/bin/envvars $apache22_root/bin/envvars-backup  > /dev/null 2>&1
## ## update $apache22_root/bin/envvars $apache22_root/bin/envvars-backup > /dev/null 2>&1

#Give some kind of advice
timestamp=$(date "+%Y-%h-%d-%H:%M:%S")

#When unconfigure script is run, rename janus.conf and janus.properties to
#janus.conf-$timestamp janus.properties-$timestamp and copy janus.properties-sample and janus.conf-sample
#to janus.conf and janus.properties

#mv $jw_root/janusweb/current/config/janus.properties $jw_root/janusweb/current/config/janus.properties-$timestamp
#mv $jw_root/janusweb/current/config/janus.conf  $jw_root/janusweb/current/config/janus.conf-$timestamp

cp -p $jw_root/janusweb/current/config/janus.conf-sample $jw_root/janusweb/current/config/janus.conf
cp -p $jw_root/janusweb/current/config/janus.properties-sample $jw_root/janusweb/current/config/janus.properties

test -f $jw_root/janusweb/current/config/janus.conf-pre_config && rm -f $jw_root/janusweb/current/config/janus.conf-pre_config
test -f $jw_root/janusweb/current/config/janus.conf-20* && rm -f $jw_root/janusweb/current/config/janus.conf-20*
test -f $jw_root/janusweb/current/config/janus.properties-20* && rm -f $jw_root/janusweb/current/config/janus.properties-20*

print "Start Apache and test the application url......."
exit 0
./admin/janusweb.sh
========================================
#!/bin/ksh
#
# janusweb.sh - look after Janus Web Agent
#
# This script can be invoked by an initscript, or by hand.
#
# AK, 30 Oct 2007, initial version
# MA, 19 Apr 2009, Added validate function

# Platform specific things

case `uname -s` in
	SunOS)  whoami=/usr/ucb/whoami
		# Workaround Janus bug - it expects whoami to be on the PATH
		export PATH=$PATH:/usr/ucb
		;;
	Linux)  whoami=whoami 
		;;
	*)
		print "$0: unsupported platform"
		exit 10
		;;
esac

# Usage

# Validate if script is executed under root
userid=`$whoami`
if [[ $userid = "root" ]] ; then
        print "$0: Cant use root to execute, su - fire a/c "
        exit 30
fi


usage()
	{
	print "usage: $0 ( start | stop | restart | status | validate ... )"
	exit 2
	}

# Start agent

jw_start()
	{
	confdir=@JANUS_HOME@/janusweb/current/config
	c=janus.properties
	if [[ ! -r $confdir/$c ]] ; then
		print "Can't read $confdir/$c"
		return 10
	fi
	if [[ `cat $confdir/$c | grep -c "^[^#=][^#=]*=[^#]*@[^#]*@"` -ne 0 ]] ; then
		print "@value@s found in $confdir/$c"
		return 11
	fi
	@JANUS_HOME@/janusweb/current/bin/janusweb.sh start
	}

# Stop agent

jw_stop()
	{
	@JANUS_HOME@/janusweb/current/bin/janusweb.sh stop
	}

# Status

jw_status()
	{
	@JANUS_HOME@/janusweb/current/bin/janusweb.sh check
	}

#validate

jw_validate()
        # $@=args
        {
        @JANUS_HOME@/janusweb/current/bin/janusweb.sh validate
        }


# Other

jw_other()
	# $@=args
	{
	@JANUS_HOME@/janusweb/current/bin/janusweb.sh "$@"
	}

# Where is everything

scriptDir=`dirname $0`/..

if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# Go fetch all the variables and functions needed for this script
if [[ -r $apc_enggutils_dir/utility/utilcommon.sh ]] ; then
  . $apc_enggutils_dir/utility/utilcommon.sh
else
  print "Unable to read utilcommon.sh"
  exit 1
fi

# Main

action=$1
if [[ "$action" = "" ]] ; then
	usage
fi
shift

umask 022

case $action in
	start)
		jw_start
		rc=$?
		;;
	stop)
		jw_stop
		rc=$?
		;;
	restart)
		jw_stop
		rc=$?
		if [[ $rc -eq 0 ]] ; then
			jw_start
			rc=$?
		fi
		;;
	status)	
		jw_status
		rc=$?
		;;
        validate) 
                jw_validate
                rc=$?
                ;;

	*)
		jw_other "$action" "$@"
		;;
esac

exit $rc
./admin/determine.sh
========================================
#!/bin/ksh
#
# determine.sh - Report configuration settings that are effective
#
# AK, 27 Jan 2006, initial version
# SM, 29 Sept 2006, Carried over from apache2.
# 
#

# Display usage, and quit

usage()
	{
	print "usage: $0 apache22_root_dir"
	print "   or: $0 apache22_site_dir"
	print "   or: $0 fq_host_name"
	exit 2
	}

# Where is everything

scriptDir=`dirname $0`

# Go fetch all the variables needed for this script

. $scriptDir/apacheutil.conf
. $apc_enggutils_dir/utility/utilcommon.sh

determine_apache22_root_dir
determine_apache22_site_dir
determine_fq_host_name

case $1 in
	apache22_root_dir)	print $apache22_root_dir ;;
	apache22_site_dir)	print $apache22_site_dir ;;
	fq_host_name)		print $fq_host_name ;;
	*)			usage ;;
esac

exit 0
./admin/rotatelogs.sh
========================================
#!/bin/ksh
#
# rotatelogs.sh - Rotate Apache logs
#
# Normally you might put the following in ws1.conf file
#   CustomLog "|/local/apache22/0/bin/rotatelogs /local/apache22/0/logs/ws1.access_log.%Y%m%d%X 300" common
# This won't work with our build of Apache, as rotatelogs has a runtime shared
# library dependency on some of the Apache shared libraries.
# Given the (lack of) complexity of what rotatelogs actually does, this seems
# somewhat inappropriate.
# rotatelogs does have a runtime library path dependency on the Apache lib
# directory but this only makes sense on the Engineering build host.
# Typically customers can install in various directories, none of which will
# match the --prefix we use when compiling Apache.
# To work around this, use this script in place of rotatelogs.
# Put the following in ws1.conf instead
#   CustomLog "|/local/apache22/eu-apache22u/0/rotatelogs.sh /apps/apache22/logs/ws1.access_log.%Y%m%d%X 300" common
# Problem was found by David E. Bauer - thanks Dave.
#
# AK, 20 Jul 2006, initial version
# SM, 29 Sept 2007, Carried over from Apache2.
#

scriptdir=`dirname $0`

. $scriptdir/apacheutil.conf


. $apache22_root/bin/envvars
exec $apache22_root/bin/rotatelogs $*

./admin/deleteJanus.sh
========================================
#!/bin/ksh
#set -x
# deleteJanus.sh - Remove Janus installation and configuration details 
#
#
#
# MA, 15 Apr 2009,Initial version 
# MA, 13 May 2009, Minor script changes
# AR, 12 Sep 2013, Add Janus Support to the Apache build.

# Platform specific things

case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        print "                               default: none, must be specified)"
        print "       -backupflag  flag       Janus backup flag)"
        print "                               (default: no)"
        print "       -backuppath  dir        Janus backup path)"
        print "                               (default: none,must be specified)"
        exit 2
       } 

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
jw_root=
apache22_root=
backupflag="no"
backuppath=

#
# get inst apache22_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
jw_root=$apache22_root
apache22_root=$apache22_root
instno=$inst


# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		       -web*)        website=$2    ;;
		-backupflag*)        backupflag=$2 ;;
		-backuppath*)        backuppath=$2 ;;
		           *)	     usage         ;;
	esac
	shift 2
done

mod_conf()
        # $1=httpdConf
	# $2=httpdConf-backup
        {
        	cat $1 | \
        	sed \
                -e '/janus.conf/d' \
                > $2
        }

update()
        # $1=target
        # $2=source
        {
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
                rm $2
        elif [[ -w $1 ]] ; then
                cp -p $1 $1-pre_config
                cat $2 > $1
                rm $2
                print "$0: $1 backed up and updated"
        else
                print "$0: $1 needs replacing with $2"
        fi
        }

#Checks to be done
if [[ "$website" = "" ]] ; then
	usage
fi

if [[ "$jw_root" = "" ]] ; then
      jw_root=$apache22_root 
fi

if [[ "$apache22_root" = "" ]] ; then
	usage
fi

if [[ "$backupflag" = "" ]] ; then
      usage
fi 

if [[ "$backupflag" != "no" ]] ; then

if [[ "$backuppath" = "" ]] ; then
print ""
print "****Enter backup path"
print "" 
        usage
   fi
fi

#check if website exists
if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
     print "Website $website.conf does not exists "
     exit 49
fi

#check if Janus directory exists
if [[ ! -d $jw_root/janusweb ]] ; then
     print "Janus directory does not exists under "$jw_root/janusweb
     exit 45
fi

if [[ ! -d $apache22_root ]] ; then
     print "Apache directory does not exists under "$apache22_root
     exit 45
fi

#Check if services are running.
#Check if website is running

if [[ `$apache22_root/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
        print "$0: Website $website must be stopped before deleting Janus"
        exit 48
fi

#Check Janus is running
    if [[ `$jw_root/janusweb/current/bin/janusweb.sh check | grep -c "Process 'janusweb agent' is not running"` -ne 1 ]] ; then
        print "$0: Janus web agent must be stopped"
        exit 50
fi

#Delete install directory 
if [[ $backupflag != "no" ]] ; then

	curdate=`date '+%Y%m%d'`
        tar -cvf $jw_root/janus-backup-$curdate.tar $jw_root  > /dev/null 2>&1
        print ""
        print "Files backed up under : $backuppath/janus-backup-$curdate.tar"
        mv $jw_root/janus-backup-$curdate.tar $backuppath  > /dev/null 2>&1
        rm -rf $jw_root/janusweb > /dev/null 2>&1
else 
# if backup flag is NO everything will just be deleted.
	rm -rf $jw_root/janusweb > /dev/null 2>&1
fi

#Sed website conf remove janus stuff 
		
mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1
update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup 

# remove registered Signature files
eu_sigfiles=`ls SignatureFile.JW*3*`
for i in $eu_sigfiles ; do
  ./sigfile-reg-web.sh -s $i
  if [[ $? -eq 0 ]] ; then
    ./sigfile-reg-web.sh -d $i
  fi
done


# Delete Janus scripts

files="
janusweb
janus-version.txt
janusweb.sh
configurejanus.sh
janustemplate.properties
cfgaddsite.sh
SignatureFile.JW*3*
"

for f in $files ; do
    rm $apc_enggutils_dir/admin/$f
done


#Give some kind of advice
print " Startup apache and test the application url......."
exit 0
./admin/deletesiteminder.sh
========================================
#!/bin/ksh
#set -x
# deletesiteminder.sh - Delete Siteminder installation and configuration details
# Inherited from first version of Siteminder

# RR, 07 Aug 2009, Modified to take care in IHS 7.0
# AC, 20 May 2011, Modified for E-1.2.0 SBA changes
# AC, 11 Aug 2011, Modified to remove siteminder symlink in signature repository before the sig file is removed.

# Platform specific things

case `uname -s` in
  Linux)
    whoami=whoami
    unalias rm mv cp
    ;;
  SunOS)
    whoami=/usr/ucb/whoami
    ;;
  AIX)
    whoami=whoami
    ;;
  *)
    print "$0: unsupported platform"
    exit 1
    ;;
esac

SCRIPTDIR=`dirname $0`
cd $SCRIPTDIR

# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags:  -backupflag yes/no     (Siteminder backup flag)"
        print "        -backuppath dir        (Siteminder backup path)"
        exit 2
       } 

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
stm_root=
apache22_root=
#backupflag="no"
backupflag=
backuppath=

#
# get inst apache22_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
stm_root=$apache22_root
#apache22_root=$apache22_root
apache22_root=$apache22_root
instno=$inst

# Parse arguments

while [[ "$1" != "" ]] ; do
  case $1 in
    -backupflag*)	backupflag=$2 ;;
    -backuppath*)	backuppath=$2 ;;
    *)			usage ;;
  esac
  shift 2
done

mod_conf() {
  # $1=httpdConf
  # $2=httpdConf-backup
  cat $1 | \
  sed \
    -e '/sm_module/d' \
    -e '/SmInitFile/d' \
    > $2
}

mod_envvars() {
  # $1=envvars
  # $2=envvars-backup
  if [[ `uname -s` = "AIX" ]] ; then
    cat $1 | \
    sed \
      -e '/### SiteMinder PATH #####/d' \
      -e '/NETE_WA_ROOT/d' \
      -e '/export NETE_WA_ROOT/d' \
      -e '/LIBPATH=${LIBPATH}:${NETE_WA_ROOT}/d' \
      -e '/PATH=${PATH}:${NETE_WA_ROOT}/d' \
      -e '/export PATH/d' \
      -e '/EXTSHM=ON ; export EXTSHM/d' \
      -e '/export LIBPATH/d' \
      -e '/LIBPATH/ a\
      export LIBPATH' \
      > $2
  else
    cat $1 | \
    sed \
      -e '/### SiteMinder PATH #####/d' \
      -e '/NETE_WA_ROOT/d' \
      -e '/export NETE_WA_ROOT/d' \
      -e '/LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${NETE_WA_ROOT}/d' \
      -e '/PATH=${PATH}:${NETE_WA_ROOT}/d' \
      -e '/export PATH/d' \
      -e '/export LD_LIBRARY_PATH/d' \
      -e '/LD_LIBRARY_PATH/ a\
      export LD_LIBRARY_PATH' \
      > $2
  fi
}


update() {
  # $1=target
  # $2=source
  cmp $1 $2 > /dev/null 2> /dev/null
  if [[ $? -eq 0 ]] ; then
    print "$0: $1 is already correct"
    rm $2
  elif [[ -w $1 ]] ; then
    cp -p $1 $1-pre_config
    cat $2 > $1
    rm $2
    print "$0: $1 backed up and updated"
  else
    print "$0: $1 needs replacing with $2"
  fi
}

#Check if services are running.

#Checks to be done
## if [[ "$website" = "" ]] ; then
  ## usage
## fi

if [[ "$stm_root" = "" ]] ; then
  print "Missing data in Apache configuration file"
  exit 1
fi

if [[ "$apache22_root" = "" ]] ; then
  print "Missing data in Apache configuration file"
  exit 1
fi

if [[ "$backupflag" = "" ]] ; then
  usage
fi 

if [[ "$backupflag" != "no" ]] ; then
  if [[ "$backuppath" = "" ]] ; then
    print ""
    print "****Enter backup path"
    print "" 
    usage
  fi
fi

if [ ! -d $backuppath ] || [ ! -w $backuppath ] ; then
  print "Cannot write to backup path"
  exit 1
fi

# check if any website has siteminder configured
BAD=0
l=`ls $apache22_root/conf/*.conf`
for i in $l ; do
  #c=`grep -c "^[ 	].*LoadModule[ 	].*sm_module[ 	]..*libmod_sm22.so" $i`

  c=`grep -c "^[ 	]*LoadModule[ 	].*sm_module[ 	].*.*/webagent/bin/libmod_sm22.so" $i`
  if [ $c -ne 0 ] ; then
    print "WebSite conf file ($i) has Siteminder configuration (libmod_sm22.so)"
    BAD=1
  fi

  c=`grep -c "^[ 	]*SmInitFile[ 	].*.*/WebAgent_.*conf" $i`
  if [ $c -ne 0 ] ; then
    print "Website conf file ($i) has Siteminder configuration (WebAgent_*.conf)"
    BAD=1
  fi

done

if [[ $BAD -eq 1 ]] ; then
  print "Please run unconfiguresiteminder.sh for the associted websites above before removing Siteminder"
  print "Also make sure all the websites with this instance are down before running this script again"
  exit 1
fi 

#check if website exists
## if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
  ## print "Website $website.conf does not exists "
  ## exit 49
## fi

#Check if installs exists
if [[ ! -r $stm_root/webagent/bin/libmod_sm22.so ]] ; then
  print "$0: Has Siteminder already been removed? Key file such as libmod_sm22.so does not exist. Investigate why"
  exit 45
fi


#check if website is running

if [[ -x ${apc_enggutils_dir}/admin/apache22.sh ]] ; then
  if [[ `${apc_enggutils_dir}/admin/apache22.sh status | grep -c -v "not running"` -ge 1 ]] ; then
    print "$0: All websites in this instance must be stopped before removing Siteminder"
    exit 48
  fi
else
   print "$0: Cannot determine running status of $website"
   exit 48
fi

#convert upper to lower
convert=`echo "$backupflag" | tr '[:upper:]' '[:lower:]'`
backupflag=$convert

#Delete install directory 

if [[ $backupflag != "no" ]] ; then
  if [ -f $apache22_root/conf/WebAgent_*.conf ] ; then
    cp $apache22_root/conf/WebAgent_*.conf ${stm_root}/webagent
  fi
  curdate=`date '+%Y%m%d'`
  tar -cvf ${stm_root}/siteminder-backup-$curdate.tar ${stm_root}/webagent  > /dev/null 2>&1
  mv ${stm_root}/siteminder-backup-$curdate.tar $backuppath  > /dev/null 2>&1
  rm -rf ${stm_root}/webagent > /dev/null 2>&1 
  print ""
  print "Files backed up under : $backuppath/siteminder-backup-$curdate.tar"
else 
  # if backup flag is NO everything will just be deleted.
  rm -rf ${stm_root}/webagent > /dev/null 2>&1
fi


#Sed conf remove Siteminder stuff
## site unconfiguration is done as a seperate task prior to this script
## mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup > /dev/null 2>&1
## update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup
## rm -rf $apache22_root/conf/WebAgent_$website.conf > /dev/null 2>&1
## rm -rf $apache22_root/conf/$website > /dev/null 2>&1

#Remove details from envvars 

mod_envvars $apache22_root/bin/envvars $apache22_root/bin/envvars-backup  > /dev/null 2>&1
update $apache22_root/bin/envvars $apache22_root/bin/envvars-backup > /dev/null 2>&1

# remove registered Signature files
eu_sigfiles=`ls SignatureFile.SM*CR*`
for i in $eu_sigfiles ; do
  ./sigfile-reg-web.sh -s $i
  if [[ $? -eq 0 ]] ; then
    ./sigfile-reg-web.sh -d $i
  fi
done

# remove eu scripts (not deletesiteminder as this is being run)
eu_files="SignatureFile.SM*CR* configuresiteminder.sh unconfiguresiteminder.sh siteminder-version.txt"
for i in $eu_files ; do
  if [ -f $i ] ; then
    rm -f $i
  fi
done

#Give some kind of advice
print " Start Apache and test the application url......."
exit 0
./admin/logpurge.sh
========================================
#!/bin/sh
# AC, 11 Jun 2014, Added Log purging feature

version=1.0
echo "Apache log purge version: $version"

os=`uname -s`
# Platform specific things
case $os in
  Linux)
    whoami=`whoami`
    ;;
  SunOS)
    whoami=`/usr/ucb/whoami`
    ;;
  AIX)
    whoami=`whoami`
    ;;
  *)
    echo "$0: unsupported platform"
    exit 1
    ;;
esac

unalias -a

umask 022
cwd=`pwd`
dist_dir=`dirname $0`
cd $dist_dir

lr=90

# assumption
# ----------
# mod_jk log are located in the same directory as apache http log
# Siteminder log path is set by siteminder policy server and there is no way to work in out from client installs. 
#
if [ ! -f ./apacheutil.conf ] ; then
  echo "This script is not running from apache http admin directory"
  exit 1
fi

. ./apacheutil.conf

# check ID
# ---------
if [ "${userid}x" == "x" ] ; then
  echo "Error: ${dist_dir}/apacheutil.conf does not contain userid varible"
  exit 1
fi
if [ "${whoami}" != "${userid}" ] ; then
  echo "This script should only be run by ${userid}"
  exit 1
fi

# check Log directory
# --------------------
if [ "${logroot}x" == "x" ] ; then
  echo "Please update ${dist_dir}/apacheutil.conf with logroot=<directory of apache log>"
  echo "eg. logroot=/local/apache22/0/log"
fi

# check log retention 
# --------------------
if [ "${log_purging_days}x" != "x" ] ; then
  lr=${log_purging_days}
fi

echo "---> Purging Apache http and mod_jk logs"
if [ -d $logroot ] ; then
  echo "Logs greater than $lr day(s) in $logroot ..."
  find $logroot \( -type f -a -name "*log*" -a -mtime +${lr} \) -ls
  find $logroot \( -type f -a -name "*log*" -a -mtime +${lr} \) -exec rm {} \;
else
  echo "Directory $logroot does not exist"
fi

echo "---> Purging Siteminder logs"
if [ "${smlog}x" == "x" ] ; then
  echo "Not applicable. Either Siteminder is not installed or smlog is not set in apacheutil.conf"
else
  if [ -d $smlog ] ; then
    echo "Logs greater than $lr day(s) in $smlog ..."
    find $smlog \( -type f -a -name "*log*" -a -mtime +${lr} \) -ls
    find $smlog \( -type f -a -name "*log*" -a -mtime +${lr} \) -exec rm {} \;
  else
    echo "Directory $smlog does not exist"
  fi
fi

./admin/janusdelsite.sh
========================================
#!/bin/ksh
#set -x
# configurewebiste.sh - Configures websites and application to work with a 
# single instance of Janus
#
# MA, 13 Apr 2009,Initial version.
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
#

# Platform specific things

case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp   
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        print "                               default: none, must be specified)"
        print "       -ctxroot str             Application context root"
        print "                               (default: none, must be specified)" 
        exit 2
        }

#Modify Apache website 
mod_conf()
        # $1=httpdConf
        # $2=httpdConf-Backup
        {
        cat $1 | \
        sed \
                -e "/janus.conf/d" \
                > $2
              print "Include $jw_root/janusweb/current/config/janus.conf" >> $2
        }

#Function to modify janus.conf
mod_janus_conf()
        # $1=janusConf
        # $2=ctxname
        # $3=janusConf.tmp
        {
        cat $1 | \
         sed "/$2/,/<\/Location>/d" $1 > $3
         #sed "/<Location \/$2\/>/,/<\/Location>/d" $1 > $3
         #cp -p $3 $1
         #rm -f $3
        }

update()
        # $1=target
        # $2=source
        {
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
        elif [[ -w $1 ]] ; then
                cp -p $1 $1-pre_config
                cat $2 > $1
                rm $2
                print "$0: $1 backed up and updated"
        else
                print "$0: $1 needs replacing with $2"
        fi
        }


# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
instno=
jw_root=
apache22_root=
ctxroot=

#
# get inst apache_install_root apc_enggutils_dir userid group from Apache installation
#
if [[ -r ./apacheutil.conf ]] ; then
  . ./apacheutil.conf
else
  print "Unable to read Apache configuration file"
  exit 1
fi

# use old var for test run without making much change
jw_root=$apache22_root
apache22_root=$apache22_root
instno=$inst

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-web*)		website=$2 ;;
                -ctx*)          ctxroot=$2 ;;
		  *)		usage ;;
	esac
	shift 2
done


#Checks to be done
if [[ "$website" = "" ]] ; then
	usage
fi

if [[ "$ctxroot" = "" ]] ; then
        usage
fi

ctxname=$(echo $ctxroot | awk -F/ '{print $2}')

# Validate if script is executed under root 
userid=`$whoami`
if [[ $userid = "root" ]] ; then
	print "$0: Cant use root to execute, su - fire a/c "
	exit 30
fi

#Important check: Janus version compatibility with Apache 2.2
if [[ `uname -s` = "AIX" ]] ; then

        LIBPATH="$apache22_root/lib:$LIBPATH"
        export LIBPATH
else
        LD_LIBRARY_PATH="$apache22_root/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH
fi

jw_bitver=`grep "Product Architecture:" $jw_root/janusweb/current/bin/janus-version.txt | cut -d':' -f2 | tr -d " " | cut -c 1-2`
apache_bitver=`$apache22_root/bin/./httpd -V | grep "Architecture:"  | cut -d':' -f2 | tr -d " " | cut -c 1-2`

if [[  $apache_bitver = "64" && $jw_bitver = "32" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
fi

if [[  $apache_bitver = "32" && $jw_bitver = "64" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
fi


if [[ `uname -s` = "SunOS" ]] ; then
 if [[  $apache_bitver = "64" && $jw_bitver = "64" ]] ; then
     print "Janus" $jw_bitver"-bit version not compatible with Apache 2.2" $apache_bitver"-bit version"
     exit 78
  fi
fi

if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
        print "Website $website.conf does not exists "
        exit 45
fi

#Check if Janus is installed under the specified directory.
if [[ ! -r $jw_root/janusweb/current/bin/janusweb.sh ]] ; then
        print "$0: Janus Web Agent is'nt installed"
 exit 53
fi

#check if website is running
if [[ `$apache22_root/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
        print "$0: $website must be stopped before configuring Janus"
        exit 48
fi

#check Janus is running

if [[ `$ps | grep -v grep | grep $jw_root/janusweb/current` != "" ]] ; then
        print "$0: Janus web agent must be stopped"
        exit 50
fi

## Backup janus.conf to janus.conf.tmp
cp -p $jw_root/janusweb/current/config/janus.conf $jw_root/janusweb/current/config/janus.conf.tmp

# Modify janus.conf  
mod_janus_conf $jw_root/janusweb/current/config/janus.conf $ctxname $jw_root/janusweb/current/config/janus.conf.tmp  2> /dev/null
update $jw_root/janusweb/current/config/janus.conf $jw_root/janusweb/current/config/janus.conf.tmp

## Backup Apache website ws1.conf
cp -p $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup

# Modify Apache website ws1.conf
mod_conf $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup  2> /dev/null
update $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-backup 

# Ok, give some worthwhile advice, if relevant.

print " "
print " New website/application configuration complete..."
print " Next Steps"
print " 1) Start Jauns web agent ./janusweb.sh start"
print " 2) Test Janus web agent ./janusweb.sh test"
print " 3) Validate Janus web agent ./janusweb.sh validate"
print " 4) Start apache server "$apache22_root"/apache22u/apache22.sh start "$website
print " 5) Test Application url "
print "    http://<hostname>:<apache-http-port>/"

exit 0
./admin/cfgmodajp.sh
========================================
#!/bin/ksh   
#
# cfgmodajp.sh - Configure Web Servers <site>.conf file to use mod_proxy_ajp.so module
#
# Module mod_proxy_ajp.so is supported on Apache 2.2 Web Servers.
#
# Does the following:
# Validates arguments
# Add balancer group if not present otherwise append in correct parameters
# Auto-Detects the Tomcat parameters if the Tomcat Installation(specified by tomcat_dir option) is on the same box as Apache
# Provides the user to edit the configuration by passing the Tomcat Parameters if the Tomcat Installation is Remote
#
# MS, 18 Jun 2007, initial version
# MS, 27 Jun 2007, Now reference jkAJPConnectorPort instead of jk2AJPConnectorPort
# SM, 15 Aug 2007, Copied from Tomcat6 and modified to be packaged with Apache22 build. 
# PP, 12 Feb 2009, Support for 64 bit
# SM, 01 Apr 2009, separate the configuration for mod_proxy_ajp from <website>.conf into a separate conf file in conf.d directory   
# SM, 03 Aug 2009, Modified the script to integrate the change JVMROUTE name for Tomcat

platform=`uname -s`

case $platform in
        Linux)
                whoami=whoami
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        AIX)
                whoami=whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Display usage, and quit
usage()
{
        print "usage: $0 {flags}"
        print "       -site site1,site2         list of Apache web sites"
        print "                                 (default: none, must be specified)"
        print "       -remote flag              Tomcat host is remote, true or false"
        print "                                 (default:false)"
        print "       -tomcat_dir               Tomcat Installation directory"
        print "                                 (if remote flag is false, default: /local/Tomcat7/0 "
	print "                                 (if remote flag is true, Not required "
        print "       -catalinabase number      Catalinabase number"
        print "                                 (default: 0)"
        print "       -group name               Name of the Load balance group"
        print "                                 (default: group<inst>)"
        print "       -tomcat_host name         Complete hostname of tomcat installation"
        print "                                 (if remote flag is false, default: Auto-detect based on tomcat_dir"
        print "                                 (if Remote flag is true,  default: none, Required"
        print "       -ajp_port number          AJP port for tomcat"
        print "                                 (if remote flag is false, default: Auto-detect based on tomcat_dir"
        print "                                 (if Remote flag is true,  default: none, Required"
        print "       -url_path                 The Request path of apache access url after the <hostname>:<AJP Port>/"
        print "                                 (default: none, must be specified)"
        print "       -path_map                 The url part on the remote tomcat server to replace <url_path> "
        print "                                 (default: <url_path>)"
        exit 2

}


check_file()
# $1=file
# $2=description
{
        if [[ ! -r $1 ]] ; then
                if [[ "$2" != "" ]] ; then
                        print "$0: $2 not found"
                else
                        print "$0: $1 not found"
                fi
                exit 10
        fi
}

# Process Apache 2.2.x httpd.conf
# Removes all existing configuration, and adds it back.
gen_mod_proxy_ajp_conf()
# $1=mod_proxy_conf
# $2=tmp_mod_proxy_conf
{
# First read the Apache .conf file to see if balancer group exists
searchstr="<Proxy balancer://${lbgroup}>"
add_lbgroup=true
while read line
do
        if [[ "$line" = "$searchstr" ]] ; then
                add_lbgroup=false

        fi
done < $1 



# Balancer group exists, update the Proxy balancer and ProxyPassReverse only

if [ $add_lbgroup = "false" ] ; then

	# Check if the balancer Member needs to be added. 
	add_lbmember=true
	searchStr="BalancerMember ajp://$tomcat_host:$ajp_port route=${shorthostname}_catalinabase$catalinabase"
	while read line
	do
       	 if [[ "$line" = "$searchStr" ]] ; then
                add_lbmember=false
         fi
	done < $1
	
	if [ $add_lbmember = "true" ] ; then
	        cat $1 | \
        	sed \
		   	-e '/Proxy balancer:\/\/'"$lbgroup"'/a\
BalancerMember ajp://'"$tomcat_host:$ajp_port route=${shorthostname}_catalinabase$catalinabase"'' \
			-e "/ProxyPass \\$url_path/d" \
             	> $2
	else
                cat $1 | \
                sed \
			-e "/ProxyPass \\$url_path/d" \
			-e "/ProxyPassReverse \\$url_path ajp:\/\/$tomcat_host:$ajp_port\\$path_map/d" \
                > $2
	fi

        print "ProxyPass $url_path balancer://$lbgroup$path_map" >> $2
        print "ProxyPassReverse $url_path ajp://$tomcat_host:$ajp_port$path_map" >> $2
	
fi


# Balancer group does not exist so add it
if [ $add_lbgroup = "true" ] ; then

        cat $1 | \
        sed \
                 -e "/# Tomcat 7 mod_proxy_ajp/d" \
		 -e "/proxy_module/d" \
		 -e "/proxy_ajp_module/d" \
		 -e "/proxy_balancer_module/d" \
		 -e "/ProxyRequests/d" \
		 -e "/Proxy balancer:/d" \
		 -e "/BalancerMember/d" \
                 -e "/<\/Proxy>/d" \
		 -e "/ProxyPass \\$url_path/d" \
                 -e "/ProxyPassReverse \\$url_path/d" \
                > $2
        print "# Tomcat 7 mod_proxy_ajp" >> $2
        print "LoadModule proxy_module modules/mod_proxy.so " >> $2
        print "LoadModule proxy_ajp_module modules/mod_proxy_ajp.so" >> $2
        print "LoadModule proxy_balancer_module modules/mod_proxy_balancer.so" >> $2
        print " " >> $2
        print "ProxyRequests Off" >> $2
        print " " >> $2
        print "<Proxy balancer://$lbgroup>" >> $2
        print "BalancerMember ajp://$tomcat_host:$ajp_port route=${shorthostname}_catalinabase$catalinabase" >> $2
        print "</Proxy>" >> $2 
        print " " >> $2
        print "ProxyPass $url_path balancer://$lbgroup$path_map" >> $2
        print "ProxyPassReverse $url_path ajp://$tomcat_host:$ajp_port$path_map" >> $2

fi
}

# How to update a configuration file with its proposed replacement.
# Do nothing if already correct.
# Overwrite and preserve file ownerships and permissions if possible.
# Say what needs to be done otherwise.
# Source file is deleted if target is correct or updated

update_proxy_conf()
# $1=target
# $2=source
{
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "  $1 is already correct"
                rm $2
        elif [[ -w $1 ]] ; then
		if [[ -s $1 ]] ; then
	                cp -p $1 $1-pre_cfgmodproxy
		fi
                cat $2 > $1
                rm $2
                print "  $1 backed up and updated"
        else
                print "  $1 needs replacing with $2"
                chmod 644 $2
        fi
}


# *************************************************************************
# Main

# Pick up configuration and common code

apache22uDir=`dirname $0`
. $apache22uDir/apacheutil.conf

# Defaults

catalinabase=0
apache22_sites=
remote=false

# Parse command line arguements

while [[ "$1" != "" ]] ; do
case $1 in
                -s*)            apache22_sites=$2 ;;
		-r*)            remote=$2 ;;
		-tomcat_d*)     tomcat_dir=$2 ;;
                -catalinabase*) catalinabase=$2 ;;
		-tomcat_ho*)    tomcat_host=$2 ;;
		-ajp*)  	ajp_port=$2 ;;
                -url*)          url_path=$2 ;;
		-p*)            path_map=$2 ;;
#               -u*)            url=$2 ;;
                -g*)            lbgroup=$2 ;;
                *)              usage ;;
        esac
        shift 2
done



# Start with prerequisite checks

if [[ "$apache22_sites" = "" ]] ; then
        usage
fi

if [[ "$remote" = "false" && "$tomcat_dir" = "" ]] ; then
	tomcat_dir=/local/Tomcat7/0
fi


# If the tomcat host is local, pick the required parameters and scripts from Tomcat Instatallation

if [[ "$remote" = "false" ]] ; then
         called_into=true
        . $tomcat_dir/tc7u/commonutils.sh
        . $tomcat_dir/tc7u/tcutil.conf

        determine_catalina_home
        determine_catalinabase_dir
        determine_catalina_base $catalinabase
        determine_fq_host_name

        # Pickup Machine specific configuration
        . $catalina_base/util/tcutil.conf

fi

if [[ "$url_path" = "" ]] ; then
        usage
fi

if [[ "$path_map" = "" ]] ; then
       path_map=$url_path 
fi

if [[  "$tomcat_host" = "" ]] ; then
	if [[ "$remote" = "false" ]] ; then
		tomcat_host=$fq_host_name
	else
	  usage
	fi
fi

if [[  "$ajp_port" = "" ]] ; then
        if [[ "$remote" = "false" ]] ; then
                ajp_port=$jkAJPConnectorPort 
        else
          usage
        fi
fi

if [[ "$lbgroup" = "" ]] ; then
        lbgroup=group${inst}
fi


# Check the path argument has a leading '/'. If it doesn't add one

if [[ "$url_path" != /* ]] ; then
       url_path=/$url_path
fi

if [[ "$path_map" != /* ]] ; then
       path_map=/$path_map
fi

#Short name for the host. The jvmroutes in tomcat now have the host name appended to it.
shorthostname=`echo $tomcat_host | cut -d. -f1`

# Build variables
apache22_conf_dir=$apache22_root/conf
apache22_log_dir=$apache22_root/logs
mod_conf_dir=$apache22_root/conf.d

mkdir -p $mod_conf_dir

#if [[ "$url" = "" ]] ; then
#        url=$tomcat_host:$ajp_port$path
#fi


# Generate modified configurations for Apache 2.x

for c in `print $apache22_sites | sed "s/,/ /g"` ; do
        mod_proxy_conf=$mod_conf_dir/${c}-modproxyajp.conf
        httpd_conf=$apache22_conf_dir/${c}.conf
        
        print "Apache 2.2 Configuration $httpd_conf"
        check_file $httpd_conf

	#create mod_proxy_conf file if it does not exist
	if [ ! -f $mod_proxy_conf ] ; then
		touch $mod_proxy_conf 
		chmod 644 $mod_proxy_conf
	fi

        tmp_httpd_conf=/tmp/${c}.conf
        tmp_mod_proxy_conf=/tmp/${c}-modproxyajp.conf
     #   p=`basename $c .conf`
	gen_mod_proxy_ajp_conf $mod_proxy_conf $tmp_mod_proxy_conf
	update_proxy_conf $mod_proxy_conf $tmp_mod_proxy_conf

        if [ `cat $httpd_conf |grep "Include $mod_proxy_conf" | wc -l` -lt 1 ] ; then
                print "Include $mod_proxy_conf" >> $httpd_conf
        fi

done

exit 0

./admin/cfgmodproxy.sh
========================================
#!/bin/ksh   
#
# cfgmodproxy.sh - Configure Web Servers <site>.conf file to use mod_proxy_ajp.so module
#
# Module mod_proxy_ajp.so is supported on Apache 2.2 Web Servers.
#
# Does the following:
# Validates arguments
# Add balancer group if not present otherwise append in correct parameters
# Auto-Detects the Tomcat parameters if the Tomcat Installation(specified by tomcat_dir option) is on the same box as Apache
# Provides the user to edit the configuration by passing the Tomcat Parameters if the Tomcat Installation is Remote
#
# AR, 27 May 2015, initial version

platform=`uname -s`

case $platform in
        Linux)
                whoami=whoami
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        AIX)
                whoami=whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Display usage, and quit
usage()
{
        print "usage: $0 {flags}"
        print "       -site site1,site2         list of Apache web sites"
        print "                                 (default: none, must be specified)"
        print "       -remote flag              Tomcat host is remote, true or false"
        print "                                 (default:true)"
        print "       -tomcat_dir               Tomcat Installation directory"
        print "                                 (if remote flag is false, default: /local/web/Tomcat7 "
	print "                                 (if remote flag is true, Not required "
        print "       -catalinabase number      Catalinabase number"
        print "                                 (default: 0)"
        print "       -tomcat_host name         Complete hostname of tomcat installation"
        print "                                 (if remote flag is false, default: Auto-detect based on tomcat_dir"
        print "                                 (if Remote flag is true,  default: none, Required"
        print "       -ssl_port number        HTTPS port for tomcat"
        print "                                 (if remote flag is false, default: Auto-detect based on tomcat_dir"
        print "                                 (if Remote flag is true,  default: none, Required"
        print "       -url_path                 The Request path of apache access url after the <hostname>:<HTTPS Port>/"
        print "                                 (default: none, must be specified)"
        print "       -balancer name            Name of the Load balance group"
        print "                                 (default: none, must be specified)"
        print "       -path_map                 The url part on the remote tomcat server to replace <url_path> "
        print "                                 (default: <url_path>)"
        exit 2

}


check_file()
# $1=file
# $2=description
{
        if [[ ! -r $1 ]] ; then
                if [[ "$2" != "" ]] ; then
                        print "$0: $2 not found"
                else
                        print "$0: $1 not found"
                fi
                exit 10
        fi
}

# Process Apache 2.2.x httpd.conf
# Removes all existing configuration, and adds it back.
gen_mod_proxy_ssl_conf()
# $1=mod_proxy_conf
# $2=tmp_mod_proxy_conf
{
# First read the Apache .conf file to see if balancer group exists
searchstr="<Proxy balancer://${lbname}>"
add_lbname=true
while read line
do
        if [[ "$line" = "$searchstr" ]] ; then
                add_lbname=false

        fi
done < $1 



# Balancer group exists, update the Proxy balancer and ProxyPassReverse only

if [ $add_lbname = "false" ] ; then

	# Check if the balancer Member needs to be added. 
	add_lbmember=true
	searchStr="BalancerMember https://$tomcat_host:$ssl_port route=${shorthostname}_catalinabase$catalinabase"
	while read line
	do
       	 if [[ "$line" = "$searchStr" ]] ; then
                add_lbmember=false
         fi
	done < $1
	
	if [ $add_lbmember = "true" ] ; then
	        cat $1 | \
        	sed \
		   	-e '/Proxy balancer:\/\/'"$lbname"'/a\
BalancerMember https://'"$tomcat_host:$ssl_port route=${shorthostname}_catalinabase$catalinabase"'' \
			-e "/ProxyPass \\$url_path/a \
ProxyPassReverse $url_path https://$tomcat_host:$ssl_port$path_map" \
             	> $2
	else
                cat $1 | \
                sed \
			-e "/ProxyPass \\$url_path/d" \
			-e "/ProxyPassReverse \\$url_path https:\/\/$tomcat_host:$ssl_port\\$path_map/d" \
                > $2
	fi
fi


# Balancer group does not exist so add it
if [ $add_lbname = "true" ] ; then

        cat $1 | \
        sed \
                 -e "/# Tomcat 7 mod proxy over HTTPS/d" \
		 -e "/proxy_module/d" \
		 -e "/proxy_http_module/d" \
		 -e "/proxy_balancer_module/d" \
		 -e "/ProxyRequests/d" \
		 -e "/Proxy balancer:/d" \
		 -e "/BalancerMember/d" \
                 -e "/<\/Proxy>/d" \
		 -e "/ProxyPass \\$url_path/d" \
                 -e "/ProxyPassReverse \\$url_path/d" \
                > $2
        print "# Tomcat 7 mod proxy over HTTPS" >> $2
        print "LoadModule proxy_module modules/mod_proxy.so " >> $2
        print "LoadModule proxy_http_module modules/mod_proxy_http.so" >> $2
        print "LoadModule proxy_balancer_module modules/mod_proxy_balancer.so" >> $2
        print " " >> $2
        print "ProxyRequests Off" >> $2
        print "ProxyPreserveHost On" >> $2
        print " " >> $2
        print "RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI}" >> $2
        print 'Header add Set-Cookie "ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED' >> $2
        print " " >> $2
        print "<Proxy balancer://$lbname>" >> $2
        print "BalancerMember https://$tomcat_host:$ssl_port route=${shorthostname}_catalinabase$catalinabase" >> $2
        print "ProxySet stickysession=ROUTEID" >> $2
        print "</Proxy>" >> $2 
        print " " >> $2
        print "ProxyPass $url_path balancer://$lbname$path_map" >> $2
        print "ProxyPassReverse $url_path https://$tomcat_host:$ssl_port$path_map" >> $2
        print " " >> $2
        print "# prevent the webserver from being used as proxy" >> $2
        print "<LocationMatch "^[^/]">" >> $2
        print "  Deny from all" >> $2
        print "</LocationMatch>" >> $2 
fi
}

# How to update a configuration file with its proposed replacement.
# Do nothing if already correct.
# Overwrite and preserve file ownerships and permissions if possible.
# Say what needs to be done otherwise.
# Source file is deleted if target is correct or updated

update_proxy_conf()
# $1=target
# $2=source
{
        cmp $1 $2 > /dev/null 2> /dev/null
        if [[ $? -eq 0 ]] ; then
                print "  $1 is already correct"
                rm $2
        elif [[ -w $1 ]] ; then
		if [[ -s $1 ]] ; then
	                cp -p $1 $1-pre_cfgmodproxy
		fi
                cat $2 > $1
                rm $2
                print "$1 backed up and updated"
        else
                print "$1 needs replacing with $2"
                chmod 644 $2
        fi
}


# *************************************************************************
# Main
# *************************************************************************

# Pick up configuration and common code

apache22uDir=`dirname $0`
. $apache22uDir/apacheutil.conf

# Defaults

catalinabase=0
apache22_sites=
remote=true

# Parse command line arguements

while [[ "$#" -gt 1 ]] ; do
        case $1 in
                -si*)            apache22_sites=$2 ;;
		-r*)            remote=$2 ;;
		-tomcat_d*)     tomcat_dir=$2 ;;
                -catalinabase*) catalinabase=$2 ;;
		-tomcat_ho*)    tomcat_host=$2 ;;
		-ssl*)  	ssl_port=$2 ;;
                -url*)          url_path=$2 ;;
		-p*)            path_map=$2 ;;
#               -u*)            url=$2 ;;
                -b*)            lbname=$2 ;;
                *)              usage ;;
        esac
        shift 2
done

# Start with prerequisite checks

if [[ "$apache22_sites" = "" ]] ; then
        usage
fi

if [[ "$remote" = "false" && "$tomcat_dir" = "" ]] ; then
	tomcat_dir=/local/web/Tomcat7
fi


# If the tomcat host is local, pick the required parameters and scripts from Tomcat Instatallation

if [[ "$remote" = "false" ]] ; then
         called_into=true
        . $tomcat_dir/tc7u/commonutils.sh
        . $tomcat_dir/tc7u/tcutil.conf

        determine_catalina_home
        determine_catalinabase_dir
        determine_catalina_base $catalinabase
        determine_fq_host_name

        # Pickup Machine specific configuration
        . $catalina_base/util/tcutil.conf
fi

if [[ "$url_path" = "" ]] ; then
        usage
fi

if [[ "$path_map" = "" ]] ; then
       path_map=$url_path 
fi

if [[  "$tomcat_host" = "" ]] ; then
	if [[ "$remote" = "false" ]] ; then
		tomcat_host=$fq_host_name
	else
          usage
        fi
fi

#if [[ "$lbname" = "" ]] ; then
#        lbname=
#fi

# Check the path argument has a leading '/'. If it doesn't add one

if [[ "$url_path" != /* ]] ; then
       url_path=/$url_path
fi

if [[ "$path_map" != /* ]] ; then
       path_map=/$path_map
fi

#Short name for the host. The jvmroutes in tomcat now have the host name appended to it.
shorthostname=`echo $tomcat_host | cut -d. -f1`

# Build variables
apache22_conf_dir=$apache22_root/conf
apache22_log_dir=$apache22_root/logs
mod_conf_dir=$apache22_root/conf.d

mkdir -p $mod_conf_dir

#if [[ "$url" = "" ]] ; then
#        url=$tomcat_host:$ssl_port$path
#fi

# Generate modified configurations for Apache 2.x

for c in `print $apache22_sites | sed "s/,/ /g"` ; do
        mod_proxy_conf=$mod_conf_dir/${c}-modproxyssl.conf
        httpd_conf=$apache22_conf_dir/${c}.conf
        
        print "Apache 2.2 Configuration $httpd_conf"
        check_file $httpd_conf

	#create mod_proxy_conf file if it does not exist
	if [ ! -f $mod_proxy_conf ] ; then
		touch $mod_proxy_conf 
		chmod 644 $mod_proxy_conf
	fi

        tmp_httpd_conf=/tmp/${c}.conf
        tmp_mod_proxy_conf=/tmp/${c}-modproxyssl.conf
        #p=`basename $c .conf`
	gen_mod_proxy_ssl_conf $mod_proxy_conf $tmp_mod_proxy_conf
	update_proxy_conf $mod_proxy_conf $tmp_mod_proxy_conf

        if [ `cat $httpd_conf |grep "Include $mod_proxy_conf" | wc -l` -lt 1 ] ; then
               matchstring='RewriteRule'
               cp -p $httpd_conf $tmp_httpd_conf
               cat $tmp_httpd_conf | \
               sed \
                     -e "/$matchstring/d" \
                     -e '/SSLEngine/a\
     SSLProxyEngine On' \
                     -e '/\/VirtualHost/i\
     Include '"$mod_proxy_conf"'' \
               > $httpd_conf

               #test -e $tmp-httpd_conf && rm $tmp_httpd_conf
        fi
done
exit 0
./admin/createwebsite.sh
========================================
#!/bin/ksh 
# createwebsite.sh - Create a web site within Apache 2.2
#
# SM, 29 Sept 2006, initial version, from Apache2 by AK
# SM, 02 Aug 2007, Updated to reflect correct version of apache i.e 2.2.4 
# RR, 09 Jan 2008, Updated to reflect correct version of apache i.e 2.2.6 
# SM, 01 Apr 2009, Updated to create a conf.d directory and touch <website>_jk.conf during website creation  
#	           for separating the jk module configuration from Apache configuration 	
# SM, 15 Jun 2009, Updated the default port numbering of the apache websites.
# MA, 23 Jan 2011, Update apache version to 2.2.17, OpenSSL to 0.9.8q
# AC, 08 Oct 2013, Added rotatelog feature
# RR, 11 Jan 2015, Update apache version to 2.2.29, OpenSSL to 1.0.1j
# Platform specific things

case `uname -s` in
	Linux)
		whoami=whoami
                unalias rm mv cp
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		;;
	AIX)
		whoami=whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -website website  new website name"
	print "                         (default: none, must be specified)"
	print "       -servername name  server name"
	print "                         (default: auto determine hostname)"
	print "       -userid userid    UNIX userid to run httpd child processes"
	print "                         must not be root, although parent process will run as"
	print "                         root if the web server is listening on a port < 1024"
	print "                         (default: current userid)"
	print "       -bind ip          HTTP to listen on what IP address"
	print "                         (default: all)"
	print "       -port port        HTTP port"
        test $inst != web && print "                         (default: 8800+<inst>*10+websitecount*2)"
        test $inst = web && print "                         (default: 8800)"
	print "       -sslbind ip       HTTPS to listen on what IP address"
	print "                         (default: all)"
	print "       -sslport port     HTTPS port"
	print "                         (default: 8801)"
	print "       -sslcert name     use <name>.pem and <name>.cer"
	print "                         (default: first part of <servername>)"
	print "       -docroot dir      document root directory"
	print "                         (default: <apache22_ROOT>/htdocs/<website>)"
	print "       -rotatelog flag   true or false"
	print "                         (default: true)"
	print "       -rotatelogtime s  time in second"
	print "                         (default: 86400)"
	print "       -modules m1,m2    index,proxy,dav,perl,php"
	print "                         (default: none)"
	print "       -manual flag      include /manual in site, true or false"
	print "                         (default: false)"
	print "       -autostart flag   autostart, true or false"
	print "                         (default: true)"
	print "       -rootparent flag  start parent process as root, true or false"
	print "                         (default: false)"
	print "       -mpm mpm          MPM selection"
	print "                         (default: worker)"
	print "       -quiet flag       create quietly, true or false"
	print "                         (default: false)"
	exit 2
	}

# How to process a template to make a specific web site

subs_website()
	{
	sed \
		-e "s?#APACHE22_ROOT#?$apache22_root_dir?" \
		-e "s?#APACHE22_SITE_PREFIX#?$apache22_site_dir_prefix?" \
		-e "s?#SERVERNAME#?$servername?" \
		-e "s?#WEBSITE#?$website?" \
		-e "s?#BIND#?$bind?" \
		-e "s?#PORT#?$port?" \
		-e "s?#LISTEN#?$listen?" \
		-e "s?#SSLBIND#?$sslbind?" \
		-e "s?#SSLPORT#?$sslport?" \
		-e "s?#SSLLISTEN#?$ssllisten?" \
		-e "s?#SSLCERT#?$sslcert?" \
		-e "s?#DOCROOT#?$docroot?" \
		-e "s?#USERID#?$ch_userid?" \
		-e "s?#GROUP#?$pgroup?" \
		-e "s?#AUTOSTART#?$autostart?" \
		-e "s?#ROOTPARENT#?$rootparent?" \
		-e "s?#MPM#?$mpm?" \
		-e "s?#ROTATELOG_F#?$rotatelog_f?" \
		-e "s?#ROTATELOG_T#?$rotatelog_t?" \
		-e "s?#ROTATELOGTIME#?$rotatelogtime?" \
                -e "s?#LOGROOT#?$logroot?"
	}

# Where is everything

scriptDir=`dirname $0`

# Go fetch all the variables needed for this script
. $scriptDir/apacheutil.conf
. $apc_enggutils_dir/utility/utilcommon.sh

determine_apache22_root_dir
determine_apache22_site_dir
check_apache22_site_dir_writeable

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

websitecount=0
for conf in $apache22_site_dir/conf/*.conf ; do
    if [[ -r $conf ]] ; then
            websitecount=$(( websitecount + 1 ))
    fi
done

website=
servername=
ch_userid=`$whoami`
bind=
test $inst != web && port=$(( $inst * 10 + $websitecount * 2 + 8800))
test $inst = web && port=8800
sslbind=
sslport=
test $inst = web && sslport=8801
sslcert=
docroot=
rotatelog=true
rotatelogtime=86400
modules=
manual=false
autostart=true
rootparent=false
mpm=worker
quiet=false
version=`grep "^Product version:" ${scriptDir}/version.txt | awk -F: '{printf("%s\n",$2)}' | sed 's/ //'`
# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-w*)		website=$2 ;;
		-se*)		servername=$2 ;;
		-u*)		ch_userid=$2 ;;
		-b*)		bind=$2 ;;
		-p*)		port=$2 ;;
		-sslb*)		sslbind=$2 ;;
		-sslp*)		sslport=$2 ;;
		-sslc*)		sslcert=$2 ;;
		-do*)		docroot=$2 ;;
	        -rotatelog)     rotatelog=$2 ;;
	        -rotatelogtime) rotatelogtime=$2 ;;
		-mo*)		modules=$2 ;;
		-ma*)		manual=$2 ;;
		-a*)		autostart=$2 ;;
		-rootparent)	rootparent=$2 ;;
		-mp*)		mpm=$2 ;;
		-q*)		quiet=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$website" = "" ]] ; then
	usage
fi

if [[ "$servername" = "" ]] ; then
	determine_fq_host_name
	servername=$fq_host_name
fi

if [[ "$sslcert" = "" ]] ; then
	sslcert=${servername%%.*}
fi

if [[ "$docroot" = "" ]] ; then
	docroot=$apache22_site_dir/htdocs/$website
fi

case $rotatelog in
  true) 
        rotatelog_t=""
        rotatelog_f="#"
        ;;
  false) 
        rotatelog_t="#"
        rotatelog_f=""
        ;;
  *)
        usage
        ;;
esac

if [[ "$autostart" != "true" && "$autostart" != "false" ]] ; then
	usage
fi

if [[ "$rootparent" != "true" && "$rootparent" != "false" ]] ; then
	usage
fi

if [[ ! -x $apache22_root_dir/bin/apachectl_$mpm || \
      ! -x $apache22_root_dir/bin/httpd_$mpm     ]] ; then
	print "$0: $mpm is not a valid MPM"
	exit 10
fi

listen=$port
if [[ "$bind" != "" ]] ; then
	listen=$bind:$listen
fi

ssllisten=
if [[ "$sslport" != "" ]] ; then
	ssllisten=$sslport
	if [[ "$sslbind" != "" ]] ; then
		ssllisten=$sslbind:$ssllisten
	fi
fi

if [[ "$sslport" != "" && "$servername" = "" ]] ; then
	print "$0: when using SSL, a fully qualified servername must be specified"
	exit 11
fi

if [[ "$1" != "" ]] ; then
	usage
fi

# Check required userids and groups exists

if [[ $ch_userid = root ]] ; then
	print "$0: root should not be used to own and run Apache 2.2 child processes"
	exit 12
fi

check_userid $ch_userid

# Need to be sure selected user can write to the logs directory.
# Checking $ch_userid is a member of $group isn't a good way to check this.
# In a DAM environment, $ch_userid could be unrelated to $group.
if [[ $ch_userid = `$whoami` ]] ; then
	if [[ ! -d $apache22_site_dir/logs || ! -w $apache22_site_dir/logs ]] ; then
		print "$0: $ch_userid cannot write to $apache22_site_dir/logs"
		exit 12
	fi
else
	# at the moment we don't validate the user can write the logs here
	# things will fall over later
	true
fi

get_primary_group $ch_userid

# Do it

c=$apache22_site_dir/conf/$website.conf
if [[ -r $c ]] ; then
	print "$0: $c already exists"
	exit 13
fi

# If the sites configuration is external to the install (typical DAM
# configuration), then we can't get away with relative paths in the .conf file

if [[ "$apache22_root_dir" = "$apache22_site_dir" ]] ; then
	apache22_site_dir_prefix=
else
	apache22_site_dir_prefix=$apache22_site_dir/
fi

# Generate initial version

subs_website < $apc_enggutils_dir/admin/httpd.conf-template > $c

# Ensure it only has the right SSL or non-SSL parts

if [[ "$sslport" != "" ]] ; then
	sed -e "s?^#vsslv#??" -e "/^#vv#/d" < $c > $c-new
else
	sed -e "s?^#vv#??" -e "/^#vsslv#/d" < $c > $c-new
fi
mv $c-new $c

# Remove proxy modules?

if [[ ",$modules," != *,proxy,* ]] ; then
	sed -e "s?^\(LoadModule proxy_.*\)?#\1?" < $c > $c-new
	mv $c-new $c
fi

# Remove dav modules?

if [[ ",$modules," != *,dav,* ]] ; then
	sed -e "s?^\(LoadModule dav_.*\)?#\1?" < $c > $c-new
	mv $c-new $c
fi

# Remove perl module?

if [[ ",$modules," != *,perl,* ]] ; then
	sed -e "s?^\(LoadModule perl_.*\)?#\1?" < $c > $c-new
	mv $c-new $c
else
	if [[ `uname -s` = SunOS && ! -d $apache22_root/perl5 ]] ; then
		print "Warning: You are running on Solaris"
		print "         The default Perl supplied with Solaris isn't multithreaded"
		print "         You didn't install the multithreaded Perl within Apache"
		print "         Apache 2.2 (worker or prefork) mod_perl.so needs a multithreaded Perl"
		print "         You have asked to use mod_perl.so in this site"
	fi
fi

# Remove php module and associated type?

if [[ ",$modules," != *,php,* ]] ; then
	sed -e "s?^\(LoadModule php5_.*\)?#\1?" \
	    -e "s?^\(AddType application/x-httpd-php .*\)?#\1?" < $c > $c-new
	mv $c-new $c
fi

# Enable or comment out indexing related stuff

if [[ ",$modules," = *,index,* ]] ; then
	sed -e "s?^#index#??" < $c > $c-new
else
	sed -e "s?^#index#?#?" < $c > $c-new
fi
mv $c-new $c

# Enable or comment out manual

if [[ "$manual" = "true" ]] ; then
	sed -e "s?^#manual#??" < $c > $c-new
else
	sed -e "s?^#manual#?#?" < $c > $c-new
fi
mv $c-new $c

# Protect the file

chmod 644 $c

# Create the Website Document Root

mkdir -p $docroot

if [[ -d $docroot && -w $docroot ]] ; then
   if [[ $inst != "web" ]] ; then
	print "
<HTML>
<HEAD>
<TITLE>Apache $version instance $inst website $website</TITLE>
</HEAD>
<BODY>
<H1>Apache $version instance $inst website $website</H1>
<P>Welcome to the default home page of Apache $version.
</BODY>
</HTML>
" >> $docroot/index.html
   elif [[ $inst == "web" ]] ; then
        print "
<HTML>
<HEAD>
<TITLE>Apache $version instance website $website</TITLE>
</HEAD>
<BODY>
<H1>Apache $version instance website $website</H1>
<P>Welcome to the default home page of Apache $version.
</BODY>
</HTML>
" >> $docroot/index.html
  fi
else
	print "Warning: not able to create/access $docroot"
fi

# Create conf.d directory in the $apache22_root_dir if it does not already exist and touch <website>_jk.conf file
mkdir -p $apache22_root_dir/conf.d
chmod 755 $apache22_root_dir/conf.d
touch $apache22_root_dir/conf.d/${website}_jk.conf
chmod 644 $apache22_root_dir/conf.d/${website}_jk.conf

chmod 644 $c
# These should already be there

mkdir -p $apache22_site_dir/conf
mkdir -p $apache22_site_dir/logs
mkdir -p $apache22_site_dir/cgi
chmod g+w $apache22_site_dir/logs

# If using SSL, make a certificate if none exists

if [[ "$sslport" != "" ]] ; then
	if [[ ! -r $apache_site_dir/conf/$sslcert.pem ]] ; then
		print "Warning: making self signed certificate for testing purposes"
		$apc_enggutils_dir/security/makecert.sh -servername $servername -sslcert $sslcert
	fi
fi

if [[ $docroot = $apache22_root_dir/* ]] ; then
	print "Warning: The document root is below the Apache install directory"
	print "         The Web Server Standards/Policy document says that the default web"
	print "         site should not reside in the same volume as the operating system,"
	print "         program files or administrative files"
fi

# Handy information

if [[ "$quiet" = "false" ]] ; then
	print "Website $website created."
	print "Further customise by editing $c"
	print "Start using apache22.sh start $website"
fi

exit 0
./admin/apache22.sh
========================================
#!/bin/ksh
#
# apache22.sh - look after Apache 2.2
#
# This script can be invoked by an initscript, or by hand.
#
# By default it considers all web sites, with a .conf file with autostart=true
# in it, unless specific website name(s) are specified.
#
# Some examples of what userid this script can be run under
#   webuser:webgroup   normal web site, listening >= 1024
#   webuser2:webgroup  ditto, except maybe webuser2 has fewer write permissions
#   root:other         web site or admin server listening < 1024
#
# When starting a site, it housekeeps the logs referred to by <website>.conf.
#
# When determining the status of a web site, the "apachectl status" command
# isn't appropriate as it depends upon lynx, so we use ps and grep.
#
# We start web servers using the syntax
#   $HTTPD -DSSL -k start -f /local/apache22/0/conf/site.conf
# So a grep will find servers started by this script and the admin server.
#
# This version is DAMable, as it uses determine_functions.
# The /etc/init.d/apache22.<inst> file needn't be DAMable.
#
# SM, Sept 29, Initial version from Apache2 by AK
#

# Platform specific things

case `uname -s` in
	Linux)
		whoami=whoami
		ps='ps auxwww'
		awk=awk
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		ps='/usr/ucb/ps auxwww'
		awk=nawk
		;;
	AIX)
		whoami=whoami
		ps='ps -ef'
		awk=awk
		;;
	*)
		print "$0: unsupported platform"
		exit 10
		;;
esac

# Usage

usage()
	{
	print "usage: $0 ( start | stop | gracefulstop | restart | status ) {website}"
	exit 2
	}

# Make an attempt to keep log files from growing indefinitely.

log_limit()
	# $1=logfile
	# $2=if_more_than
	# $3=then_trim_to
	{
	if [[ -r $1 && `wc -l < $1` -gt $2 ]] ; then
		tail -$3 $1 > $1-limited
		mv $1-limited $1
	fi
	}

# Determine Apache log files in httpd.conf file

logfiles()
	{
	$awk '\
		/^ErrorLog / { print $2 ; } \
		/^CustomLog / { print $2 ; } \
		'
	}

# Determine parent process runtime userid

whichuser()
	{
	$awk '\
		BEGIN \
			{ \
			user="nobody" ; \
			} \
		/^Listen / \
			{ \
			l = $2; \
			if ( i = index(l, ":") ) \
				l = substr(l, i+1) ; \
			if ( 0 + l < 1024 ) \
				user="root" ; \
			} \
		/^User / \
			{ \
			if ( user != "root" ) \
				user=$2 ; \
			} \
		/^# rootparent=true/ \
			{ \
			user="root" ; \
			} \
		END \
			{ \
			print user ; \
			} \
		'
	}

# See if the supplied web site name is valid, and set $c.

check_website()
	# $1=website
	{
	c=$apache22_site_dir/conf/$1.conf
	if [[ ! -r $c ]] ; then
		print "$0: $c not readable"
		exit 11
	fi
	}

# Check to make sure this script is being run under the correct userid.
# Avoid root user starting web servers that listen >= 1024 and don't need it.
# Avoid other users trying to start web servers listening < 1024.

check_id()
	# $1=website
	{
	parent=`whichuser < $c`
	me=`$whoami`
	if [[ "$parent" != "$me" ]] ; then
		print "$0: please administer $1 as $parent, not $me"
		exit 12
	fi
	}

# Determine MPM

which_mpm()
	# $1=website
	{
	mpm=`sed -n "s/^# *mpm=\([^# ]*\)/\1/p" < $apache22_site_dir/conf/$1.conf`
	if [[ "$mpm" != "" ]] ; then
		apachectl_mpm=apachectl_$mpm
		httpd_mpm=httpd_$mpm
		if [[ ! -x $apache22_root_dir/bin/$apachectl_mpm || \
		      ! -x $apache22_root_dir/bin/$httpd_mpm     ]] ; then
			print "$0: $mpm is not a valid MPM"
			exit 13
		fi
	else
		apachectl_mpm=apachectl
		httpd_mpm=httpd
	fi
	}	

# Start a website
# Returns 0 if started ok, non-0 otherwise

start_website()
	# $1=website
	{
	check_website $1
	check_id $1
	which_mpm $1
	for l in `logfiles < $c` ; do
		log_limit $apache22_site_dir/$l 10000 11000
	done
	$apache22_root_dir/bin/$apachectl_mpm -DSSL -k start -f $c
	}

# Stop a website
# Returns 0 if stopped ok, non-0 otherwise

stop_website()
	# $1=website
	{
	check_website $1
	check_id $1
	which_mpm $1
	$apache22_root_dir/bin/$apachectl_mpm -k stop -f $c
	rc_stop=$?
	
	# Processes may not vanish immediately, allow 10s
	delay=
	while [[ "$delay" != "xxxxxxxxxx" ]] ; do
		status_website $1
		if [[ $? -ne 0 ]] ; then
			break
		fi
		delay="x$delay"
		sleep 1
	done
	if [[ "$delay" = "xxxxxxxxxx" ]] ; then
		rc_stop=1
	fi

	# Web server parent may have been running as root.
	# To make it easier for the web master, change the ownership
	for l in `logfiles < $c` ; do
		chown $userid:$group $apache22_site_dir/$l 2> /dev/null
	done
	chown $userid:$group $apache22_site_dir/corefiles/* 2> /dev/null

	return $rc_stop
	}
	
# Stop a website
# Returns 0 if stopped ok, non-0 otherwise

gracefulstop_website()
	# $1=website
	{
	check_website $1
	check_id $1
	which_mpm $1
	$apache22_root_dir/bin/$apachectl_mpm -k graceful-stop -f $c
	rc_stop=$?
	
	# Processes do not vanish immediately and will wait till all the requests are processed or
	# timeout specified by GracefulshutdownTimeout has been reached, Hardcoded to wait 45s in the script 
	# print msg with instructions if GracefulshutdownTimeout is not set or set to more than 45s and process is still running
	delay=
	while [[ "$delay" != "xxxxxxxxx" ]] ; do
		status_website $1
		if [[ $? -ne 0 ]] ; then
			break
		fi
		delay="x$delay"
		sleep 5
	done
	if [[ "$delay" = "xxxxxxxxx" ]] ; then
		rc_stop=1
	fi

	# Web server parent may have been running as root.
	# To make it easier for the web master, change the ownership
	for l in `logfiles < $c` ; do
		chown $userid:$group $apache22_site_dir/$l 2> /dev/null
	done
	chown $userid:$group $apache22_site_dir/corefiles/* 2> /dev/null

	return $rc_stop
	}

# Status of a website
# Returns 0 if one or more processes running, non-0 otherwise

status_website()
	# $1=website
	{
	check_website $1
	which_mpm $1
	httpd="${apache22_root_dir%/}/bin/$httpd_mpm -DSSL -k start -f $c"
	if [[ `$ps | grep -v grep | grep -c "$httpd"` -eq 0 ]] ; then
		return 1
	else
		return 0
	fi
	}

# Affected websites
# If no website is specified, consider all websites which have a readable
# .conf file, and the autostart=true flag in them.
# Note that if there are none then $conf could remain unexpanded as path/*.conf
# but luckily the -r test will prevent us considering a site called *

affected_websites()
	# $1=websites or ""
	{
	if [[ "$1" = "" ]] ; then
		websites=
		for conf in $apache22_site_dir/conf/*.conf ; do
			if [[ -r $conf ]] ; then
				if [[ `grep -c "# *autostart=true" $conf` -gt 0 ]] ; then
					website=`basename $conf .conf`
					websites="${websites}${website} "
				fi
			fi
		done
		print $websites
	else
		print "$*"
	fi
	}

# Where is everything

scriptDir=`dirname $0`

# Go fetch all the variables and functions needed for this script

. $scriptDir/apacheutil.conf
. $apc_enggutils_dir/utility/utilcommon.sh

# Main

action=$1
if [[ "$action" = "" ]] ; then
	usage
fi
shift

umask 022

#

determine_apache22_root_dir
determine_apache22_site_dir

rc=0

websites=`affected_websites "$*"`

case $action in
	start)
		for website in $websites ; do
			test $inst = "web" && m="Apache 2.2 instance website $website"
			test $inst != "web" && m="Apache 2.2 instance $inst website $website"
			status_website $website
			if [[ $? -eq 0 ]] ; then
				print "$m is already running"
			else
				print "$m starting"
				start_website $website
				case $? in
					0) print "$m started" ;;
					*) print "$m encountered an error during startup" ; rc=1 ;;
				esac
			fi
		done
		;;
	stop)
		for website in $websites ; do
			test $inst = "web" && m="Apache 2.2 instance website $website"
			test $inst != "web" && m="Apache 2.2 instance $inst website $website"
			status_website $website
			if [[ $? -eq 0 ]] ; then
				print "$m stopping"
				stop_website $website
				case $? in
					0) print "$m stopped" ;;
					*) print "$m cannot stop" ; rc=1 ;;
				esac
			else
				print "$m is already not running"
			fi
		done
		;;
	gracefulstop)
			for website in $websites ; do
			/bin/cp $apache22_root_dir/logs/$website.pid $apache22_root_dir/logs/bk_$website.pid
			        test $inst = "web" && m="Apache 2.2 instance website $website"
			        test $inst != "web" && m="Apache 2.2 instance $inst website $website"
				status_website $website
				if [[ $? -eq 0 ]] ; then
					print "$m stopping"
					gracefulstop_website $website
					case $? in
						0) print "$m stopped Gracefully" 
						   /bin/rm $apache22_root_dir/logs/bk_$website.pid;;
						*) print "$m Some requests are still being Serviced. Please check the status after sometime and try apache2.sh with stop option " ;
						   mv $apache22_root_dir/logs/bk_$website.pid $apache22_root_dir/logs/$website.pid
						   rc=1 ;;
					esac
				else
					print "$m is already not running"
				fi
			done
		;;
	restart)
		$scriptDir/apache22.sh stop  $websites
		$scriptDir/apache22.sh start $websites
		;;
	status)
		for website in $websites ; do
			test $inst = "web" && m="Apache 2.2 instance website $website"
			test $inst != "web" && m="Apache 2.2 instance $inst website $website"
			status_website $website
			case $? in
				0) print "$m running" ;;
				*) print "$m not running" ;;
			esac
		done
		;;
	*)
		usage
		;;
esac

exit $rc
./admin/sigfile-refresh.sh
========================================
#!/bin/ksh
#set -x
# update some of the fields in an existing sugnature file

# AC, 14 Jun 2011, initial version 

case `uname -s` in
  Linux)
         whoami=whoami
         unalias rm mv cp
         ;;
  SunOS)
         whoami=/usr/ucb/whoami
         ;;
  AIX)
         whoami=whoami
         ;;
  *)
         print "$0: unsupported platform"
         exit 1
         ;;
esac

usage() {
        print "usage: $0 [product] [Signaturefile]"
        print "product: server | php | perl | siteminder | apache | tomcat"
        exit 2
}

validate_sig_file() {
        # $1 absolute path of signaturefile
        #
        print -n "Validating Signaturefile [$1]... "
        # if [ `grep -c "^Web Products Signature File$" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Web Products Signature File\"" ; exit 1 ; fi
        if [ `grep -c "^Product:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product:\"" ; exit 1 ; fi
        if [ `grep -c "^Product Version:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Version:\"" ; exit 1 ; fi
        if [ `grep -c "^Product Architecture:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Architecture:\"" ; exit 1 ; fi
        if [ `grep -c "^Product Install Date:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Install Date:\"" ; exit 1 ; fi
        if [ `grep -c "^Product Installation Path:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Installation Path:\"" ; exit 1 ; fi
        if [ `grep -c "^Product Owner:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Product Owner:\"" ; exit 1 ; fi
        if [ `grep -c "^Patch Level/Fix Pack Level:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"Patch Level/Fix Pack Level:\"" ; exit 1 ; fi
        if [ `grep -c "^File Update Data Stamp:" $1` -eq 0 ] ; then print "Invalid file.  Missing line \"File Update Data Stamp:\"" ; exit 1 ; fi
        print "ok"
}

ws7_update_signature_file() {
	Sigfile=$1

	if [ -f $Sigfile ] && [ -w $Sigfile ] ; then
	  Sigfile_SAV=${Sigfile}_sav
	  Sigfile_TMP1=${Sigfile}_tmp1.$$
	  Sigfile_TMP2=${Sigfile}_tmp2.$$

	  BAD_CONDITION=0

	  prdt_path=`grep -i "^[ 	]*Product Installation Path:" $Sigfile | head -1 | awk -F: '{printf("%s\n",$2)}' |  sed 's/ //g'`

	  if [ ! -d "$prdt_path" ] || [ "$prdt_path" = "" ] ; then
	    echo "Invalid Signature file ${Sigfile}. Cannot see \"Product Installation Path:\".  Please Investigate."
	    BAD_CONDITION=1
	  fi

	  if [ ! -x ${prdt_path}/bin/httpd ] ; then
	    print "Cannot run ${prdt_path}/bin/httpd. Please Investigate"
	    BAD_CONDITION=1
	  fi

	  case `uname -s` in
	    AIX | Linux) 
              i=`${prdt_path}/java/jre/bin/java -version 2>&1 | grep -c " J2RE "`
              if [ $i -eq 0 ] ; then
                jdk_dtls=" JRE "
              else
                jdk_dtls=" J2RE "
              fi
	      ;;
	    SunOS) 
	      jdk_dtls="IBM build"
	      ;;
	  esac
	  if [ "$jdk_dtls" = "" ] ; then jdk_dtls="^Java(TM)" ; fi

	  if [ $BAD_CONDITION -eq 0 ] ; then

	    # work on temporary version
	    cp -p $Sigfile $Sigfile_TMP1
	    # preserve permission of TMP2
	    cp -p $Sigfile $Sigfile_TMP2

	    if [ `grep -c "^[ 	]*Product:" $Sigfile_TMP1` -eq 0 ] ; then
	      echo "Product version: Unknown" >> $Sigfile_TMP1
	    fi
	    old_version1=`grep -i "^[ 	]*Product version:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
	    old_version2=`grep -i "^[ 	]*Product version:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`
	    LD_LIBRARY_PATH=${prdt_path}/lib:$LD_LIBRARY_PATH
            export LD_LIBRARY_PATH
	    prdt_version=`${prdt_path}/bin/httpd -v | grep "^Server version:" | awk '{print $3}' |  cut -d"/" -f2`	

	    if [ `grep -c "^[ 	]*Patch Level/Fix Pack Level:" $Sigfile_TMP1` -eq 0 ] ; then 
	      echo "Patch Level/Fix Pack Level: Unknown" >> $Sigfile_TMP1
	    fi
	    #old_patch1=`grep -i "^[ 	]*Patch Level/Fix Pack Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
	    #old_patch2=`grep -i "^[ 	]*Patch Level/Fix Pack Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`

            old_patch1=`grep -i "^[   ]*Patch Level/Fix Pack Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
            old_patch2=`grep -i "^[   ]*Patch Level/Fix Pack Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`

	    if [ `grep -c "^[ 	]*File Update Data Stamp:" $Sigfile_TMP1` -eq 0 ] ; then 
	      echo "File Update Data Stamp: Unknown" >> $Sigfile_TMP1
	    fi
	    old_datestamp1=`grep -i "^[ 	]*File Update Data Stamp:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
	    old_datestamp2=`grep -i "^[ 	]*File Update Data Stamp:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`
	    newdatestamp=`date`

            sed \
            -e "s/${old_version1}\:${old_version2}/${old_version1}\:\ ${prdt_version}/" \
            -e "s/${old_patch1}\:${old_patch2}/${old_patch1}\:\ ${prdt_version}/" \
            -e "s/${old_datestamp1}\:${old_datestamp2}/${old_datestamp1}\:\ ${newdatestamp}/" \
	    $Sigfile_TMP1 > $Sigfile_TMP2

	    print "Signature file refreshed.."
	    diff $Sigfile_TMP1 $Sigfile_TMP2

	    cp -p ${Sigfile} ${Sigfile_SAV}
	    mv ${Sigfile_TMP2} ${Sigfile}

	    if [ $? -eq 0 ] ; then 
	      rm ${Sigfile_SAV}
	      rm $Sigfile_TMP1
	    else
	      print "Fail to update ${Sigfile}. Please investigate"
	    fi
	  else
	    print "Signaturefile ${Sigfile} is not updated"
	  fi
	else
	  print "Cannot update ${Sigfile}. Please investigate."
	fi
}

#########
## main
#########

if [ "$2" == "" ] ; then
  usage
elif [ ! -f "$2" ] ; then
  print "Invalid file"
  exit 1
fi

SignatureFile=$2
validate_sig_file $SignatureFile

if [ -w $SignatureFile ] ; then
  case $1 in
    server | Perl | siteminder | PHP | Apache2.2 ) ws7_update_signature_file $SignatureFile ;;
    siteminder | apache | tomact ) print "Sorry this script is not supporting this product yet" ;;
    *)  print "Invalid product" ;;
  esac
else
  print "Cannot update $SignatureFile"
  exit 1
fi
./conf/genupgradeapacheconf.sh
========================================
#!/bin/ksh
#set -x
#=================================================================================================
# genupgradeapacheconf.sh
#
# Description:
# Generate the required configuration details for the  apache2.2 upgrade 
#
# Input Parameters: See usage
#
# Revison History:
# RR    02 Sep 2011    Created for apache2.2 upgrade process
#=================================================================================================

   
scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="$scriptDir/.."
   export baseDir


# Defaults
configpath=/tmp
installmedia=${baseDir}/install/media

#Ask for the path where the conf file resides. 

	usage()
        	{
        		print "usage: $0 {flags}"
        		print "       -configpath  config      Path of config file"
        		print "                                (default:/tmp)"
        		exit 2
        }

	while [[ "$1" != "" ]] ; do
        	case $1 in
                	-configpath)        configpath=$2 ;;
                          	  *)        usage ;;
        	esac
        	shift 2
        done

	if [[ "$configpath" = "" ]] ; then
        	usage
     	fi

	if [[ ! -d "$configpath" ]] ; then
        	usage
     	fi

# Fetch the required utility scripts
. $baseDir/utility/utilcommon.sh

 #Remove any previous conf file
 rm -rf $configpath/upgradeapache22.conf
  print "*****************Set Install Parameters**********************"

	prompt_def "Skip Pre-Check for all modules. Default" "false"
	skipprechk="$repl"
		print "skipprechk='$skipprechk'" > $configpath/upgradeapache22.conf
		print ""

       prompt_def "Is this a web pattern Apache upgade at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#
	prompt_def "Enter Instance Number. Default" "0"
	inst="$reply"
		print "inst='$inst'" > $configpath/upgradeapache22.conf
		print ""

	prompt_def "Apache 2.2 Install directory. Default" "/local/apache22/$inst"
	apache22_root="$reply"
		print "apache22_root='$apache22_root'" >> $configpath/upgradeapache22.conf
		print ""

	prompt_def "Apache 2.2 Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
	apc_enggutils_dir="$reply"
		print "apc_enggutils_dir='$apc_enggutils_dir'" >> $configpath/upgradeapache22.conf
		print ""

else
#
# web pattern
#
        print "inst='$wp_inst'" >> $configpath/upgradeapache22.conf
        print "apache22_root='$wp_root_dir'" >> $configpath/upgradeapache22.conf
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $configpath/upgradeapache22.conf
fi
 	prompt_def "Apache 2.2 Version. Default" "2.2.29"
        version="$reply"
                print "version='$version'" >> $configpath/upgradeapache22.conf
                print ""

        prompt_def "Apache JPMC version number.Default" "0"
        jpmcversion="$reply"
                print "jpmcversion='$jpmcversion'" >> $configpath/upgradeapache22.conf
                print ""

	prompt_def "Media directory. Default" "${installmedia}"
	media="$reply"
		print "media='$media'" >> $configpath/upgradeapache22.conf
		print ""

	prompt_def "UNIX userid to own installation. Default" "webuser"
	userid="$reply"
		print "userid='$userid'" >> $configpath/upgradeapache22.conf
		print ""

	prompt_def "UNIX group to own installation. Default" "webgroup"
	group="$reply"
		print "group='$group'" >> $configpath/upgradeapache22.conf
		print ""

        prompt_def "Allow running as root.Default" "false"
        rootok="$reply"
                print "rootok='$rootok'" >> $configpath/upgradeapache22.conf
                print ""

	prompt_def "Option to upgrade 64 bit Apache. Default" "true"
        m64mode="$reply"
                print "m64mode='$m64mode'" >> $configpath/upgradeapache22.conf
                print ""

        prompt_def "Option action, one check, install.Default" "install"
        action="$reply"
                print "action='$action'" >> $configpath/upgradeapache22.conf
                print ""

        prompt_def "Option for install quietly, true or false.Default" "false"
        xopts="$reply"
                print "xopts='$xopts'" >> $configpath/upgradeapache22.conf
                print ""

        prompt_def "Directory for temporary files.Default" "/tmp"
        temp_dir="$reply"
                print "temp_dir='$temp_dir'" >> $configpath/upgradeapache22.conf
                print ""

   print "INFO: Configuration file generated on $configpath/upgradeapache22.conf"
   print "INFO:  Next step: cd ${baseDir}/upgrade and start the upgrade process by executing run.sh with specified options"

./conf/genjanusconf.sh
========================================
#!/bin/ksh
#set -x
#=================================================================================================
# genjanusconf.sh
#
# Description:
# Generate the required configuration details for the Janus/Apache installation
#
# Input Parameters: See usage
#
# Revison History:
# RR    25 Aug 2011    Initial version
#=================================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
  scriptDir=$PWD
fi

baseDir="$scriptDir/.."
export baseDir

# Utility needed for this script
. $baseDir/utility/utilcommon.sh

# Defaults
installmedia="${baseDir}/install/media/../janusweb"
cd -P "$installmedia"
installmedia=$PWD
cd $scriptDir
conf="installjanus.conf"

#Ask for the path where the conf file resides. 
prompt_def "Please specify the temporary directory for configuration $conf. Default" "/tmp"
configpath="$reply"

if [[ ! -d "$configpath" ]] ; then
  print "Directory doesn't not exist"
  exit 1
fi

#remove any previous conf file
rm -f $configpath/installjanus.conf
outfile=$configpath/installjanus.conf

if [[ -f $outfile ]] ; then
  print "$configpath/$conf already exist."
  print "Please ensure this is not use by other installation."
  print "Remove this file before rerunning this script"
  exit 1
else
  echo "" > $outfile
  if [ $? -ne 0 ] ; then 
    print "Cannot write to $outfile"
    exit 1
  fi
fi
	print ""
	print "*****************Set Install Parameters**********************"

	prompt_def "Skip Pre-Check for all modules. Default" "false"
	skipprechk="$reply"
		print "skipprechk='$skipprechk'" >> $outfile
		print ""

       prompt_def "Is this a web pattern installation at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#
        prompt_def "Enter Instance Number of the Apache installation. Default" "0"
        inst="$reply"
                print "inst='$inst'" >> $outfile
                print ""

        prompt_def "Apache Install directory. Default" "/local/apache22/$inst"
        apache22_root="$reply"
                print "apache22_root='$apache22_root'" >> $outfile
                print ""

        prompt_def "Apache Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
        apc_enggutils_dir="$reply"
		print "apc_enggutils_dir='$apc_enggutils_dir'" >> $outfile
		print ""

else
#
# web pattern
#

        print "inst='$wp_inst'" >> $configpath/installjanus.conf
        print "apache22_root='$wp_root_dir'" >> $configpath/installjanus.conf
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $configpath/installjanus.conf

fi

	prompt_def "User Id to own installation. Default" "webuser"
        userid="$reply"
                print "userid='$userid'" >> $outfile
                print ""

        prompt_def "Group to own installation. Default" "webgroup"
        group="$reply"
                print "group='$group'" >> $outfile
                print ""
	
	prompt_def "Janus version. Default" "3.8.0.0"
	jwversion="$reply"
		print "jwversion='$jwversion'" >> $outfile
		print ""

	prompt_def "Media directory. Default" "$installmedia"
	media="$reply"
		print "media='$media'" >> $outfile
		print ""

        prompt_def "Option for init scripts.Default" "true"
        initscripts="$reply"
                print "initscripts='$initscripts'" >> $configpath/installjanus.conf
                print ""
      
	prompt_def "Directory for temporary files. Default" "/tmp"
	temp_dir="$reply"
		print "temp_dir='$temp_dir'" >> $outfile
		print ""

	prompt_def "Install quietly, true or false. Default" "false"
	quiet="$reply"
		print "quiet='$quiet'" >> $outfile
		print ""
if [[ "$isPattern" == "true" ]] ; then

        print ""
        print "Remark:"
        print "$conf now adopts latest web pattern on the installation path and runtime account"
        print "================================================================"
        print "Installation Path - $wp_root_dir/janusweb"
        print "Runtime account - $userid : $group"
        print "Instance number is $wp_inst "
        print "For backward compatibility to support legacy deployment"
        print "Please update the installation config file ($conf) with the inst variable other than . with the customized installation path "
        print "================================================================"
        print ""
fi

       print "INFO: Configuration file generated."
       print "INFO: Next step: cd ${baseDir}/install and start the install process by executing run.sh"
./conf/genapacheconf.sh
========================================
#!/bin/ksh
#=================================================================================================
# genapacheconf.sh
#
# Description:
# Generate the required configuration details for the  apache2.2 installation
#
# Input Parameters: See usage
#
# Revison History:
# MA    11 Mar 2011    Created for apache2.2 install process
#=================================================================================================

   
scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="$scriptDir/.."
   export baseDir


# Defaults
configpath=/tmp
installmedia=${baseDir}/install/media

conf="installapache22.conf"

#Ask for the path where the conf file resides. 

	usage()
        	{
        		print "usage: $0 {flags}"
        		print "       -configpath  config      Path of config file"
        		print "                                (default:/tmp)"
        		exit 2
        }

	while [[ "$1" != "" ]] ; do
        	case $1 in
                	-configpath)        configpath=$2 ;;
                          	  *)        usage ;;
        	esac
        	shift 2
        done

	if [[ "$configpath" = "" ]] ; then
        	usage
     	fi

	if [[ ! -d "$configpath" ]] ; then
        	usage
     	fi

# Fetch the required utility scripts
. $baseDir/utility/utilcommon.sh

 #Remove any previous conf file
 rm -rf $configpath/installapache22.conf
  print "*****************Set Install Parameters**********************"

	prompt_def "Skip Pre-Check for all modules. Default" "false"
	skipprechk="$reply"
		print "skipprechk='$skipprechk'" >> $configpath/installapache22.conf
		print ""

       prompt_def "Is this a web pattern installation at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#
	prompt_def "Enter Instance Number. Default" "0"
	inst="$reply"
		print "inst='$inst'" >> $configpath/installapache22.conf
		print ""

	prompt_def "Apache 2.2 Install directory. Default" "/local/apache22/$inst"
	apache22_root="$reply"
		print "apache22_root='$apache22_root'" >> $configpath/installapache22.conf
		print ""

	prompt_def "Apache 2.2 Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
	apc_enggutils_dir="$reply"
		print "apc_enggutils_dir='$apc_enggutils_dir'" >> $configpath/installapache22.conf
		print ""

        prompt_def "Apache Log Directory for Apache Server uog files.Default" "/local/apache22/$inst/logs"
        logroot="$reply"
        print "logroot='$logroot'" >> $configpath/installapache22.conf
        print ""


else
#
# web pattern
#

        print "inst='$wp_inst'" >> $configpath/installapache22.conf
        print "apache22_root='$wp_root_dir'" >> $configpath/installapache22.conf
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $configpath/installapache22.conf
        print "logroot='$wp_root_dir/logs'" >> $configpath/installapache22.conf

fi
        prompt_def "Apache 2.2 Version. Default" "2.2.29"
        version="$reply"
                print "version='$version'" >> $configpath/installapache22.conf
                print ""

        prompt_def "Apache JPMC version number.Default" "0"
        jpmcversion="$reply"
                print "jpmcversion='$jpmcversion'" >> $configpath/installapache22.conf
                print ""

        prompt_def "Alternatively, use Perl binary indicated. Default:none specified,look along \$PATH" ""
        perlbin="$reply"
                print "perlbin='$perlbin'" >> $configpath/installapache22.conf
                print ""

        prompt_def "Media directory. Default" "${installmedia}"
        media="$reply"
                print "media='$media'" >> $configpath/installapache22.conf
                print ""

	prompt_def "UNIX userid to own installation. Default" "webuser"
	userid="$reply"
		print "userid='$userid'" >> $configpath/installapache22.conf
		print ""

	prompt_def "UNIX group to own installation. Default" "webgroup"
	group="$reply"
		print "group='$group'" >> $configpath/installapache22.conf
		print ""

        prompt_def "Allow running as root.Default" "false"
        rootok="$reply"
                print "rootok='$rootok'" >> $configpath/installapache22.conf
                print ""

	prompt_def "Option to install 64 bit Apache. Default" "true"
        m64mode="$reply"
                print "m64mode='$m64mode'" >> $configpath/installapache22.conf
                print ""

        prompt_def "Option for init scripts.Default" "true"
        initscripts="$reply"
                print "initscripts='$initscripts'" >> $configpath/installapache22.conf
                print ""

        prompt_def "Option action, one check, install.Default" "install"
        action="$reply"
                print "action='$action'" >> $configpath/installapache22.conf
                print ""

        prompt_def "Option for install quietly, true or false.Default" "false"
        xopts="$reply"
                print "xopts='$xopts'" >> $configpath/installapache22.conf
                print ""
        
        prompt_def "Number of days for purging of Apache Server log files.Default" "30"
        log_purging_days="$reply"
        print "log_purging_days='$log_purging_days'" >> $configpath/installapache22.conf
        print ""

        prompt_def "Directory for temporary files.Default" "/tmp"
        temp_dir="$reply"
                print "temp_dir='$temp_dir'" >> $configpath/installapache22.conf
                print ""

if [[ "$isPattern" == "true" ]] ; then

        print ""
        print "Remark:"
        print "$conf now adopts latest web pattern on the installation path and runtime account"
        print "================================================================"
        print "Installation Path - $wp_root_dir"
        print "Runtime account - $userid : $group"
        print "Instance number is $wp_inst "
        print "For backward compatibility to support legacy deployment"
        print "Please update the installation config file ($conf) with the inst variable other than . with the customized installation path "
        print "================================================================"
        print ""
fi

   print "INFO: Configuration file generated on $configpath/installapache22.conf"
   print "INFO:  Next step: cd ${baseDir}/install/ and start the install process by executing run.sh with specified options"

./conf/genuninstall.sh
========================================
#!/bin/ksh
#set -x
#=================================================================================================
# genuninstall.sh 
#
# Description:
# Generate the required configuration details for un-installing Apache Server or PHP or Perl or Modsecurity
#
# Input Parameters: See usage
#
# Revison History:
# MA    Mar 2011    Created for Apache Server or PHP or Perl or Modsecurity un-install process
# AR    Sep 2013    Added Janus Support to Apache 2.2.25 build
#=================================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="$scriptDir/.."
   export baseDir

. $baseDir/utility/utilcommon.sh


# Defaults
configpath=/tmp
product=
instno=


usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product              Flag to un-install Apache Server or PHP or Perl or Modsecurity or Siteminder or Janus"
        print "                              (default:none, options: server or php or perl or modsecurity or siteminder or janus)"
	print "       -configpath  	     Path of config file"
        print "                              (default:/tmp)"
        exit 2
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -product)          product=$2 ;;
                -configpath)        configpath=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

	if [[ "$product" = "" ]] ; then
       		usage
	fi

	if [[ "$product" == "server" ||  "$product" == "php" ||  "$product" == "perl" || "$product" == "modsecurity"  || "$product" == "siteminder" || "$product" == "janus" ]] ; then
		print " "
	else
        	usage
	fi

	if [[ ! -d "$configpath" ]] ; then
        	usage
	fi

   if [[ $product = "server" ]] ; then
          fileName=uninstallapache22.conf
          prdtocheck="Apache 2.2"
   elif [[ $product = "php" ]] ; then
         fileName=uninstallphp.conf
         prdtocheck="PHP 5"
   elif [[ $product = "perl" ]] ; then
         fileName=uninstallperl.conf
         prdtocheck="PERL 5"
   elif [[ $product = "modsecurity" ]] ; then
         fileName=uninstallmodsecurity.conf
         prdtocheck="Mod Security"
   elif [[ $product = "siteminder" ]] ; then
         fileName=uninstallsiteminder.conf
         prdtocheck="Siteminder CR35"
   elif [[ $product = "janus" ]] ; then
         fileName=uninstalljanus.conf
         prdtocheck="Janus 3.8.0.0"
    fi


	#Remove previous conf file
         rm -rf $configpath/$fileName


	print "*****************Set Un-Install Parameters**********************"
 
#Apache 

       prompt_def "Is this a web pattern installation at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#
        prompt_def "Enter Instance Number. Default" "0"
        inst="$reply"
                print "inst='$inst'" > $configpath/$fileName
                print ""

        prompt_def "Apache 22 Install directory. Default" "/local/apache22/$inst"
        apache22_root="$reply"
                print "apache22_root='$apache22_root'" >> $configpath/$fileName
                print ""

        prompt_def "Apache 22 Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
        apc_enggutils_dir="$reply"
                print "apc_enggutils_dir='$apc_enggutils_dir'" >> $configpath/$fileName
                print ""
else
#
# web pattern
#

        print "inst='$wp_inst'" >> $configpath/$fileName
        print "apache22_root='$wp_root_dir'" >> $configpath/$fileName
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $configpath/$fileName

fi

if [[ $product = "server" ]] ; then
        prompt_def "keep conf directory. Default" "no"
        keepdata="$reply"
                print "keepdata='$keepdata'" >> $configpath/$fileName
                print ""

#PHP
elif [[ $product = "php" ]] ; then

   if [[ "$isPattern" != "true" ]] ; then
	prompt_def "PHP installation directory. Default" "/local/apache22/$inst/php5"
        php5_root="$reply"
               print "php5_root='$php5_root'" >> $configpath/$fileName
               print ""

        prompt_def "Website name that PHP is configured with. Default" "ws$inst"
        website="$reply"
               print "website='$website'" >> $configpath/$fileName
               print ""

   else
        print "php5_root='$wp_root_dir/php5'" >> $configpath/$fileName
      
        prompt_def "Website name that PHP is configured with. Default" "ws"
        website="$reply"
           print "website='$website'" >> $configpath/$fileName
           print ""
   fi

elif [[ $product = "siteminder" ]] ; then

   if [[ "$isPattern" != "true" ]] ; then
        prompt_def "Siteminder installation directory. Default" "/local/apache22/$inst/webagent"
        siteminder_root="$reply"
               print "siteminder_root='$siteminder_root'" >> $configpath/$fileName
               print ""
        prompt_def "Webiste name that Siteminder is configured with. Default" "ws$inst"
        website="$reply"
               print "website='$website'" >> $configpath/$fileName
               print "" 
   else
        print "siteminder_root='$wp_root_dir/webagent'" >> $configpath/$fileName
      
        prompt_def "Website name that siteminder is configured with. Default" "ws"
        website="$reply"
           print "website='$website'" >> $configpath/$fileName
           print ""
   fi

elif [[ $product = "janus" ]] ; then

   if [[ "$isPattern" != "true" ]] ; then
        prompt_def "Janus installation directory. Default" "/local/apache22/$inst/janusweb"
        jw_root="$reply"
               print "jw_root='$jw_root'" >> $configpath/$fileName
               print ""
        prompt_def "Website name that Janus is configured with. Default" "ws$inst"
        website="$reply"
               print "website='$website'" >> $configpath/$fileName
               print ""

   else
        print "jw_root='$wp_root_dir/janusweb'" >> $configpath/$fileName
      
        prompt_def "Website name that siteminder is configured with. Default" "ws"
        website="$reply"
           print "website='$website'" >> $configpath/$fileName
           print ""
   fi

#Perl
elif [[ $product = "perl" ]] ; then

   if [[ "$isPattern" != "true" ]] ; then
	prompt_def "Perl installation directory. Default" "/local/apache22/$inst/perl5"
        perl5_root="$reply"
               print "perl5_root='$perl5_root'" >> $configpath/$fileName
               print ""

	prompt_def "Webiste name that Perl is configured with. Default" "ws$inst"
        website="$reply"
               print "website='$website'" >> $configpath/$fileName
               print ""

   else
        print "perl5_root='$wp_root_dir/perl5'" >> $configpath/$fileName
      
        prompt_def "Website name that siteminder is configured with. Default" "ws"
        website="$reply"
           print "website='$website'" >> $configpath/$fileName
           print ""
   fi

elif [[ $product = "modsecurity" ]] ; then
#Mod Security

	prompt_def "Webiste name that Mod Security is configured with. Default" "ws"
        website="$reply"
               print "website='$website'" >> $configpath/$fileName
               print ""
fi

        print "INFO: Configuration file generated."
        print "INFO: Next step: cd ${baseDir}/un-install and start the un-install process by executing run.sh with the specified paramaters"

./conf/genperlconf.sh
========================================
#!/bin/ksh
#set -x
#=================================================================================================
# genperlconf.sh
#
# Description:
# Generate the required configuration details for the  apache22 installation
#
# Input Parameters: See usage
#
# Revison History:
# MA    11 Mar 2011    Created for apache22 install process
#=================================================================================================

   
scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="$scriptDir/.."
   export baseDir


# Defaults
configpath=/tmp
installmedia=${baseDir}/install/media
conf=installperl.conf

#Ask for the path where the conf file resides. 

	usage()
        	{
        		print "usage: $0 {flags}"
        		print "       -configpath  config      Path of config file"
        		print "                                (default:/tmp)"
        		exit 2
        }

	while [[ "$1" != "" ]] ; do
        	case $1 in
                	-configpath)        configpath=$2 ;;
                          	  *)        usage ;;
        	esac
        	shift 2
        done

	if [[ "$configpath" = "" ]] ; then
        	usage
     	fi

	if [[ ! -d "$configpath" ]] ; then
        	usage
     	fi

# Fetch the required utility scripts
. $baseDir/utility/utilcommon.sh

 #Remove any previous conf file
 rm -rf $configpath/installperl.conf
  print "*****************Set Install Parameters**********************"

	prompt_def "Skip Pre-Check for all modules. Default" "true"
	skipprechk="$reply"
		print "skipprechk='$skipprechk'" > $configpath/installperl.conf
		print ""

       prompt_def "Is this a web pattern installation at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#

	prompt_def "Enter Instance Number. Default" "0"
	inst="$reply"
		print "inst='$inst'" > $configpath/installperl.conf
		print ""

	prompt_def "Apache 2.2 Install directory. Default" "/local/apache22/$inst"
	apache22_root="$reply"
		print "apache22_root='$apache22_root'" >> $configpath/installperl.conf
		print ""

	prompt_def "Apache 2.2 Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
        apc_enggutils_dir="$reply"
                print "apc_enggutils_dir='$apc_enggutils_dir'" >> $configpath/installperl.conf
                print ""

else
#
# web pattern
#

        print "inst='$wp_inst'" >> $configpath/installperl.conf
        print "apache22_root='$wp_root_dir'" >> $configpath/installperl.conf
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $configpath/installperl.conf
fi
	prompt_def "Perl version number.Default" "5.12.3"
        version="$reply"
                print "version='$version'" >> $configpath/installperl.conf
                print ""

        prompt_def "Perl JPMC version number.Default" "0"
        jpmcversion="$reply"
                print "jpmcversion='$jpmcversion'" >> $configpath/installperl.conf
                print ""

	prompt_def "Media directory. Default" "${installmedia}"
	media="$reply"
		print "media='$media'" >> $configpath/installperl.conf
		print ""

	prompt_def "UNIX userid to own installation. Default" "webuser"
	userid="$reply"
		print "userid='$userid'" >> $configpath/installperl.conf
		print ""

	prompt_def "UNIX group to own installation. Default" "webgroup"
	group="$reply"
		print "group='$group'" >> $configpath/installperl.conf
		print ""

	prompt_def "Option to install 64 bit Perl. Default" "true"
        m64mode="$reply"
                print "m64mode='$m64mode'" >> $configpath/installperl.conf
                print ""

        prompt_def "Option action, one check, install.Default" "false"
        quiet="$reply"
                print "quiet='$quiet'" >> $configpath/installperl.conf
                print ""

if [[ "$isPattern" == "true" ]] ; then

        print ""
        print "Remark:"
        print "$conf now adopts latest web pattern on the installation path and runtime account"
        print "================================================================"
        print "Installation Path - $wp_root_dir/perl5"
        print "Runtime account - $userid : $group"
        print "Instance number is $wp_inst "
        print "For backward compatibility to support legacy deployment"
        print "Please update the installation config file ($conf) with the inst variable other than . with the customized installation path "
        print "================================================================"
        print ""
fi

   print "INFO: Configuration file generated on $configpath/installperl.conf"
   print "INFO:  Next step: cd ${baseDir}/install and start the install process by executing run.sh with specified options"

./conf/genmodsecurityconf.sh
========================================
#!/bin/ksh
#set -x
#=================================================================================================
# genmodsecurityconf.sh
#
# Description:
# Generate the required configuration details for the Apache 2.2  installation
#
# Input Parameters: See usage
#
# Revison History:
# MA   26 Apr 2011    Created for Apache 2.2 install proces
#=================================================================================================

case `uname -s` in
        Linux)
                whoami=whoami
                os=linux
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                os=solaris
                export PATH=$PATH:/usr/sbin
                ;;
        AIX)
                whoami=whoami
                os=aix
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

baseDir="$scriptDir/.."
export baseDir

# Defaults
configpath=/tmp
installmedia=${baseDir}/install/media
installupdates=${baseDir}/install/updates
conf=installmodsecurity.conf

#Ask for the path where the conf file resides. 

usage()
        {
        print "usage: $0 {flags}"
        print "       -configpath  config      Path of config file"
        print "                                (default:/tmp)"
        exit 2
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)        configpath=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

	if [[ "$configpath" = "" ]] ; then
        	usage
	fi

	if [[ ! -d "$configpath" ]] ; then
        	usage
	fi


# Fetch the required utility scripts
. $baseDir/utility/utilcommon.sh

rm -f $configpath/installmodsecurity.conf

	print "*****************Set Install Parameters**********************"

	prompt_def "Skip Pre-Check for all modules. Default" "true"
	skipprechk="$reply"
		print "skipprechk='$skipprechk'" >> $configpath/installmodsecurity.conf
		print ""

       prompt_def "Is this a web pattern installation at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#

	prompt_def "Enter Instance Number. Default" "0"
	inst="$reply"
		print "inst='$inst'" >> $configpath/installmodsecurity.conf
		print ""

        prompt_def "Apache 22 Install directory. Default" "/local/apache22/$inst"
        apache22_root="$reply"
                print "apache22_root='$apache22_root'" >> $configpath/installmodsecurity.conf
                print ""

        prompt_def "Apache 22 Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
        apc_enggutils_dir="$reply"
                print "apc_enggutils_dir='$apc_enggutils_dir'" >> $configpath/installmodsecurity.conf
                print ""

else
#
# web pattern
#

        print "inst='$wp_inst'" >> $configpath/installmodsecurity.conf
        print "apache22_root='$wp_root_dir'" >> $configpath/installmodsecurity.conf
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $configpath/installmodsecurity.conf

fi

        prompt_def "ModSecurity Version. Default" "2.7.7"
        version="$reply"
                print "version='$version'" >> $configpath/installmodsecurity.conf
                print ""

        prompt_def "Option to install 64 bit ModSecurity. Default" "true"
        m64mode="$reply"
                print "m64mode='$m64mode'" >> $configpath/installmodsecurity.conf
                print ""

	if [[ "$m64mode" = "true" && "$os" = "aix" ]] ; then
        	print "64 bit ModSecurity for Apache 2.2 is not supported at this point."
		exit 1
	fi

       prompt_def "Mod Security JPMC version number" "0"
       jpmcversion="$reply" 
                   print "jpmcversion='$jpmcversion'" >> $configpath/installmodsecurity.conf
                   print ""

        installmedia=${baseDir}/install/media

	prompt_def "Media directory. Default" "$installmedia"
	media="$reply"
                print "media='$media'" >> $configpath/installmodsecurity.conf
		print ""

	prompt_def "User Id. Default" "webuser"
	userid="$reply"
		print "userid='$userid'" >> $configpath/installmodsecurity.conf
		print ""

	prompt_def "Group. Default" "webgroup"
	group="$reply"
		print "group='$group'" >> $configpath/installmodsecurity.conf
		print ""

	prompt_def "One of check, install. Default" "install"
	action="$reply"
		print "action='$action'" >> $configpath/installmodsecurity.conf
		print ""

	prompt_def "Directory for temporary files.Default" "/tmp"
	temp_dir="$reply"
		print "temp_dir='$temp_dir'" >> $configpath/installmodsecurity.conf
		print ""

	prompt_def "Install quietly, true or false. Default" "false"
	quiet="$reply"
		print "quiet='$quiet'" >> $configpath/installmodsecurity.conf

if [[ "$isPattern" == "true" ]] ; then

        print ""
        print "Remark:"
        print "$conf now adopts latest web pattern on the installation path and runtime account"
        print "================================================================"
        print "Installation Path - $wp_root_dir/security"
        print "Runtime account - $userid : $group"
        print "Instance number is $wp_inst "
        print "For backward compatibility to support legacy deployment"
        print "Please update the installation config file ($conf) with the inst variable other than . with the customized installation path "
        print "================================================================"
        print ""
fi

       print "INFO: Configuration file generated."
       print "INFO: Next step: cd ${baseDir}/install and start the install process by executing run.sh"
./conf/genphpconf.sh
========================================
#!/bin/ksh
#set -x
#=================================================================================================
# genphpconf.sh
#
# Description:
# Generate the required configuration details for php installation
#
# Input Parameters: See usage
#
# Revison History:
# MA    11 Mar 2011    Created for apache22 install process
#=================================================================================================

   
scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="$scriptDir/.."
   export baseDir


# Defaults
configpath=/tmp
installmedia=${baseDir}/install/media

#Ask for the path where the conf file resides. 

	usage()
        	{
        		print "usage: $0 {flags}"
        		print "       -configpath  config      Path of config file"
        		print "                                (default:/tmp)"
        		exit 2
        }

	while [[ "$1" != "" ]] ; do
        	case $1 in
                	-configpath)        configpath=$2 ;;
                          	  *)        usage ;;
        	esac
        	shift 2
        done

	if [[ "$configpath" = "" ]] ; then
        	usage
     	fi

	if [[ ! -d "$configpath" ]] ; then
        	usage
     	fi

# Fetch the required utility scripts
. $baseDir/utility/utilcommon.sh

 #Remove any previous conf file
 rm -rf $configpath/installphp.conf
  print "*****************Set Install Parameters**********************"

	prompt_def "Skip Pre-Check for all modules. Default" "false"
	skipprechk="$reply"
		print "skipprechk='$skipprechk'" > $configpath/installphp.conf
		print ""

       prompt_def "Is this a web pattern installation at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#

	prompt_d "Enter Instance Number. Default" "0"
	inst="$reply"
		print "inst='$inst'" > $configpath/installphp.conf
		print ""

	prompt_def "Apache 2.2 Install directory. Default" "/local/apache22/$inst"
	apache22_root="$reply"
		print "apache22_root='$apache22_root'" >> $configpath/installphp.conf
		print ""

	prompt_def "Apache 2.2 Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
        apc_enggutils_dir="$reply"
                print "apc_enggutils_dir='$apc_enggutils_dir'" >> $configpath/installphp.conf
                print ""

        prompt_def "PHP installation directory. Default" "/local/apache22/$inst/php5"
        php5_root="$reply"
                print "php5_root='$php5_root'" >> $configpath/installphp.conf
                print ""
else
#
# web pattern
#

        print "inst='$wp_inst'" >> $configpath/installphp.conf
        print "apache22_root='$wp_root_dir'" >> $configpath/installphp.conf
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $configpath/installphp.conf
        print "php5_root='$wp_root_dir/php5'" >> $configpath/installphp.conf

fi


	prompt_def "PHP version number.Default" "5.2.17"
        version="$reply"
                print "version='$version'" >> $configpath/installphp.conf
                print ""

        prompt_def "PHP JPMC version number.Default" "0"
        jpmcversion="$reply"
                print "jpmcversion='$jpmcversion'" >> $configpath/installphp.conf
                print ""

	prompt_def "Media directory. Default" "${installmedia}"
	media="$reply"
		print "media='$media'" >> $configpath/installphp.conf
		print ""

	prompt_def "UNIX userid to own installation. Default" "webuser"
	userid="$reply"
		print "userid='$userid'" >> $configpath/installphp.conf
		print ""

	prompt_def "UNIX group to own installation. Default" "webgroup"
	group="$reply"
		print "group='$group'" >> $configpath/installphp.conf
		print ""

	prompt_def "Option to install 64 bit PHP. Default" "true"
        m64mode="$reply"
                print "m64mode='$m64mode'" >> $configpath/installphp.conf
                print ""

        prompt_def "Option action, one check, install.Default" "false"
        quiet="$reply"
                print "quiet='$quiet'" >> $configpath/installphp.conf
                print ""
if [[ "$isPattern" == "true" ]] ; then

        print ""
        print "Remark:"
        print "$conf now adopts latest web pattern on the installation path and runtime account"
        print "================================================================"
        print "Installation Path - $wp_root_dir/php5"
        print "Runtime account - $userid : $group"
        print "Instance number is $wp_inst "
        print "For backward compatibility to support legacy deployment"
        print "Please update the installation config file ($conf) with the inst variable other than . with the customized installation path "
        print "================================================================"
        print ""
fi

   print "INFO: Configuration file generated on $configpath/installphp.conf"
   print "INFO:  Next step: cd ${baseDir}/install and start the install process by executing run.sh with specified options"

./conf/gensiteminderconf.sh
========================================
#!/bin/ksh
#set -x
#=================================================================================================
# gensiteminderconf.sh
#
# Description:
# Generate the required configuration details for the Siteminder/Apache installation
#
# Input Parameters: See usage
#
# Revison History:
# RR    25 Aug 2011    Initial version
#=================================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
  scriptDir=$PWD
fi

baseDir="$scriptDir/.."
export baseDir

# Utility needed for this script
. $baseDir/utility/utilcommon.sh

# Defaults
installmedia="${baseDir}/install/media/../siteminder"
cd -P "$installmedia"
installmedia=$PWD
cd $scriptDir
conf="installsiteminder.conf"

#Ask for the path where the conf file resides. 
prompt_def "Please specify the temporary directory for configuration $conf. Default" "/tmp"
configpath="$reply"

if [[ ! -d "$configpath" ]] ; then
  print "Directory doesn't not exist"
  exit 1
fi

outfile=$configpath/installsiteminder.conf

if [[ -f $outfile ]] ; then
  print "$configpath/$conf already exist."
  print "Please ensure this is not use by other installation."
  print "Remove this file before rerunning this script"
  exit 1
else
  echo "" > $outfile
  if [ $? -ne 0 ] ; then 
    print "Cannot write to $outfile"
    exit 1
  fi
fi
	print ""
	print "*****************Set Install Parameters**********************"

	prompt_def "Skip Pre-Check for all modules. Default" "false"
	skipprechk="$reply"
		print "skipprechk='$skipprechk'" >> $outfile
		print ""

       prompt_def "Is this a web pattern installation at $wp_root_dir" "true"
       isPattern="$reply"

if [[ "$isPattern" != "true" ]] ; then
#
# Not a web pattern
#

        prompt_def "Enter Instance Number of the Apache installation. Default" "0"
        inst="$reply"
                print "inst='$inst'" >> $outfile
                print ""

        prompt_def "Apache Install directory. Default" "/local/apache22/$inst"
        apache22_root="$reply"
                print "apache22_root='$apache22_root'" >> $outfile
                print ""

        prompt_def "Apache Engineering utility directory. Default" "/local/apache22/eu-apache22u/$inst"
        apc_enggutils_dir="$reply"
		print "apc_enggutils_dir='$apc_enggutils_dir'" >> $outfile
		print ""
else
#
# web pattern
#

        print "inst='$wp_inst'" >> $outfile
        print "apache22_root='$wp_root_dir'" >> $outfile
        print "apc_enggutils_dir='$wp_root_dir/eu-apache22u'" >> $outfile
fi

	prompt_def "User Id to own installation. Default" "webuser"
        userid="$reply"
                print "userid='$userid'" >> $outfile
                print ""

        prompt_def "Group to own installation. Default" "webgroup"
        group="$reply"
                print "group='$group'" >> $outfile
                print ""
	
	prompt_def "Siteminder version. Default" "12.0-sp3-cr009"
	stversion="$reply"
		print "stversion='$stversion'" >> $outfile
		print ""

	prompt_def "Media directory. Default" "$installmedia"
	media="$reply"
		print "media='$media'" >> $outfile
		print ""

	prompt_def "Directory for temporary files. Default" "/tmp"
	temp_dir="$reply"
		print "temp_dir='$temp_dir'" >> $outfile
		print ""

	prompt_def "Install quietly, true or false. Default" "false"
	quiet="$reply"
		print "quiet='$quiet'" >> $outfile
		print ""

if [[ "$isPattern" == "true" ]] ; then

        print ""
        print "Remark:"
        print "$conf now adopts latest web pattern on the installation path and runtime account"
        print "================================================================"
        print "Installation Path - $wp_root_dir/webagent"
        print "Runtime account - $userid : $group"
        print "Instance number is $wp_inst "
        print "For backward compatibility to support legacy deployment"
        print "Please update the installation config file ($conf) with the inst variable other than . with the customized installation path "
        print "================================================================"
        print ""
fi

       print "INFO: Configuration file generated."
       print "INFO: Next step: cd ${baseDir}/install and start the install process by executing run.sh"
./install/prechkwrapper.sh
========================================
#!/bin/ksh
#set -x
#==============================================================================================
# prechkwrapper.sh  - Script which is a wrapper that invokes other modular pre-check.sh scripts
#
# Description:
# This script acts as a wrapper to invoke other pre-check scripts for various modules like
# security,install,monitoring,etc. Basically all of them individualy perform a task of checking
# ex: space, user id details on a host are in present. Feeds back as and when some details are
# missing.
#  
# Input Parameters: See usage
#
# Revison History:
# MA    20 June 2010    Created for Apache 2.2
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
#==============================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="$scriptDir/.."
   export baseDir

# Get the utility functions we need
. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh


# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product               Prerequisite check Apache 2.2 or PHP5 or PERL5 or Mod Security or Siteminder or Janus"
        print "                               (default:server, options: server or php or perl or modsecurity or siteminder or janus)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)       configpath=$2 ;;
                -product)          product=$2    ;;
                -custom)            custom=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

#check if Apache 2.2 or PHP5 or PERL5 , Mod Security installation to execute

	
if [[ "$product" = "server" ||  "$product" = "php" ||  "$product" = "perl" || "$product" = "modsecurity" || "$product" = "siteminder" || "$product" = "janus" ]] ; then
print " "
else
        usage
fi

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/installapache22.conf
   elif [[ $product = "php" ]] ; then
         . ${baseDir}/conf/installphp.conf
   elif [[ $product = "perl" ]] ; then
         . ${baseDir}/conf/installperl.conf
   elif [[ $product = "modsecurity" ]] ; then
         . ${baseDir}/conf/installmodsecurity.conf
   elif [[ $product = "siteminder" ]] ; then
         . ${baseDir}/conf/installsiteminder.conf
   elif [[ $product = "janus" ]] ; then
         . ${baseDir}/conf/installjanus.conf
   fi
fi

#check if path exists or not

if [[ ! -d "$configpath" ]] ; then
   echo "Config path $configpath is not specified.."
   usage
fi

if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=installapache22.conf
     elif [[ $product = "php" ]] ; then
          cfgfile=installphp.conf
     elif [[ $product = "perl" ]] ; then
          cfgfile=installperl.conf
     elif [[ $product = "modsecurity" ]] ; then
          cfgfile=installmodsecurity.conf
     elif [[ $product = "siteminder" ]] ; then
         cfgfile=installsiteminder.conf
     elif [[ $product = "janus" ]] ; then
         cfgfile=installjanus.conf
     fi

     if [[ -r $configpath ]] ; then
           . $configpath/$cfgfile
     fi
fi

# Pre-check for apache 2.2, php , perl, siteminder and modsecurity
 ./pre-chk.sh -product  $product  -custom $custom  -configpath $configpath
./install/run.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# run.sh  - Script that performs the apache 2.2 installation
#
# Description:
# Main script that performs the installation of apache 22 server
# Also invokes the pre-check and post check script.
# 
# Input Parameters: See usage
#
# Revison History:
# MA    13 Apr 2011    Created for Apache 2.2
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
#================================================================================

case `uname -s` in
        SunOS)
                whoami=/usr/ucb/whoami
                os=solaris
                nslookup=/usr/sbin/nslookup
		PS="/usr/ucb/ps -auxww"
                ;;
        Linux)
                whoami=whoami
                os=linux
                nslookup="/usr/bin/nslookup -silent"
		PS="ps auxww"
                ;;
        AIX)
                whoami=whoami
                os=aix
                nslookup="/usr/bin/nslookup -silent"
		PS="ps auxww"
                ;;

        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


#Defaults
custom=false
configpath=
instorplg=

# usage

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product                Flag to install Apache 2.2 or PHP or Perl or ModSecurity or Siteminder or Janus"
        print "                               (default:none, options: server or php or perl or modsecurity or siteminder or janus )"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp if custom true)"
        exit 1
        }


while [[ "$1" != "" ]] ; do
        case $1 in
                -custom)            custom=$2 ;;
                -configpath)        configpath=$2 ;;
                -product)           product=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

#check if apache 2.2 Server,php or perl installation to execute

if [[ "$product" = "" ]] ; then 
       usage 
fi 

if [[ "$product" != "server" &&  "$product" != "perl" &&  "$product" != "php" &&  "$product" != "modsecurity" && "$product" != "siteminder" && "$product" != "janus" ]] ; then
        usage
fi

if [[ "$custom" = "true" ]] ; then
	if [[ "$configpath" == "" ]] ; then
	    configpath=/tmp
	fi
else
	configpath=${baseDir}/conf/
fi

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/installapache22.conf
        print ""
        echo "-------------------------------------------------------------------------------------------"
        echo "You are using default conf file to install Apache HTTP Server 2.2 with below key value pair:"
        echo "--------------------------------------------------------------------------------------------"
        cat ${baseDir}/conf/installapache22.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   elif [[ $product = "php" ]] ; then
          . ${baseDir}/conf/installphp.conf
        print ""
        echo "--------------------------------------------------------------------------------------"
        echo "You are using default conf file to install PHP for Apache with below key value pair:"
        echo "--------------------------------------------------------------------------------------"
        cat ${baseDir}/conf/installphp.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   elif [[ $product = "perl" ]] ; then
          . ${baseDir}/conf/installperl.conf
        print ""
        echo "--------------------------------------------------------------------------------------"
        echo "You are using default conf file to install Perl for Apache with below key value pair:"
        echo "--------------------------------------------------------------------------------------"
        cat ${baseDir}/conf/installperl.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey
 
   elif [[ $product = "siteminder" ]] ; then
         . ${baseDir}/conf/installsiteminder.conf
        print ""
        echo "--------------------------------------------------------------------------------"
        echo "You are using default conf file to install Siteminder with below key value pair:"
        echo "--------------------------------------------------------------------------------"
        cat ${baseDir}/conf/installsiteminder.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   elif [[ $product = "janus" ]] ; then
         . ${baseDir}/conf/installjanus.conf
        print ""
        echo "--------------------------------------------------------------------------------"
        echo "You are using default conf file to install Siteminder with below key value pair:"
        echo "--------------------------------------------------------------------------------"
        cat ${baseDir}/conf/installjanus.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   elif [[ $product = "modsecurity" ]] ; then
         . ${baseDir}/conf/installmodsecurity.conf
        print ""
        echo "---------------------------------------------------------------------------------"
        echo "You are using default conf file to install ModSecurity with below key value pair:"
        echo "---------------------------------------------------------------------------------"
        cat ${baseDir}/conf/installmodsecurity.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey

   fi
fi
 


#check if path exists or not

if [[ ! -d "$configpath" ]] ; then
	echo "Config path $configpath is not specified.."
        usage 
fi

if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=installapache22.conf
     elif [[ $product = "php" ]] ; then
          cfgfile=installphp.conf
     elif [[ $product = "perl" ]] ; then
          cfgfile=installperl.conf
     elif [[ $product = "modsecurity" ]] ; then
          cfgfile=installmodsecurity.conf
     elif [[ $product = "siteminder" ]] ; then
	  cfgfile=installsiteminder.conf	
     elif [[ $product = "janus" ]] ; then
	  cfgfile=installjanus.conf	
     fi

     if [[ -r $configpath ]] ; then
           . $configpath/$cfgfile
     fi
fi


#Pre-chk wrapper apache 2.2,perl, php"
flag=$product
export flag

if [[ "$skipprechk" = "false" ]] ; then
        ${baseDir}/install/prechkwrapper.sh -product $product -custom $custom -configpath $configpath
     	rc=$?
        if [[ $rc -ne 0 ]] ; then
   	   exit $rc
        fi
else
       ${baseDir}/install/pre-chk.sh -product $product -custom $custom -configpath $configpath
       rc=$?
       if [[ $rc -ne 0 ]] ; then
           exit $rc
       fi
fi


if [[ $product = "server" ]] ; then

#Install Server
      ${baseDir}/install/installapache22.sh $custom $configpath
         rc=$?
   	if [[ $rc -ne 0 ]] ; then
   		exit $rc
   	fi


#Do Post check
     ${baseDir}/install/post-chk.sh -product $product -custom $custom -configpath $configpath
     rc=$?
   	if [[ $rc -ne 0 ]] ; then
   		exit $rc
        fi
 fi

if [[ $product = "php" ]] ; then
      ${baseDir}/install/installphp5.sh $custom $configpath
     rc=$?
   	if [[ $rc -ne 0 ]] ; then
   		exit $rc
   	fi

#Do Post check
     ${baseDir}/install/post-chk.sh -product $product -custom $custom -configpath $configpath
     rc=$?
   	if [[ $rc -ne 0 ]] ; then
   		exit $rc
   	fi
fi


if [[ $product = "perl" ]] ; then
      ${baseDir}/install/installperl5.sh $custom $configpath
     rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi

#Do Post check
     ${baseDir}/install/post-chk.sh -product $product -custom $custom -configpath $configpath
     rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi
fi

if [[ $product = "modsecurity" ]] ; then
      ${baseDir}/install/installmodsecurity.sh $custom $configpath
        rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi


#Do Post check
     ${baseDir}/install/post-chk.sh -product $product -custom $custom -configpath $configpath
     rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi
 fi


if [[ $product = "siteminder" ]] ; then

      ${baseDir}/install/installsiteminder.sh $custom $configpath
         rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi

     #Do Post check
     ${baseDir}/install/post-chk.sh -product $product -custom $custom -configpath $configpath
     rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi
fi

if [[ $product = "janus" ]] ; then

         ${baseDir}/install/installjanus.sh $custom $configpath
         rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi

#Do Post check
     ${baseDir}/install/post-chk.sh -product $product -custom $custom -configpath $configpath
     rc=$?
        if [[ $rc -ne 0 ]] ; then
                exit $rc
        fi
fi
./install/post-chk.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# post-chk.sh 
#
# Description:
# check the secuirty permission on apache 2.2, php5 and perl 5 installation and remove any temp files
# from the host.
# Input Parameters: See usage
#
# Revison History:
# MA    19 Apr 2011    Created for apache 2.2 
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
#================================================================================
case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        AIX)
                whoami=whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


# Get the utility functions we need
. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product               Prerequisite check Apache or PHP or Perl or ModSecurity or Siteminder or Janus"
        print "                               (default:server, options: server or php or perl or modsecurity or siteminder or janus)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)        configpath=$2 ;;
                -product)          product=$2 ;;
                -custom)            custom=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

#check if Apache 2.2 Server,PHP or PERL installation to execute

if [[ "$product" = "server" ||  "$product" = "php" ||  "$product" = "perl" ||  "$product" = "modsecurity" ||  "$product" = "siteminder" || "$product" = "janus" ]] ; then
        print " "
    if [[ "$product" = "server" ]]  ; then
           prdtocheck="Apache 2.2"
           productRoot=$apache22_root/corefiles
     elif [[ "$product" = "php" ]]  ; then
           prdtocheck="PHP 5"
           productRoot=$php5_root
     elif [[ "$product" = "perl" ]]  ; then
           prdtocheck="PERL 5"
           productRoot=$apache22_root/perl5
     elif [[ "$product" = "modsecurity" ]]  ; then
           prdtocheck="Mod Security"
           # productRoot=$apc_enggutils_dir/security/modsecurity    
           securityRoot=$apache22_root/security
           productRoot=$securityRoot/modsecurity
     elif [[ "$product" = "siteminder" ]]  ; then
	   prdtocheck="Siteminder R12"
           productRoot=$apache22_root/bin/webagent		
     elif [[ "$product" = "janus" ]]  ; then
	   prdtocheck="Janus"
           productRoot=$jw_root/janusweb/current	
     fi

        print "$prdtocheck post check"
        print ""
else
        usage
fi

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/installapache22.conf
   elif [[ $product = "php" ]] ; then
         . ${baseDir}/conf/installphp.conf
   elif [[ $product = "perl" ]] ; then
         . ${baseDir}/conf/installperl.conf
   elif [[ $product = "modsecurity" ]] ; then
         . ${baseDir}/conf/installmodsecurity.conf
   elif [[ $product = "siteminder" ]] ; then
         . ${baseDir}/conf/installsiteminder.conf
   elif [[ $product = "janus" ]] ; then
         . ${baseDir}/conf/installjanus.conf
    fi
fi

#check if path exists or not

if [[ ! -d "$configpath" ]] ; then
        echo "Config path $configpath is not specified.."
        usage
fi

if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=installapache22.conf
     elif [[ $product = "php" ]] ; then
          cfgfile=installphp.conf
      elif [[ $product = "perl" ]] ; then
          cfgfile=installperl.conf
      elif [[ $product = "modsecurity" ]] ; then
          cfgfile=installmodsecurity.conf
      elif [[ $product = "siteminder" ]] ; then
          cfgfile=installsiteminder.conf
      elif [[ $product = "janus" ]] ; then
          cfgfile=installjanus.conf
     fi
 if [[ -r $configpath ]] ; then
           . $configpath/$cfgfile
     fi
fi


# Userid check
if [[ `$whoami` != $userid && `$whoami` != "root" ]] ; then
        print "$0: please run this script as $userid or 'root'"
        exit 11
fi

if [[ $product = "server" ]] ; then

# Ownerships, all is owned by chosen userid:group

chown -Rh $userid:$group $apache22_root
chown -Rh $userid:$group $apc_enggutils_dir
#chown -Rh $userid:$group $apc_enggutils_dir/../

# Permissions (contents of .tar.gz cannot be trusted)
#   Everyone should be able to read everything (at least to start with)
#   Only the owner should be able to modify everything
#   Logs and corefiles direrectory should be group writeable
# We also fix the permissions of our value add

chmod -R  a+r $apache22_root
chmod -R  u+w $apache22_root
chmod -R go-w $apache22_root
find $apache22_root -type d -exec chmod a+x {} \;
chmod g+w $apache22_root/logs
chmod g+w $apache22_root/corefiles
chmod 755 $apache22_root/bin/*
chmod 755 $apache22_root/lib/*
chmod 755 $apache22_root/modules/*


find $apc_enggutils_dir -type d -exec chmod a+x {} \;
find $apc_enggutils_dir/../ -type d -exec chmod a+rx {} \;
chmod -R  a+r $apc_enggutils_dir
chmod -R  u+w $apc_enggutils_dir
chmod -R go-w $apc_enggutils_dir

#   Our value-add is mainly non-sensitive

if [[ "$m64mode" = "true" ]] ; then
        mode=64
else
        mode=32
fi

#cat ${baseDir}/admin/version.txt |
#    sed \
#        -e "s?#BIT#?$mode?" \
#        > $apc_enggutils_dir/admin/version.txt.tmp
#mv $apc_enggutils_dir/admin/version.txt.tmp $apc_enggutils_dir/admin/version.txt
chown $userid:$group $apc_enggutils_dir/admin/version.txt

# Fix script permission
chmod 644 $apc_enggutils_dir/admin/* $apc_enggutils_dir/archive/* $apc_enggutils_dir/logs/* $apc_enggutils_dir/monitoring/* $apc_enggutils_dir/performance/* $apc_enggutils_dir/security/* $apc_enggutils_dir/testing/* $apc_enggutils_dir/utility/* 2> /dev/null

chmod 755 $apc_enggutils_dir/admin $apc_enggutils_dir/security $apc_enggutils_dir/utility $apc_enggutils_dir/archive $apc_enggutils_dir/logs $apc_enggutils_dir $apc_enggutils_dir/utility $apc_enggutils_dir/monitoring $apc_enggutils_dir/performance $apc_enggutils_dir/testing 2> /dev/null

chmod 755 $apc_enggutils_dir/archive/*.sh $apc_enggutils_dir/admin/*.sh $apc_enggutils_dir/logs/*.sh $apc_enggutils_dir/monitoring/*.sh $apc_enggutils_dir/security/*.sh $apc_enggutils_dir/utility/*.sh $apc_enggutils_dir/performance/*.sh $apc_enggutils_dir/testing/*.sh 2> /dev/null


# Ok, give some worthwhile advice, if relevant.

        print "Apache $version installed."
        print "Use UNIX userid $userid (not root) to manage it"
        if [[ "$rootok" = "true" ]] ; then
                print "To start and stop web sites listening on ports < 1024, or with rootparent=true"
                print "you'll need to run apache22.sh as root (perhaps via sudo or KeON suexec)"
                print "$apc_enggutils_dir/admin/apache22.keon has a sample KeON suexec route."
        fi
        if [[ $perlbin = $apache22_root/perl5/bin/perl ]] ; then
                print "Please be sure to install Perl 5 within this Apache 2"
        fi
fi 

if [[ $product = "php" ]] ; then

# Ownerships, all is owned by chosen userid:group

chown -Rh $userid:$group $php5_root $apache22_root/modules/libphp5.*
chmod -R a+r $php5_root $apache22_root/modules/libphp5.*
chown $userid:$group $apc_enggutils_dir/admin/php-version.txt

# Ok, give some worthwhile advice, if relevant.

        print "PHP $version for Apache 2.2 installed"
        print "To exploit, your website .conf file(s) needs"
        print "  LoadModule php5_module modules/libphp5.so"
        print "  AddType application/x-httpd-php .php"
        print "  PHPIniDir $php5_root/lib"
        print "  $php5_root/lib/php.ini needs customisation"
        print "  $apache22_root/bin/envvars script needs to ensure"
        print "  $php5_root/gettext/lib:$php5_root/libxml2/lib"
        if [[ `uname -s` = AIX ]] ; then
                print "  is added to the LIBPATH"
        else
                print "  is added to the LD_LIBRARY_PATH"
        fi

fi

if [[ $product = "perl" ]] ; then

# Ownerships, all is owned by chosen userid:group

chown -Rh $userid:$group $apache22_root/perl5 $apache22_root/modules/mod_perl.*
chmod -R a+r $apache22_root/perl5 $apache22_root/modules/mod_perl.*

# Ok, give some worthwhile advice, if relevant.

        print "Perl $version for Apache 2.2 installed"
        if [[ `uname -s` != AIX ]] ; then
                print "$apache22_root/bin/envvars needs to ensure"
                print "$apache22_root/perl5/lib/$version/<os>/CORE"
                print "is added to the LD_LIBRARY_PATH, so that libperl.so can be loaded"
        fi
        print "To exploit, your website .conf file(s) needs"
        print "**Step 1 - Search for perl_module and un-hash the entry in the conf file"
        print "  LoadModule perl_module modules/mod_perl.so"
        print "**Step 2 - Add the below entires to the end of the conf file"
        print "  PerlSwitches -I $apache22_root/perl5/lib/$version/<os>"
        print "  PerlSwitches -I $apache22_root/perl5/lib/$version"
        print "  PerlSwitches -I $apache22_root/perl5/lib/site_perl/$version/<os>"
        print "  PerlSwitches -I $apache22_root/perl5/lib/site_perl/$version"
        print "  where <os> is operating system specific"
        print "**Step 3 - Search for Options None"
        print "  Replace with Options FollowSymLinks +ExecCGI "
        print "**Step 4 - Add the below entires to the end of the conf file"
        print "  To use Registry Scripts below /perl/ you might also want things like"
        print "  PerlModule ModPerl::Registry"
        print "  <Location /perl/>"
        print "    SetHandler perl-script"
        print "    PerlResponseHandler ModPerl::Registry"
        print "    PerlOptions +ParseHeaders"
        print "    Options +ExecCGI"
        print "    PerlSendHeader On"
        print "  </Location>"
        print "Start Apache - $apc_enggutils_dir/admin/apache22.sh start <website name>"

fi

if [[ $product = "modsecurity" ]] ; then

### now in installmodsecurity.sh
# Ownerships, all is owned by chosen userid:group
## chown -Rh $userid:$group $productRoot $apache22_root/modules/mod_security2.so
## chmod -R a+r             $productRoot $apache22_root/modules/mod_security2.so

## mkdir -p $apache22_root/conf/modsecurity_crs

## cp -R $productRoot/conf/*.conf $apache22_root/conf/modsecurity_crs/
## cp -R $productRoot/rules/base_rules/ $apache22_root/conf/modsecurity_crs/
## cp $productRoot/libraries/*.* $apache22_root/lib/

## chown -Rh $userid:$group $apache22_root/conf/modsecurity_crs/
## chown -Rh $userid:$group $apache22_root/lib/

# Mod Security Version Info
## print "
## "Product: ModSecurity for Apache 2.2"
## "Product Version: "${version}
## "Engineering Build Version: E-"${BUILD_VERSION}
## "Engineered Build Release Date: Jul 2015"
## "Product Architecture: 32-bit"
## "ModSecurity Core Rule Set\("CRS"\)Version: 2.7.7"
## " > /tmp/version-modsecurity.txt.$$

## mv /tmp/version-modsecurity.txt.$$ $securityRoot/version-modsecurity.txt
## chown -Rh $userid:$group $securityRoot/version-modsecurity.txt

# Ok, give some worthwhile advice, if relevant.

        print "Mod Security $version for Apache 2.2 installed."
        print "Use UNIX userid $userid (not root) to manage it."
        ## cp ../security/configuremodsecurity.sh $securityRoot/
        ## cp ../security/deletemodsecurity.sh $securityRoot/
        ## chown -Rh $userid:$group $securityRoot/configuremodsecurity.sh
        ## chown -Rh $userid:$group $securityRoot/deletemodsecurity.sh
fi 

if [[ $product = "siteminder" ]] ; then
        # making sure the admin files has the corrcet permission and ownership
       #SMfiles="admin/configuresiteminder.sh admin/deletesiteminder.sh admin/unconfiguresiteminder.sh admin/siteminder-version.txt admin/sigfile-reg-web.sh"
        #for i in $SMfiles ; do
       #   chmod 755 ${apc_enggutils_dir}/$i
       #   chown -RH $userid:$group ${apc_enggutils_dir}/$i
       # done

        # display message
        if [[ "$quiet" = "false" ]] ; then
          print "Siteminder Web Agent $stversion for Apache 2.2 installed."
          print "Use UNIX userid $userid (not root) to manage it"
          print "Refer "Configuration of Siteminder" section in Design_Install_Configure_and_Operate_Siteminder.doc"
        fi

fi

if [[ $product = "janus" ]] ; then
   # display message
    if [[ "$quiet" = "false" ]] ; then
        print "Janus Web Agent $jwversion for Apache 2.2 installed."
        print "Use UNIX userid $userid (not root) to manage it"
        print "Refer "Configuration of Janus" section in Design_Install_Configure_and_Operate_Janus.doc"
    fi
fi

./install/installphp5.sh
========================================
#!/bin/ksh
#set -x
# installphp5.sh - Install PHP 5 within Apache 2.2
#
# Unarchive the pre-compiled PHP 5 binary.
# Although our build scripts create .tar.gz files, we cope with .zip etc too.
# Adjust paths within PHP.
#
# SM Sep 28, 2006, initial version, from installphp5.sh from Apache 2 Build from AK
# SM Jan 23, 2007, Included support for PHP 5.2.0 and made it the default Version.
# SM Aug 02, 2007, Included support for PHP 5.2.3 and made it the defautl version.
# AK Dec 11, 2007, suppress df error
# RR Jan 14, 2008, Included support for PHP 5.2.5 and made it the default version.
# IS Dec 24, 2008, Included support for PHP 5.2.6 and made it the default version.
# PP Feb 12, 2009, Updated to include support for 64 bit.
# RR Feb 05, 2010, Added support for AIX 32/64-bit.
  
# Platform specific things

buildreleasedate="May 2011"
buildversion="E-1.14.0"

case `uname -s` in
	Linux)
		whoami=whoami
                unalias rm mv cp
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		;;
	AIX)
		whoami=whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number       installation instance number"
	print "                          (default: none, must be specified)"
	print "       -apache22_root dir  Apache installation directory"
	print "                          (default: /local/apache22/<inst>)"
	print "       -version v         PHP version number"
	print "                          (default: 5.2.17)"
	print "       -jpmcversion v     PHP JPMC version number"
	print "                          (default: 0)"
# @@@ Do we really want to support this ???
#	print "       -php5_root dir     PHP installation directory"
#	print "                          (default: <APACHE22_ROOT>/php5)"
	print "       -media dir         location with binary archive files"
	print "                          (default: media subdirectory)"
	print "       -action choice     one of check, install"
	print "                          (default: install)"
	print "       -64bit flag        flag to set to 64 bit"
	print "                          (default: false)"
	print "       -quiet flag        install quietly, true or false"
	print "                          (default: false)"
	exit 2
	}

# Get the utility functions we need
scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh
. ${baseDir}/utility/sgtfile.sh

#Config file for Standard build architecture

if [[ $1 = "true" ]] ; then
. $2/installphp.conf
else
. ${baseDir}/conf/installphp.conf
fi


# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

#inst=
#apache22_root=
#version=5.2.17
#jpmcversion=0
#php5_root=
#media=media
#action=install
#quiet=false
#xopts=
#64bit=false
#m64mode=false


# Parse arguments

if [[ "$inst" = "" ]] ; then
	#usage
        print ""
fi

if [[ "$apache22_root" = "" ]] ; then
	apache22_root=/local/apache22/$inst
fi

if [[ "$php5_root" = "" ]] ; then
	php5_root=$apache22_root/php5
fi

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$action" != "check" && "$action" != "install" ]] ; then
	#usage
         print ""
fi

if [[ "$1" != "" ]] ; then
	#usage
         print ""
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
fi	

if [[ -r ${apc_enggutils_dir}/admin/php-version.txt ]] ; then
  print "$0: It looks as if there is already an installation under $apache22_root"
  exit 37
fi

# Check for source media related things being present

determine_rhel_version
if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
		apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin
                
        else
		apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
        fi

else

        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin
        else
                apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-jpmc.bin
        fi
fi
check_file_arc $apache22_php_archive

if [[ "$m64mode" = "true" ]] ; then
  bitsizevalue=64-Bit
else
  bitsizevalue=32-Bit
fi
#print ""
print "Info: Installing "$bitsizevalue" PHP"

# Umask
# Note: ksh umask builtin reports three octal digits

if [[ `umask` != 022 ]] ; then
	umask 022
fi

# Pick up variables

. $apc_enggutils_dir/admin/apacheutil.conf

# Checks complete

if [[ "$action" = "check" ]] ; then
	exit 0
fi

# Log
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/installphp5$m.$hostname.$inst

print "=== installphp5.sh ===" > $log

env >> $log
df -k >> $log 2>&1

# Install

expand_arc $apache22_php_archive $php5_root
cp $php5_root/lib/libphp5.so $apache22_root/modules
if [[ ! -r $apache22_root/modules/libphp5.so ]] ; then
	print "$0: didn't install all of PHP 5, investigate why"
	exit 53
fi

# Patch up references within our PHP to its own install directory and Apache.
# I'm not 100% sure this will address everything, but we should at least try.
# May need to add to list of files with later versions of PHP.

for f in \
	$php5_root/gettext/share/doc/gettext/examples/installpaths \
	$php5_root/gettext/share/doc/gettext/gettext.1.html \
	$php5_root/gettext/share/doc/gettext/ngettext.1.html \
	$php5_root/gettext/share/man/man1/gettext.1 \
	$php5_root/gettext/share/man/man1/ngettext.1 \
	$php5_root/gettext/lib/libintl.la \
	$php5_root/gettext/lib/gettext/user-email \
	$php5_root/gettext/lib/libasprintf.la \
	$php5_root/gettext/lib/libgettextlib.la \
	$php5_root/gettext/lib/libgettextsrc.la \
	$php5_root/gettext/lib/libgettextpo.la \
	$php5_root/gettext/bin/gettextize \
	$php5_root/gettext/bin/autopoint \
	$php5_root/libxml2/lib/pkgconfig/libxml-2.0.pc \
	$php5_root/libxml2/lib/libxml2.la \
	$php5_root/libxml2/lib/xml2Conf.sh \
	$php5_root/libxml2/bin/xml2-config \
	$php5_root/bin/pear \
	$php5_root/bin/peardev \
	$php5_root/bin/pecl \
	$php5_root/bin/phpize \
	$php5_root/bin/php-config \
	$php5_root/lib/php/.registry/archive_tar.reg \
	$php5_root/lib/php/.registry/console_getopt.reg \
	$php5_root/lib/php/.registry/pear.reg \
	$php5_root/lib/php/.registry/html_template_it.reg \
	$php5_root/lib/php/.registry/net_useragent_detect.reg \
	$php5_root/lib/php/.registry/xml_rpc.reg \
	$php5_root/lib/php/pearcmd.php \
	$php5_root/etc/pear.conf \
	$php5_root/lib/php/PEAR/Command/Package.php \
	$php5_root/lib/php/peclcmd.php \
	$php5_root/include/php/main/build-defs.h \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed "s?/local/apache22build$m/apache22/php5?$php5_root?g" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
done

for f in \
	$php5_root/include/php/main/build-defs.h \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed "s?/local/apache22build$m/apache22?$apache22_root?g" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
done

if [[ ! -r $php5_root/lib/php.ini ]] ; then
	print "
; Dummy php.ini
[PHP]
include_dir = \".:$php5_root\"
safe_mode_exec_dir = \"$php5_root/bin\"
" >> $php5_root/lib/php.ini
fi

#Changes to version.txt
cp -p ${baseDir}/admin/php-version.txt ${apc_enggutils_dir}/admin/php-version.txt 
cp -p ${apc_enggutils_dir}/admin/php-version.txt ${apc_enggutils_dir}/admin/php-version.txt-backup
buildreleasedate=`echo $buildreleasedate | tr -d " "`
sed \
 -e "s/@version@/"$version"/" \
 -e "s/@bitsizevalue@/"$bitsizevalue"/" \
-e "s/@buildreleasedate@/"$buildreleasedate"/" \
-e "s/@buildversion@/"$buildversion"/" \
  ${apc_enggutils_dir}/admin/php-version.txt-backup > ${apc_enggutils_dir}/admin/php-version.txt 2> /dev/null

rm ${apc_enggutils_dir}/admin/php-version.txt-backup


#Signature File details
get_product_dtls $apache22_root $userid $group $version "$bitsizevalue" "Apache-PHP-$version" "PHP$version" $apc_enggutils_dir

exit 0
./install/installapache22.sh
========================================
#!/bin/ksh
# installapache22.sh - Install Apache 2.2
# Unarchive the pre-compiled Apache 2.2 binary.
# Although our build scripts create .tar.gz files, we cope with .zip etc too.
# Adjust paths within Apache.
# Adjust paths where Apache refers to Perl.
# Add our value added scripting. 
#
# SM, 01 Nov 2006, initial version, from apache2.0 by AK
# SM, 02 Aug 2007, updated the apache version to 2.2.4 and openssl version to 0.9.8e 
# AK, 11 Dec 2007, suppress df error
# RR, 09 Jan 2008, corrective version of apache 2.2.6
# MS, 14 Feb 2008, Amend minor typo in running as root check logic
# IS, 17 Mar 2008, corrective version of apache 2.2.8
# IS, 22 Dec 2008, Update Apache HTTPd version to 2.2.11, OpenSSL version to 0.9.8i
# PP, 12 Feb 2009, Updated to include support for 64 bit
# SM, 06 May 2009, updated pattern release version 1.10.0
# SG, 27 Aug 2009, certified for RHEL5 64 bit 1.11.0
# SM, 09 Sep 2009, Certified 32-bit for AIX 6.1 E-1.12.0
# RR, 25 Jan 2010, Update Apache HTTPd version to 2.2.14, OpenSSL version to 0.9.8l
# MA, 23 Jan 2011, Update Apache HTTPd version to 2.2.17, OpenSSL version to 0.9.8q
# RR, 02 Sep 2011, Update Apache HTTPd version to 2.2.21, OpenSSL version to 0.9.8r
# RR, 02 Feb 2013, Update Apache HTTPd version to 2.2.23, OpenSSL version to 0.9.8v
# RR, 02 Oct 2013, Update Apache HTTPd version to 2.2.25, OpenSSL version to 0.9.8y
# RR, 25 May 2014, Update Apache HTTPd version to 2.2.27, OpenSSL version to 0.9.8y
# RR, 11 Jan 2015, Update apache version to 2.2.29, OpenSSL to 1.0.1j
# Platform specific things

buildreleasedate="Aug 2015"
buildversion="E-1.19.2"

case `uname -s` in
	Linux)
		whoami=whoami
                unalias rm mv cp
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		;;
	AIX)
		whoami=whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number        installation instance number"
	print "                           (default: none, must be specified)"
	print "       -apache22_root dir   Apache installation directory"
	print "                           (default: /local/apache22/<inst>)"
	print "       -version v          Apache version number"
	print "                           (default: 2.2.29)"
	print "       -jpmcversion v      Apache JPMC version number"
	print "                           (default: 0)"
	print "       -perlbin path       alternatively, use Perl binary indicated"
	print "                           (default: none specified, look along \$PATH)"
	print "       -media dir          location with binary archive files"
	print "                           (default: media subdirectory)"
	print "       -userid userid      UNIX userid to own installation"
	print "                           (default: webuser)"
	print "       -group group        UNIX group to own installation"
	print "                           (default: webgroup)"
	print "       -rootok flag        allow running as root"
	print "                           (default: false)"
	print "       -64bit flag     	  flag to set 64 bit"
	print "                       	  (default: false )"
	print "       -initscripts flag   install initscripts"
	print "                           (default: true)"
	print "       -action choice      one of check, install"
	print "                           (default: install)"
	print "       -quiet flag         install quietly, true or false"
	print "                           (default: false)"
	exit 2
	}


scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh
. ${baseDir}/utility/sgtfile.sh

#Config file for Standard build architecture

if [[ $1 = "true" ]] ; then
. $2/installapache22.conf
else
. ${baseDir}/conf/installapache22.conf
fi


# Vars
hostname=`hostname|cut -d. -f1`

# Defaults - MA - 19 Apr have been comment out to factor SBA. Vaules will come from SBA conf file

#inst=
#apache22_root=
#version=2.2.29
#jpmcversion=0
#perlbin=
#media=media
#userid=webuser
#group=webgroup
#rootok=false
#initscripts=true
#action=install
#quiet=false
#xopts=
#64bit=false
#m64mode=false
#log_root=


# Parse arguments

if [[ "$inst" = "" ]] ; then
	usage
fi

if [[ $inst != "web" ]] ; then
   if [[ "$apache22_root" = "" ]] ; then
	apache22_root=/local/apache22/$inst
   fi
else
   apache22_root=/local/web/apache22
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
	mode=64
else
	mode=32
fi	


if [[ "$perlbin" = "ours" ]] ; then
	# The implication is that we will install Perl 5 with Apache 2.2 next
	perlbin=$apache22_root/perl5/bin/perl
elif [[ "$perlbin" != "" ]] ; then
	if [[ "$perlbin" != /* ]] ; then
		print "$0: Perl binary specified must be an absolute path"
		exit 20
	fi
	if [[ ! -f "$perlbin" || ! -x "$perlbin" ]] ; then
		print "$0: Perl binary specified, but $perlbin is not an executable file"
		exit 21
	fi
else
	perlbin=`whence perl`
	if [[ $? -ne 0 ]] ; then
		print "$0: cannot locate Perl on this system"
		exit 23
	fi
fi

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$initscripts" != "true" && "$initscripts" != "false" ]] ; then
	usage
fi

if [[ "$action" != "check" && "$action" != "install" ]] ; then
	usage
fi

# Check required userids and groups exists

if [[ $userid = root ]] ; then
	print "$0: root should not be used to own and run Apache 2.2"
	exit 30
fi

# Check for source media related things being present
determine_rhel_version
if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                       
                        apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin
        else
			apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
        fi
else
	if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                 apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin
        else
                 apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-jpmc.bin
        fi
       
fi
check_file_arc $apache22_archive

if [[ "$m64mode" = "true" ]] ; then
  bitsizevalue=64
else
  bitsizevalue=32
fi
print ""
print "Info: Installing "$bitsizevalue"-Bit Apache"


# Check for parts of this script (files needed by it) being present

mkdir -p $apache22_root

#Standard build architecture eu-apache22u utility directory will be outside the product install path
#Ex: /local/apache22/eu-apache22u/<inst no>
        mkdir -p $apc_enggutils_dir


mkdir -p $apc_enggutils_dir/utility $apc_enggutils_dir/logs $apc_enggutils_dir/archive $apc_enggutils_dir/admin $apc_enggutils_dir/monitoring $apc_enggutils_dir/performance $apc_enggutils_dir/security $apc_enggutils_dir/testing

files_utility="
${baseDir}/utility/utilcommon.sh $apc_enggutils_dir/utility
"

files_security="
${baseDir}/security/verisignclass3ca2028.cer
${baseDir}/security/verisignclass3intca2011.cer
${baseDir}/security/aseCA.cer
${baseDir}/security/setCA.sh
${baseDir}/security/getCA.sh
${baseDir}/security/makecert.sh $apc_enggutils_dir/security
"

files_admin="
${baseDir}/admin/version.txt
${baseDir}/admin/apache22u.top
${baseDir}/admin/cribsheet.html
${baseDir}/admin/createwebsite.sh
${baseDir}/admin/deletewebsite.sh
${baseDir}/admin/cfgmodajp.sh
${baseDir}/admin/cfgmodproxy.sh
${baseDir}/admin/apache22.sh
${baseDir}/admin/rotatelogs.sh
${baseDir}/admin/determine.sh
${baseDir}/admin/apache22.keon
${baseDir}/admin/sigfile-refresh.sh
${baseDir}/admin/sigfile-reg-web.sh
${baseDir}/admin/test-cgi $apc_enggutils_dir/admin
"

files_testing="
${baseDir}/testing/test-perl.pl
${baseDir}/testing/phpinfo.php $apc_enggutils_dir/testing
"

for f in $files_security $files_utility $files_admin $files_testing
do
        check_file $f
done

if [[ "$action" = "check" ]] ; then
 rm -rf $apache22_root $apc_enggutils_dir
        exit 12
fi

# Log
# Create directory for logs.
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/installapache22$m.$hostname.$inst

print "=== installapache22.sh ===" > $log

env >> $log
df -k >> $log 2>&1

# Install Apache 2.2 base

expand_arc $apache22_archive $apache22_root
if [[ ! -r $apache22_root/bin/httpd ]] ; then
	print "$0: didn't install everything, investigate why"
	exit 53
fi

# On Solaris, programs compiled by GCC can end up depending on GNU libraries.
# We cannot rely on these being in place on the target system, as the standard
# Solaris build doesn't include them, so we put copies within Apaches lib dir.

if [[ `uname -s` = SunOS ]] ; then
	if [[ "$m64mode" = "true" ]] ; then
		cp $media/libgcc_s.so.1_64 $apache22_root/lib/libgcc_s.so.1
		cp $media/libiconv.so.2_64 $apache22_root/lib/libiconv.so.2
	else		
		cp $media/libgcc_s.so.1 $apache22_root/lib
		cp $media/libiconv.so.2 $apache22_root/lib
	fi	
elif [[ `uname -s` = AIX ]] ; then
	cp $media/libgcc_s.a $apache22_root/lib
fi

# Rename CGI directory, as per security standard
mv $apache22_root/cgi-bin $apache22_root/cgi

# Patch up references to Apache directory - the binary archives will say
# /local/apache22build/apache22, but we've probably not installed there
# We also patch OpenSSL, but unfortunately the binary has a hard coded
# reference to /local/apache22build/apache22. This means we have to pass the -config
# argument when using it, to ensure it can find its configuration.

for f in \
	$apache22_root/bin/apr-1-config \
	$apache22_root/bin/apu-1-config \
	$apache22_root/build/apr_rules.mk \
	$apache22_root/bin/apxs \
	$apache22_root/bin/apachectl \
	$apache22_root/bin/envvars \
	$apache22_root/bin/envvars-std \
	$apache22_root/build/config_vars.mk \
	$apache22_root/build/config.nice \
	$apache22_root/conf/*.conf \
	$apache22_root/conf/extra/*.conf \
	$apache22_root/conf/original/extra/*.conf \
	$apache22_root/conf/original/*.conf \
	$apache22_root/include/*.h \
	$apache22_root/lib/*.la \
	$apache22_root/lib/pkgconfig/apr-1.pc \
	$apache22_root/lib/pkgconfig/apr-util-1.pc \
	$apache22_root/man/man8/httpd.8 \
	$apache22_root/openssl/bin/c_rehash \
	$apache22_root/openssl/lib/pkgconfig/openssl.pc \
	$apache22_root/openssl/lib/pkgconfig/libcrypto.pc \
	$apache22_root/openssl/lib/pkgconfig/libssl.pc \
	$apache22_root/openssl/include/openssl/openssl.conf.h \
	$apache22_root/openssl/include/openssl/opensslconf.h \
	$apache22_root/openssl/include/opensslconf.h \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed "s?/local/apache22build$m/apache22?$apache22_root?g" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
done

# Patch up references to Perl within Apache
# Note that CA.pl is in different places, depending on OS

for f in \
	$apache22_root/bin/apxs \
	$apache22_root/bin/dbmmanage \
	$apache22_root/cgi/printenv \
	$apache22_root/openssl/misc/CA.pl \
	$apache22_root/openssl/ssl/misc/CA.pl \
	$apache22_root/openssl/bin/c_rehash \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed -e "s?#!/usr/local/bin/perl?#!$perlbin?" \
		    -e "s?#!/usr/bin/perl?#!$perlbin?" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
done

# Make apachectl files unique to each MPM

for mpm in worker prefork ; do
	sed -e "s/^\(HTTPD='.*\)'/\1_$mpm'/" \
		< $apache22_root/bin/apachectl \
		> $apache22_root/bin/apachectl_$mpm
done

# Copy our extra utilities alongside Apache 22, as is

cp $files_security 
cp $files_utility 
cp $files_admin 
cp $files_testing 

# Make a symlink to remain compatible with previous builds
( cd $apache22_root ; ln -s $apc_enggutils_dir/admin/ admin )

# Copy sample/test CGI stuff into place
cp ${baseDir}/admin/test-cgi ${baseDir}/testing/test-perl.pl ${baseDir}/testing/phpinfo.php $apache22_root/cgi
f=$apache22_root/cgi/test-perl.pl

# Patch the reference to perl
cp $f $f-pre_fix_dir
sed "s?#!/usr/local/bin/perl?#!$perlbin?" \
	< $f-pre_fix_dir \
	> $f
rm $f-pre_fix_dir

# Make sample KeON routes

copy_and_subs ${baseDir}/admin/apache22.keon $apc_enggutils_dir/admin/apache22.keon

# Record the configuration

conf=$apc_enggutils_dir/admin/apacheutil.conf
print "
inst=$inst
apache22_root=$apache22_root
apc_enggutils_dir=$apc_enggutils_dir
userid=$userid
group=$group
logroot=$logroot
log_purging_days=$log_purging_days
" > $conf

# Move the supplied .conf files

for f in $apache22_root/conf/*.conf ; do
	mv $f $apc_enggutils_dir/admin/`basename $f`-original
done

# Make templates

${baseDir}/admin/maketemplates.sh -inst $inst -apache22_root $apache22_root -apc_enggutils_dir $apc_enggutils_dir

# Make a directory for core files to go
# Shipped .conf files have a (commented out) directive referring to this
mkdir -p $apache22_root/corefiles


#Changes to version.txt
cp -p ${baseDir}/admin/version.txt ${apc_enggutils_dir}/admin/version.txt
cp -p ${apc_enggutils_dir}/admin/version.txt ${apc_enggutils_dir}/admin/version.txt-backup
buildreleasedate=`echo $buildreleasedate | tr -d " "`
sed \
 -e "s/@version@/"$version"/" \
 -e "s/@bitsizevalue@/"$bitsizevalue"/" \
-e "s/@buildreleasedate@/"$buildreleasedate"/" \
-e "s/@buildversion@/"$buildversion"/" \
  ${apc_enggutils_dir}/admin/version.txt-backup > ${apc_enggutils_dir}/admin/version.txt 2> /dev/null

rm ${apc_enggutils_dir}/admin/version.txt-backup

cat ${baseDir}/admin/createwebsite.sh |
    sed \
        -e "s/@version@/"$version"/" \
        > $apc_enggutils_dir/admin/createwebsite.sh.tmp
mv $apc_enggutils_dir/admin/createwebsite.sh.tmp $apc_enggutils_dir/admin/createwebsite.sh

prdt_archt=$bitsizevalue

if [[ "$logroot" = "" ]] ; then
  logroot="${apache22_root}/logs"
fi

if [[ "$log_purging_days" = "" ]] ; then
  log_purging_days="30"
fi 	

#if [[ "$logroot" != "/local/apache22/$inst/logs" ]] ; then
if [[ "$logroot" != "${apache22_root}/logs" ]] ; then
mkdir -p $logroot 2> /dev/null
rmdir $apache22_root/logs
ln -s $logroot $apache22_root/logs
chown $userid:$group $logroot
chmod 755 $logroot
fi


#Signature File details
#get_product_dtls $apache22_root $userid $group $version "$prod_arch-Bit" "Apache 2.2 - Apache HTTP Server" "Apache2.2" $apc_enggutils_dir
get_product_dtls $apache22_root $userid $group $version "$prdt_archt""-Bit" "Apache 2.2 - Apache HTTP Server" "Apache2.2" $apc_enggutils_dir

# Generate initscripts and move them into place

if [[ "$initscripts" = "true" ]] ; then
	copy_and_subs ${baseDir}/admin/apache22 /tmp/apache22.$inst
	initscript_add /tmp/apache22.$inst apache22.$inst 99 01
fi

# Fix permissions issue on AIX (similar restrictions not present on Solaris).
# Access needed to /dev/random to generate secret for digest authentication. 
# Access granted to both to allow use of either in SSLRandomSeed.

if [[ `$whoami` = "root" && `uname -s` = AIX ]] ; then	
	chmod a+r /dev/random
	chmod a+r /dev/urandom
fi


# Ok, give some worthwhile advice, if relevant.

if [[ "$quiet" = "false" ]] ; then
	print "Apache $version installed."
	print "Use UNIX userid $userid (not root) to manage it"
	if [[ "$rootok" = "true" ]] ; then
		print "To start and stop web sites listening on ports < 1024, or with rootparent=true"
		print "you'll need to run apache22.sh as root (perhaps via sudo or KeON suexec)"
		print "$apc_enggutils_dir/admin/apache22.keon has a sample KeON suexec route."
	fi
	if [[ $perlbin = $apache22_root/perl5/bin/perl ]] ; then
		print "Please be sure to install Perl 5 within this Apache 2"
	fi
fi

exit 0
./install/pre-chk.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# pre-chk.sh  - Performs a prerequisite check on a host
#
# Description:
# Performs a prerequisite check on a host for space, user id, group,media are
# present. This script is used for Apache 2.2 , PHP 5 and PERL 5
#
#
# Input Parameters: See usage
#
# Revison History:
# MA    13 Apr 2011    Created for Apahce 2.2 
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
#================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product               Prerequisite check Apache Server, PHP or PERL or ModSecurity or Siteminder or Janus"
        print "                               (default:server, options: server,php or perl or modsecurity or siteminder or janus)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
            -configpath)       configpath=$2 ;;
               -product)       product=$2    ;;
                -custom)       custom=$2     ;;
                      *)       usage         ;;
        esac
        shift 2
done

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/installapache22.conf
   elif [[ $product = "php" ]] ; then
         . ${baseDir}/conf/installphp.conf
   elif [[ $product = "perl" ]] ; then
         . ${baseDir}/conf/installperl.conf
   elif [[ $product = "modsecurity" ]] ; then
         . ${baseDir}/conf/installmodsecurity.conf
   elif [[ $product = "siteminder" ]] ; then
	 . ${baseDir}/conf/installsiteminder.conf	
   elif [[ $product = "janus" ]] ; then
	 . ${baseDir}/conf/installjanus.conf	
   fi
fi

#check if path exists or not

if [[ ! -d "$configpath" ]] ; then
        echo "Config path $configpath is not specified.."
        usage
fi

if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=installapache22.conf
      elif [[ $product = "php" ]] ; then
          cfgfile=installphp.conf
      elif [[ $product = "perl" ]] ; then
          cfgfile=installperl.conf
      elif [[ $product = "modsecurity" ]] ; then
          cfgfile=installmodsecurity.conf
      elif [[ $product = "siteminder" ]] ; then
	  cfgfile=installsiteminder.conf 	
      elif [[ $product = "janus" ]] ; then
	  cfgfile=installjanus.conf 	
     fi
     if [[ -r $configpath ]] ; then
        . $configpath/$cfgfile
     fi
fi

#check if Apache 2.2 Server,PHP or PERL installation to execute

if [[ "$product" = "server" ||  "$product" = "php" ||  "$product" = "perl" || $product = "modsecurity"  || $product = "siteminder" || $product = "janus" ]] ; then
        print " "
    if [[ "$product" = "server" ]]  ; then
           prdtocheck="Apache 2.2"
           totalspace=80
           tempspace=10
           prdtinstallspace=70
           productRoot=$apache22_root/corefiles
     elif [[ "$product" = "php" ]]  ; then
           prdtocheck="PHP 5"
           totalspace=80
           tempspace=10
           prdtinstallspace=70
           productRoot=$php5_root
     elif [[ "$product" = "perl" ]]  ; then
           prdtocheck="PERL 5"
           totalspace=80
           tempspace=10
           prdtinstallspace=70
           productRoot=$apache22_root/perl5
     elif [[ $product = "modsecurity" ]] ; then
           prdtocheck="Mod Security"
           totalspace=80
           tempspace=10
           prdtinstallspace=70
           productRoot=$apache22_root/security/modsecurity
     elif [[ $product = "siteminder" ]] ; then
	   prdtocheck="Siteminder R12"
           totalspace=250
           tempspace=10
           prdtinstallspace=250
	   productRoot=$apache22_root/bin/webagent	
     elif [[ $product = "janus" ]] ; then
	   prdtocheck="Janus 3.8.0.0"
           totalspace=250
           tempspace=10
           prdtinstallspace=250
	   productRoot=$jw_root/janusweb/current
    fi
        print "$prdtocheck $product prerequisite check"
else
        usage
fi


####### Media check for product

if [[ $product = "server" ]] ; then

##Check there is not an install already there
    if [[ -r $apache22_root/bin/apachectl ]] ; then
          print "$0: it looks as if there is already an install in $apache22_root"
    exit 37
    fi

echo " "
echo "Info: $prdtocheck media check "

# Check for source media related things being present

determine_rhel_version 2>/dev/null
if [[ "$m64mode" = "true" ]] ; then
		if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then            
                        
                apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-${rhel_version}-x64-jpmc.bin
        else
				apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-x64-jpmc.bin
        fi
else
		if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                 apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin
        else
                 apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-jpmc.bin
        fi
               
fi
echo "***** $apache22_archive **********"
check_file_arc $apache22_archive

#### PHP 5 media check 
 elif [[ $product = "php" ]] ; then

# Look for install

if [[ ! -r $apc_enggutils_dir/admin/apacheutil.conf ]] ; then
        print "$0: no standard build of Apache 2 at $apache22_root"
        exit 36
fi

# Check for source media related things being present

installmode=`cat $apc_enggutils_dir/admin/version.txt|grep "Product Architecture"|awk  '{ print $3 } '`

  if [[ "$m64mode" = "true" ]] ; then
         bitval=64-Bit
  else
         bitval=32-Bit
  fi

  if [[ $installmode != $bitval ]] ; then
        echo "Cant install PHP $bitval as Apache is $installmode."
        exit 124
  fi

determine_rhel_version 2>/dev/null
if [[ "$m64mode" = "true" ]] ; then
        m=x64
	if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
        	apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin
                
        else
               apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
        fi
               
elif [[ "$installmode" = "64" ]] ; then
        m=x64
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
		 apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin
                
        else
                 apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
	fi
else
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin
        else
        	apache22_php_archive=$media/apache-php-$version.$jpmcversion-`uname -s`-jpmc.bin
        fi
           
fi
echo "********* $apache22_php_archive ***********"
check_file_arc $apache22_php_archive

#### Perl 5
elif [[ $product = "perl" ]] ; then

# Look for install

if [[ ! -r $apc_enggutils_dir/admin/apacheutil.conf ]] ; then
        print "$0: no standard build of Apache 2.2 at $apache22_root"
        exit 36
fi

# Check for source media related things being present

installmode=`cat $apc_enggutils_dir/admin/version.txt|grep "Product Architecture"|awk  '{ print $3 } '`

  if [[ "$m64mode" = "true" ]] ; then
         bitval=64-Bit
  else
         bitval=32-Bit
  fi

  if [[ $installmode != $bitval ]] ; then
        echo "Cant install Perl $bitval as Apache is $installmode."
        exit 125
  fi
determine_rhel_version 2>/dev/null
if [[ "$m64mode" = "true" ]] ; then
        m=x64
	if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
		apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin
                
        else
                apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
        fi
               
elif [[ "$installmode" = "64" ]] ; then
        m=x64
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
		apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin
                
        else
                apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
        fi
else
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin
        else
                apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-jpmc.bin
        fi
           
fi
echo "********** $apache22_perl_archive ***********"
check_file_arc $apache22_perl_archive

# Umask
# Note: ksh umask builtin reports three octal digits

if [[ `umask` != 022 ]] ; then
        umask 022
fi

## MOD Security
#

elif [[ $product = "modsecurity" ]] ; then

# Look for install

if [[ ! -r $apc_enggutils_dir/admin/apacheutil.conf ]] ; then
        print "$0: no standard build of Apache 2.2 at $apache22_root"
        exit 36
fi

installmode=`cat $apc_enggutils_dir/admin/version.txt|grep "Product Architecture"|awk  '{ print $3 } '`
apacheversion=`cat $apc_enggutils_dir/admin/version.txt|grep "Product version"|awk  '{ print $3 } '`
#if [[ "$apacheversion" != "2.2.17" ]] ; then
 if [[ "$apacheversion" < "2.2.17" ]] ; then
        print "Your Apache installed version is" $apacheversion.
        print "Apache Version 2.2.17 required for ModSecurity."
        exit 1
fi


# Check for source media related things being present
determine_rhel_version 2>/dev/null

if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
		apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-${rhel_version}-x64-jpmc.bin	
        else
                apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-x64-jpmc.bin
        fi

else

        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
               
		apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin

        else
                apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-jpmc.bin

        fi
fi

echo "********** $apache22_modsecurity_archive ************"

check_file_arc $apache22_modsecurity_archive

fi

## Siteminder WebAgent
#

if [[ $product = "siteminder" ]] ; then
  if [[ -r ${apache22_root}/webagent/bin/libmod_sm22.so ]] ; then
    print "$0: It looks as if there is already an install of Siteminder under $apache22_root"
    exit 37
  fi
  if [[ -r ${apc_enggutils_dir}/admin/siteminder-version.txt ]] ; then
    print "$0: It looks as if there is already an installation under $apc_enggutils_dir"
    exit 37
  fi
fi

## Janus WebAgent
#

if [[ $product = "janus" ]] ; then
   if [[ -r ${jw_root}/janusweb/current/bin/janusweb.sh ]] ; then 
     print "$0: It looks as if there is already an install of Janus under $apache22_root"
     exit 38
   fi
   if [[ -r ${apc_enggutils_dir}/admin/janus-version.txt ]] ; then
     print "$0: It looks as if there is already an installation under $apc_enggutils_dir"
    exit 37
  fi
fi



################# Space check
# Space check
#   Base product install requires
#      10MB transient space on /tmp
#      70MB space in $apache22_root for Apache

echo " "
echo "Info: Disk Space Check for $prdtocheck"

mkdir -p $productRoot

devi=`device_of $productRoot`
devt=`device_of /tmp`
if [[ "$devi" = "$devt" ]] ; then
        free_mb $devi $totalspace
else
        free_mb $devi $prdtinstallspace
        free_mb $devt $tempspace
fi
#*-------------------END-------------------------*


#######Check required userids and groups exists

echo " "
echo "Info: User/Group Id Check"

check_group $group
check_userid $userid
check_primary_group $userid $group

#######Umask
# Check target userid won't expose sensitive details

# Note: ksh umask builtin reports three octal digits
if [ `umask` != 022 ] ; then
        umask 022
fi

./install/installsiteminder.sh
========================================
#!/bin/ksh
# installsiteminder.sh - Install Siteminder Web agent
#
# Allow for multiple numbered side by side installations.
#
# We consider siteminder to be the "vendor" and the .zip file obtained from
# siteminder web site http://wsso.jpmchase.net/downloads/dloadsWebAgents.asp to be the "vendor media".
#
# Deployment restriction/limitation:
# With Apache  one installation of the product supports zero or more websites.
# With the Siteminder product, one install supports 0 to many websites.
# Websites sharing the same WebAgent_ws1.conf,
# in other words, you don't run multiple copies of the agent, each with
# seperate WebAgent_ws1.conf to serve independant websites.
#
# Inherited from initial version of Siteminder.
# RR, 07 Aug 2009, Modified to take care in Apache 2.2
# RR, 25 Aug 2011, Modified for E-1.2.0.  Eng Scripts are now part of Apache (SBA) suite + CR35 + Sig file

# --------------------------------------------------
# Note: 
# This script is now called from run.sh 
# installsiteminder.sh $custom $configpath
# custom = true or false. true = read conf file from $configpath. false = read from ../conf/
# configpath is the config file is held
# --------------------------------------------------
# Platform specific things

buildreleasedate="Sep 2011"
buildversion="E-1.2.0"

case `uname -s` in
  Linux)
    whoami=whoami
    ;;
  SunOS)
    whoami=/usr/ucb/whoami
    ;;
  AIX)
    whoami=whoami
    ;;
  *)
    print "$0: unsupported platform"
    exit 1
    ;;
esac

SCRIPTDIR=`dirname $0`
cd $SCRIPTDIR

# Display usage, and quit
usage() {
	print "usage: $0 {flags}"
	print "flags: -inst number       Installation instance number"
	print "                          default: none, must be specified)"
	print "       -version ver       Siteminder version number"
	print "                          (default: 12.0-sp3-cr009)"
	print "       -media dir         location with binary archive files"
	print "                          (default: media subdirectory)"
	print "       -apache22_root dir  Apache instance check "
	print "                          (default:/local/apache22/<inst>)"
	print "       -quiet flag        install quietly, true or false"
	print "                          (default: false)"
	exit 2
}


# Get the utility functions we need

. ../utility/utilcommon.sh
. ../utility/utilinstall.sh
. ../utility/sgtfile.sh

#Config file for Standard build architecture
# $1 refers to custom
if [[ $1 = "true" ]] ; then
  if [ -r $2/installsiteminder.conf ] ; then
    . $2/installsiteminder.conf
  else
    print "$0: Cannot read configuration file $2/installsiteminder.conf"
    exit 1
  fi
else
  . ../conf/installsiteminder.conf
fi


# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

# inst=
# stmw_root=
# stversion=12.0-sp3-cr009
## apachever=2.2
# bitflag=false
# media="media/../siteminder"
# userid=
# group=
# quiet=false
# version=
# apache22_root=
# eu-scriptdir=

# Parse arguments

if [[ "$inst" = "" || "$apache22_root" = "" || "$apc_enggutils_dir" = "" || "$stversion" = "" || "$media" = "" ]] ; then
  #usage
  print "$0: Missing parameter from configuration file"
  exit 1
fi

  apache22_root=$apache22_root
  stmw_root=$apache22_root

if [[ "$media" != /* ]] ; then
  media=`pwd`/$media
fi


# Check existance for Apache 
if [ ! -d ${apache22_root} ] ; then
  print "$0: Cannot find the Apache instance in $apache22_root"
  exit 1
fi

# Check if Apache installation is SBA compliant.
# If so, get inst apache_install_root apc_enggutils_dir userid group product_ver
# from previous apache installation
#
if [ ! -r ${apc_enggutils_dir}/admin/apacheutil.conf ] || [ ! -r ${apc_enggutils_dir}/admin/version.txt ] ; then
  print "$0: This Apache installation is not of build E-1.2.0 or higher"
  exit 53
else
  . ${apc_enggutils_dir}/admin/apacheutil.conf
fi

#Important check: Siteminder version compatibility with Apache 2.2

apache_bitver=`grep "Product Architecture:" ${apc_enggutils_dir}/admin/version.txt | cut -d':' -f2 | tr -d " " | cut -c 1-2`
if [[ "$apache_bitver" = 64 ]] ; then
  bitsizevalue=64
else
  bitsizevalue=32
fi
print ""
print "Info: Installing "$bitsizevalue"-bit Siteminder"

#Pick up the right OS binaries for siteminder
def_version=$stversion
case `uname -s` in
  Linux)
    if [[ `uname -m` = x86_64 && "$bitsizevalue" = 64 ]] ; then
      arch=linux-x86-64
    else
      arch=linux
    fi
    ;;
  SunOS)
    case "$bitsizevalue" in
      64)
        arch=sol64
        ;;
      32)
        arch=sol
        ;;
    esac
    ;;
  AIX)
    case "$bitsizevalue" in
      64)
        arch=aix64
        ;;
      32)
        arch=aix
        ;;
    esac
    ;;
esac

version=$def_version-$arch


# Check required userids and groups exists

if [[ $userid = root ]] ; then
  print "$0: root should not be used to own and run Apache 2.2"
  exit 30
fi

check_group $group
check_userid $userid
check_primary_group $userid $group

# Check for source media related things being present

space=0
jw_archive=$media/smwa-$version
check_file_arc $jw_archive
space=$(( space + 250 ))

# Need at least one Apache version

if [[ $space -eq 0 ]] ; then
     print "$0: need at least one Apache version"
     exit 32
fi

# Check for parts of this script (files needed by it) being present

files="../admin/configuresiteminder.sh ../admin/deletesiteminder.sh ../admin/unconfiguresiteminder.sh ../admin/siteminder-version.txt ../admin/sigfile-reg-web.sh"


for f in `pwd`/$files ; do
    check_file $f
done


# Userid check

# if [[ `$whoami` != "root" && $initscripts = "true" ]] ; then
if [[ `$whoami` != "root" ]] ; then
  ## # print "$0: install must be done as root so that initscripts may be installed"
  print "$0: Install must be done as root"
  exit 33
fi


# Check there is an installation already

if [[ -r ${apache22_root}/bin/webagent/libmod_sm22.so ]] ; then
  print "$0: It looks as if there is already an install of Siteminder under $apache22_root"
  exit 37
fi
if [[ -r ${apc_enggutils_dir}/admin/siteminder-version.txt ]] ; then
  print "$0: It looks as if there is already an installation under $apc_enggutils_dir"
  exit 37
fi

# Umask
umask 022

# Space check
#   Base product install requires
#       1MB transient space on /tmp
#     250MB space in $stmw_root for Siteminder Web agent

# no need to mkdir as it's now under Apache installation
# mkdir -p $stmw_root

devi=`device_of $stmw_root`
devt=`device_of /tmp`
if [[ "$devi" = "$devt" ]] ; then
  free_mb $devi $(( space + 1 ))
else
  free_mb $devi $space
  free_mb $devt 1
fi

# Log
log=/tmp/installsiteminderweb.$hostname.$inst.$$

####################################################

print "=== $0 ===" > $log

env >> $log
df -k >> $log 2>&1

# Copy our files into the install
## mkdir -p $stmw_root/siteminderu 2> /dev/null
cp -p $files ${apc_enggutils_dir}/admin 2> /dev/null

# Expand Siteminder Web agent
# Note we don't do the "current" link the same way.

jw_archive=$media/smwa-$version
expand_arc $jw_archive $stmw_root
cd $stmw_root

# Had to convert upper to lower case as sitminder dont have a proper naming convention 
# The actual file name is all in upper case but the install binary file name is in lower case.

convert=`echo "ca-wa-$version.bin" | tr '[:upper:]' '[:lower:]'`
chmod 775 $stmw_root/$convert
./$convert -i silent -DUSER_INSTALL_DIR=$stmw_root -DPROGRAMS_DIR=/tmp/  > /dev/null 2>&1 


if [[ ! -r $stmw_root/webagent/bin/libmod_sm22.so ]] ; then
	print "$0: didn't install everything, investigate why"
	exit 53
fi

# Copy our files into the install
# cp $files $stmw_root  

#Remove install media
rm -rf $stmw_root/$convert readme.txt 2> /dev/null

# Ownerships, all is owned by chosen userid:group

chown -Rh $userid:$group ${stmw_root}/webagent
chown -Rh $userid:$group ${apc_enggutils_dir}/admin

# Set sensible permissions

chmod -R  a+r ${stmw_root}/webagent
chmod -R  u+w ${stmw_root}/webagent
chmod -R go-w ${stmw_root}/webagent
find ${stmw_root}/webagent -type d -exec chmod a+x {} \;

#Changes to version.txt
cp -p ${apc_enggutils_dir}/admin/siteminder-version.txt ${apc_enggutils_dir}/admin/siteminder-version.txt-backup
buildreleasedate=`echo $buildreleasedate | tr -d " "`
sed \
 -e "s/@version@/"$version"/" \
 -e "s/@bitsizevalue@/"$bitsizevalue"/" \
-e "s/@buildreleasedate@/"$buildreleasedate"/" \
-e "s/@buildversion@/"$buildversion"/" \
  ${apc_enggutils_dir}/admin/siteminder-version.txt-backup > ${apc_enggutils_dir}/admin/siteminder-version.txt 2> /dev/null

rm ${apc_enggutils_dir}/admin/siteminder-version.txt-backup


#Signature File details
get_product_dtls $apache22_root $userid $group $stversion "$bitsizevalue" "Siteminder-Apache-$stversion" "SM$stversion" $apc_enggutils_dir

exit 0
./install/updateapache22.sh
========================================
#!/bin/ksh
#
# updateapache22.sh - Update Apache 2.2
#
# Update our tools in <APACHE22_ROOT>/eu-apache22u/<inst no>
#
# SM, 20 Nov 2006, initial version, from apache2 by AK
# AK, 11 Dec 2007, suppress df error
# MA, 05 May 2007, Modified some of the code for SBA

# Platform specific things

case `uname -s` in
	Linux)
		whoami=whoami
		unalias rm mv cp
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		;;
	AIX)
		whoami=whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number       installation instance number"
	print "                          (default: none, must be specified)"
	print "       -apache22_root dir  Apache installation directory"
	print "                          (default: /local/apache22/<inst>)"
        print "       -apc_enggutils_dir Apache engineering directory"
        print "                          (default: /local/apache22/eu-apache22u/<inst>)"
	print "       -initscripts flag  install initscripts"
	print "                          (default: true)"
	print "       -action choice     one of check, install"
	print "                          (default: install)"
	print "       -rootok flag       allow running as root"
	print "                          (default: false)"
	print "       -quiet flag        install quietly, true or false"
	print "                          (default: false)"
	exit 2
	}

# Get the utility functions we need

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

mod_conf()
      # $1=envvars
      {
 cat $1 | \
     sed 's/apc_enggutils_dir/ i\' > $2
print "apc_enggutils_dir=$apc_enggutils_dir" >> $2
}

update()
        # $1=target
        # $2=source
        {
            cmp $1 $2 > /dev/null 2> /dev/null
            if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
                rm $2
            elif [[ -w $1 ]] ; then
                cp -p $1 $1-pre_config
                cat $2 > $1
                rm $2
                print "$0: $1 backed up and updated"
            else
                print "$0: $1 needs replacing with $2"
            fi
        }


inst=
apache22_root=
rootok=false
initscripts=true
action=install
quiet=false
apc_enggutils_dir=
xopts=

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-ins*)		inst=$2 ;;
		-ap*)		apache22_root=$2 ;;
		-root*)		rootok=$2 ;;
		-init*)		initscripts=$2 ;;
		-ac*)		action=$2 ;;
		-q*)		quiet=$2 ;;
		-x)		xopts=$2 ;;
                -apc_enggutils) apc_enggutils_dir=$2 ;;
		*)		usage ;;
	esac
	shift 2
done


if [[ "$inst" = "" ]] ; then
	usage
fi

if [[ "$apache22_root" = "" ]] ; then
	apache22_root=/local/apache22/$inst
fi

if [[ "$apc_enggutils_dir" = "" ]] ; then
        apc_enggutils_dir=/local/apache22/eu-apache22u/$inst
fi

# Is the an install there to update

if [[ ! -r $apc_enggutils_dir/admin/apacheutil.conf ]] ; then
        print "$0: Doesn't appear to be a Standard Build Architecture build of Apache 2.2. Can't update.."
        exit 34
fi

# Pick up the full configuration

. $apc_enggutils_dir/admin/apacheutil.conf


if [[ "$initscripts" != "true" && "$initscripts" != "false" ]] ; then
	usage
fi

if [[ "$action" != "check" && "$action" != "install" ]] ; then
	usage
fi

if [[ "$quiet" != "true" && "$quiet" != "false" ]] ; then
	usage
fi

if [[ "$1" != "" ]] ; then
	usage
fi

# Check required userids and groups exists

if [[ $userid = root ]] ; then
	print "$0: root should not be used to own and run Apache 2.2"
	exit 30
fi

# Check for parts of this script (files needed by it) being present

mkdir -p $apache22_root

#Standard build architecture eu-apache22u utility directory will be outside the product install path
#Ex: /local/apache22/eu-apache22u/<inst no>
        mkdir -p $apc_enggutils_dir


mkdir -p $apc_enggutils_dir/utility $apc_enggutils_dir/logs $apc_enggutils_dir/archive $apc_enggutils_dir/admin $apc_enggutils_dir/monitoring $apc_enggutils_
dir/performance $apc_enggutils_dir/security $apc_enggutils_dir/testing

files_utility="
${baseDir}/utility/utilcommon.sh $apc_enggutils_dir/utility
"

files_security="
${baseDir}/security/verisignclass3ca2028.cer
${baseDir}/security/verisignclass3intca2011.cer
${baseDir}/security/aseCA.cer
${baseDir}/security/setCA.sh
${baseDir}/security/getCA.sh
${baseDir}/security/makecert.sh $apc_enggutils_dir/security
"

files_admin="
${baseDir}/admin/version.txt
${baseDir}/admin/apache22u.top
${baseDir}/admin/cribsheet.html
${baseDir}/admin/createwebsite.sh
${baseDir}/admin/deletewebsite.sh
${baseDir}/admin/cfgmodajp.sh
${baseDir}/admin/apache22.sh
${baseDir}/admin/rotatelogs.sh
${baseDir}/admin/determine.sh
${baseDir}/admin/apache22.keon
${baseDir}/admin/test-cgi $apc_enggutils_dir/admin
"

files_testing="
${baseDir}/testing/test-perl.pl
${baseDir}/testing/phpinfo.php $apc_enggutils_dir/testing
"

for f in $files_security $files_utility $files_admin $files_testing
do
        check_file $f
done


# Record the configuration
cp $apache22_root/apache22u/apacheutil.conf $apc_enggutils_dir/admin/

 mod_conf $apc_enggutils_dir/admin/apacheutil.conf $apc_enggutils_dir/admin/apacheutil.conf-backup
 update $apc_enggutils_dir/admin/apacheutil.conf $apc_enggutils_dir/admin/apacheutil.conf-backup 2> /dev/null

check_file apache22.keon

# Check running as root

if [[ `$whoami` != "root" ]] ; then
	print "$0: must be root"
	exit 33
fi

# Checks complete

if [[ "$action" = "check" ]] ; then
	exit 0
fi

# Log
mkdir -p /tmp/apache22 #Directory for logs
log=/tmp/apache22/updateapache22.$hostname.$inst

print "=== updateapache22.sh ===" > $log

env >> $log
df -k >> $log 2>&1

# Make sample KeON routes

copy_and_subs ${baseDir}/admin/apache22.keon $apc_enggutils_dir/admin/apache22.keon
# Re-Make templates

${baseDir}/admin/maketemplates.sh -inst $inst -apache22_root $apache22_root -apc_enggutils_dir $apc_enggutils_dir

# Ownerships and permissions
# All is owned by chosen userid:group
chown -Rh $userid:$group $apc_enggutils_dir
chown -Rh $userid:$group $apc_enggutils_dir/../

find $apc_enggutils_dir -type d -exec chmod a+x {} \;
find $apc_enggutils_dir/../ -type d -exec chmod a+x {} \;
chmod -R  a+r $apc_enggutils_dir
chmod -R  u+w $apc_enggutils_dir
chmod -R go-w $apc_enggutils_dir

# Our value-add is mainly non-sensitive
chmod 644 $apc_enggutils_dir/admin/* $apc_enggutils_dir/archive/* $apc_enggutils_dir/logs/* $apc_enggutils_dir/monitoring/* $apc_enggutils_dir/performance/*
$apc_enggutils_dir/security/* $apc_enggutils_dir/testing/* $apc_enggutils_dir/utility/* 2> /dev/null


chmod 755 $apc_enggutils_dir/archive/*.sh $apc_enggutils_dir/admin/*.sh $apc_enggutils_dir/logs/*.sh $apc_enggutils_dir/monitoring/*.sh $apc_enggutils_dir/se
curity/*.sh $apc_enggutils_dir/utility/*.sh $apc_enggutils_dir/performance/*.sh $apc_enggutils_dir/testing/*.sh 2> /dev/null

# Generate initscripts and move them into place

if [[ "$initscripts" = "true" ]] ; then
	copy_and_subs apache22 /tmp/apache22.$inst
	initscript_add /tmp/apache22.$inst apache22.$inst 99 01
fi

# Ok, give some worthwhile advice, if relevant.

if [[ "$quiet" = "false" ]] ; then
	print "Apache 2.2 updated."
fi

exit 0
./install/installperl5.sh
========================================
#!/bin/ksh
#set -x
# installperl5.sh - Install the Perl 5 to use within Apache 2.2
#
# Unarchive the pre-compiled Perl 5 binary.
# Although our build scripts create .tar.gz files, we cope with .zip etc too.
# Adjust paths within Perl.
#
# SM, 29 Sept 2006, initial version,  from installperl5.sh of apache2 build from AK.
#                  non-root install (customer request)
#                  patch scripts even if suffixed with version number
# SM, 01 Aug 2007, Changed the default jpmcversion to 9. picked up mod_perl versino 2.0.3
#                  jpmcversion has incorrectly been done starting from 8.   If there has to be another build for the same version of perl, the jpmcversion numbers will probably have to be adjusted retrospectively.   
# AK, 11 Dec 2007, suppress df error
# IS, 24 Dec 2008, Pick up Perl 5.10.0
# PP, 12 Feb 2009, Update to include support for 64 bit
# RR, 12 Feb 2010, Added support for AIX 32/64 bit

# Platform specific things

buildreleasedate="Nov 2015"
buildversion="E-1.19.2"

case `uname -s` in
	Linux)
		whoami=whoami
                unalias rm mv cp
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		;;
	AIX)
		whoami=whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number       installation instance number"
	print "                          (default: none, must be specified)"
	print "       -apache22_root dir  Apache installation directory"
	print "                          (default: /local/apache22/<inst>)"
	print "       -version v         Perl version number"
	print "                          (default: 5.12.3)"
	print "       -jpmcversion v     Perl JPMC version number"
	print "                          (default: 0)"
	print "       -media dir         location with binary archive files"
	print "                          (default: media subdirectory)"
	print "       -64bit flag        flag to set to 64 bit"
	print "                          (default: false)"
	print "       -action choice     one of check, install"
	print "                          (default: install)"
	print "       -quiet flag        install quietly, true or false"
	print "                          (default: false)"
	exit 2
	}

# Get the utility functions we need

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh
. ${baseDir}/utility/sgtfile.sh

#Config file for Standard build architecture

if [[ $1 = "true" ]] ; then
. $2/installperl.conf
else
. ${baseDir}/conf/installperl.conf
fi

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

#inst=
#apache22_root=
#version=5.12.3
#jpmcversion=0
#media=media
#action=install
#quiet=false
#xopts=
#64bit=false
#m64mode=false


# Parse arguments

if [[ "$inst" = "" ]] ; then
	#usage
       print ""
fi

if [[ "$apache22_root" = "" ]] ; then
	apache22_root=/local/apache22/$inst
fi

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$action" != "check" && "$action" != "install" ]] ; then
	#usage
        print ""
fi

if [[ "$1" != "" ]] ; then
	#usage
        print ""
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
fi	

if [[ -r ${apc_enggutils_dir}/admin/perl-version.txt ]] ; then
  print "$0: It looks as if there is already an installation under $apache22_root"
  exit 37
fi


# Umask
# Note: ksh umask builtin reports three octal digits

if [[ `umask` != 022 ]] ; then
	umask 022
fi

# Pick up variables

. $apc_enggutils_dir/admin/apacheutil.conf

# Checks complete

if [[ "$action" = "check" ]] ; then
	exit 0
fi

# Log
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/installperl5$m.$hostname.$inst

print "=== installperl5.sh ===" > $log

env >> $log
df -k >> $log 2>&1

# Install

# Check for source media related things being present
determine_rhel_version
if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
		apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin
                
        else
                apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
        fi

else

        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin
        else
                apache22_perl_archive=$media/apache-perl-$version.$jpmcversion-`uname -s`-jpmc.bin
        fi
fi
if [[ "$m64mode" = "true" ]] ; then
  bitsizevalue=64-Bit
else
  bitsizevalue=32-Bit
fi
#print ""
print "Info: Installing "$bitsizevalue" Perl"


expand_arc $apache22_perl_archive $apache22_root
if [[ ! -f $apache22_root/modules/mod_perl.so ]] ; then
	print "$0: didn't install all of Perl 5, investigate why"
	exit 53
fi

# Patch up references within our Perl to Apache and its own install directory.
# I'm not 100% sure this will address everything, but we should at least try.
# May need to add to list of files with later versions of Perl.

for f in \
	$apache22_root/perl5/bin/pod2html \
	$apache22_root/perl5/bin/pod2latex \
	$apache22_root/perl5/bin/pod2man \
	$apache22_root/perl5/bin/pod2text \
	$apache22_root/perl5/bin/pod2usage \
	$apache22_root/perl5/bin/podchecker \
	$apache22_root/perl5/bin/podselect \
	$apache22_root/perl5/bin/c2ph \
	$apache22_root/perl5/bin/cpan \
	$apache22_root/perl5/bin/dprofpp \
	$apache22_root/perl5/bin/enc2xs \
	$apache22_root/perl5/bin/h2ph \
	$apache22_root/perl5/bin/h2xs \
	$apache22_root/perl5/bin/instmodsh \
	$apache22_root/perl5/bin/libnetcfg \
	$apache22_root/perl5/bin/perlbug \
	$apache22_root/perl5/bin/perlcc \
	$apache22_root/perl5/bin/perldoc \
	$apache22_root/perl5/bin/perlivp \
	$apache22_root/perl5/bin/piconv \
	$apache22_root/perl5/bin/pl2pm \
	$apache22_root/perl5/bin/prove \
	$apache22_root/perl5/bin/splain \
	$apache22_root/perl5/bin/xsubpp \
	$apache22_root/perl5/bin/find2perl \
	$apache22_root/perl5/bin/s2p \
	$apache22_root/perl5/bin/pstruct \
	$apache22_root/perl5/bin/psed \
	$apache22_root/perl5/bin/mp2bug \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed "s?/local/apache22build$m/apache22?$apache22_root?g" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
	if [[ -r $f$version ]] ; then
		cp $f$version $f$version-pre_fix_dir
		sed "s?/local/apache22build$m/apache22?$apache22_root?g" \
			< $f$version-pre_fix_dir \
			> $f$version
		rm $f$version-pre_fix_dir
	fi
done

for f in \
	$apache22_root/perl5/lib/*/*/CORE/config.h \
	$apache22_root/perl5/lib/*/*/Config.pm \
	$apache22_root/perl5/lib/*/*/.packlist \
	$apache22_root/perl5/lib/*/*/perllocal.pod \
	$apache22_root/perl5/lib/*/*/*.pl \
	$apache22_root/perl5/lib/site_perl/*/*/auto/mod_perl2/.packlist \
	$apache22_root/perl5/lib/site_perl/*/*/Apache2/BuildConfig.pm \
	$apache22_root/perl5/lib/site_perl/*/*/Apache2/TestConfigData.pm \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed "s?/local/apache22build$m/apache22?$apache22_root?g" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
done

#Changes to version.txt
cp -p ${baseDir}/admin/perl-version.txt ${apc_enggutils_dir}/admin/perl-version.txt
cp -p ${apc_enggutils_dir}/admin/perl-version.txt ${apc_enggutils_dir}/admin/perl-version.txt-backup
buildreleasedate=`echo $buildreleasedate | tr -d " "`
sed \
 -e "s/@version@/"$version"/" \
 -e "s/@bitsizevalue@/"$bitsizevalue"/" \
-e "s/@buildreleasedate@/"$buildreleasedate"/" \
-e "s/@buildversion@/"$buildversion"/" \
  ${apc_enggutils_dir}/admin/perl-version.txt-backup > ${apc_enggutils_dir}/admin/perl-version.txt 2> /dev/null

rm ${apc_enggutils_dir}/admin/perl-version.txt-backup


#Signature File details
get_product_dtls $apache22_root $userid $group $version "$bitsizevalue" "Apache-Perl-$version" "Perl$version" $apc_enggutils_dir


exit 0
./install/installjanus.sh
========================================
#!/bin/ksh
#set -x
# installjanus.sh - Install Janusweb
#
# Install IBs Janus Web Agent.
# Allow for multiple numbered side by side installations.
#
# We consider IB to be the "vendor" and the .tgz file obtained from
# "Janus Support" to be the "vendor media".
#
# Deployment restriction/limitation:
# With the Apache and Tomcat and other builds, one installation of the
# product supports zero or more websites or machines.
# With the Janus product, one install supports _ONE_ website.
# Or as a special case, websites sharing the same janus.conf.
# In other words, you don't run multiple copies of the agent, each with
# seperate janus.conf and janus.properties, to serve independant websites.
# This is consistent with IBs stated web design patterns.
#
# AK, 30 Oct 2007, initial version
# AK, 04 Nov 2007, control arch used on 64 bit Linux
# MA, 07 Apr 2009, New version of Janus and minor script changes
# MA, 05 Apr 2009, Script modified to copy janus configuration and delete scripts.
# AR, 12 Sep 2013, Add Janus Support to the Apache build.
buildreleasedate="June 2009"
buildversion="E-1.7.0"


# Platform specific things

case `uname -s` in
	Linux)
		whoami=whoami
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number       installation instance number"
	print "                          default: none, must be specified)"
	print "       -media dir         location with binary archive files"
	print "                          (default: media subdirectory)"
	print "       -initscripts flag  install initscripts"
	print "                          (default: true)"
        print "       -apache22_root dir  Apache instance check "
        print "                          (default:/local/apache22/<inst>)"	
        print "       -quiet flag        install quietly, true or false"
	print "                          (default: false)"
	exit 2
	}


# Manipulations we do on the supplied configuration files

make_sample_properties()
	{
	sed "s?@JANUS_HOME@?$jw_root?g" |\
	sed "s?\(com\.jpmorgan\.olympus\.janus\.prProxy[0-9][0-9]*\)=.*?\1=?"
	}

make_sample_conf()
	{
	sed "s?@JANUS_HOME@?$jw_root?g" |\
	awk ' /<Location "\/@APPL_LOCATION@">/,/<\/Location>/ { p="#" } { print p $0 ; p="" } '
	}

# Get the utility functions we need

. ../utility/utilcommon.sh
. ../utility/utilinstall.sh
. ../utility/sgtfile.sh

#Config file for Standard build architecture
# $1 refers to custom
if [[ $1 = "true" ]] ; then
  if [ -r $2/installjanus.conf ] ; then
    . $2/installjanus.conf
  else
    print "[ERROR] $0: Cannot read configuration file $2/installjanus.conf"
    exit 1
  fi
else
  . ../conf/installjanus.conf
fi

# Get the utility functions we need
#. ./utilcommon.sh
#. ./utilinstall.sh

# Vars
hostname=`hostname|cut -d. -f1`

# Defaults

#inst=
#jw_root=
#version=3.8.0.0
#apachever=2.2
#install64bit=false
#media=media
#userid=webuser
#group=webgroup
#initscripts=true
#quiet=false
#keepdata=false
#apache22_root=

# Parse arguments

if [[ "$inst" = "" || "$apache22_root" = "" || "$apc_enggutils_dir" = "" || "$media" = "" ]] ; then
  #usage
  print "[ERROR] $0: Missing parameter from configuration file"
  exit 1
fi

  
apache22_root=$apache22_root
jw_root=$apache22_root

if [[ "$media" != /* ]] ; then
  media=`pwd`/$media
fi

# Check existance for Apache
if [ ! -d ${apache22_root} ] ; then
  print "$0: Cannot find the Apache instance in $apache22_root"
  exit 1
fi

# Check if Apache installation is SBA compliant.
# If so, get inst apache_install_root apc_enggutils_dir userid group product_ver
# from previous apache installation
#
if [ ! -r ${apc_enggutils_dir}/admin/apacheutil.conf ] || [ ! -r ${apc_enggutils_dir}/admin/version.txt ] ; then
  print "$0: This Apache installation is not of build E-1.2.0 or higher"
  exit 53
else
  . ${apc_enggutils_dir}/admin/apacheutil.conf
fi

#Important check: Janus version compatibility with Apache 2.2
#Check if Apache is installed under the specified directory.

if [[ ! -r $apache22_root/admin/version.txt ]] ; then
  print "[ERROR] $0: Apache is'nt installed under $apache22_root"
  exit 53
else
  apache_bitver=`grep "Product Architecture:" $apache22_root/admin/version.txt | cut -d':' -f2 | tr -d " " | cut -c 1-2`
  if [[ "$apache_bitver" = 64 ]] ; then
     bitsizevalue=64
   print " ........Installing "$bitsizevalue"-bit Janus"
  fi
fi

def_version=$jwversion
case `uname -s` in
	Linux)
		if [[ `uname -m` = x86_64 ]] ; then
			case "$bitsizevalue" in
				64)
					arch=linux-amd64
					;;
				32)
					arch=linux
					;;
				*)
				        print "[ERROR] $0: unsupported platform"
                                 	usage
					;;
			esac
		else
			arch=linux
		fi
		;;
        SunOS)
                        case "$bitsizevalue" in
                                64)
                                       #arch=solaris-??
                                       #def_version=$version
                                       print "[ERROR] $0: Janus webagent for Solaris 64-bit isnt available"
			               exit 1

                                        ;;
                                32)
                                       arch=solaris
                                       ;;
                                *)
                                       print "[ERROR] $0: unsupported platform" 
                                        usage
                                        
					;;
                        esac
    
esac

version=$def_version-apache22-$arch

if [[ "$initscripts" != "true" && "$initscripts" != "false" ]] ; then
	usage
fi

if [[ "$quiet" != "true" && "$quiet" != "false" ]] ; then
	usage
fi

#if [[ "$1" != "" ]] ; then
#	usage
#fi

# Check required userids and groups exists

if [[ $userid = root ]] ; then
	print "[ERROR] $0: root should not be used to own and run Apache 2.2"
	exit 30
fi

check_group $group
check_userid $userid
check_primary_group $userid $group

# Check for source media related things being present

space=0
	jw_archive=$media/janusweb-$version
	check_file_arc $jw_archive
	space=$(( space + 150 ))

# Need at least one Apache version

if [[ $space -eq 0 ]] ; then
	print "[ERROR] $0: need at least one Apache version"
	exit 32
fi

# Check for parts of this script (files needed by it) being present

#utilcommon.sh
files="
../admin/janusweb
../admin/janus-version.txt
../admin/janusweb.sh
../admin/configurejanus.sh
../admin/unconfigurejanus.sh
../admin/janustemplate.properties
../un-install/deleteJanus.sh
../admin/janusaddsite.sh
../admin/janusdelsite.sh
"

for f in $files ; do
    check_file $f
done

# Userid check

if [[ `$whoami` != "root" && $initscripts = "true" ]] ; then
	print "[ERROR] $0: install must be done as root so that initscripts may be installed"
	exit 33
fi

# Check there is not an install already there
if [[ -r ${apc_enggutils_dir}/admin/janus-version.txt ]] ; then
        print "[ERROR] $0: It looks as if there is already an install of Janus under $jw_root/janusweb/current"
        exit 37
fi


# Umask

umask 022

# Space check
#   Base product install requires
#       1MB transient space on /tmp
#     150MB space in $jw_root for Janus Web

mkdir -p $jw_root

devi=`device_of $jw_root`
devt=`device_of /tmp`
if [[ "$devi" = "$devt" ]] ; then
	free_mb $devi $(( space + 1 ))
else
	free_mb $devi $space
	free_mb $devt 1
fi

# Log

log=/tmp/installjanus.$hostname.$inst

print "[INFO] === installjanus.sh ===" > $log

env >> $log
df -k >> $log 2>&1

# If keeptata, save any pre-existing configuration

confdir=$jw_root/janusweb/current/config
conffiles="janus.conf janus.properties"

if [[ "$keepdata" = "true" ]] ; then
	for c in $conffiles ; do
		if [[ -r $confdir/$c ]] ; then
			cp -p $confdir/$c $confdir/$c-keep
		fi
	done
fi


# Expand Janus Web
# Note we don't do the "current" link the same way.

mkdir -p $jw_root/janusweb/current
	jw_archive=$media/janusweb-$version
	expand_arc $jw_archive $jw_root
	cp -pr $jw_root/janusweb/*-apache22/* $jw_root/janusweb/current
	rm -rf $jw_root/janusweb/*-apache22

if [[ ! -r $jw_root/janusweb/current/bin/janusweb.sh ]] ; then
	print "$0: didn't install everything, investigate why"
	exit 53
fi

# Ensure new configuration files have the right target directory
# If keepdata, then restore prior configuration, if it was present.
# If keepdata and there was no prior configuration, then don't do anything. 
# If not keepdata, then put initial configuration files in place.

for c in $conffiles ; do
	make_sample_${c##*.} < $confdir/$c > $confdir/$c-sample
	rm $confdir/$c
	chmod 644 $confdir/$c-sample
	if [[ "$keepdata" = "true" ]] ; then
		if [[ -r $confdir/$c-keep ]] ; then
			mv $confdir/$c-keep $confdir/$c
		fi
	else
		cp -p $confdir/$c-sample $confdir/$c
	fi
done

# Copy our files into the install
#mkdir -p $jw_root 2> /dev/null
cp -p $files ${apc_enggutils_dir}/admin 2> /dev/null

## Update janusweb.sh ( replacing $scriptDir with $jw_roo )
cp -p ${apc_enggutils_dir}/admin/janusweb.sh ${apc_enggutils_dir}/admin/janusweb.sh-backup
sed "s?@JANUS_HOME@?$jw_root?g" ${apc_enggutils_dir}/admin/janusweb.sh-backup > ${apc_enggutils_dir}/admin/janusweb.sh

# Removing the backup file created
rm ${apc_enggutils_dir}/admin/janusweb.sh-backup

# Ownerships, all is owned by chosen userid:group

chown -Rh $userid:$group $jw_root/janusweb
chown -Rh $userid:$group ${apc_enggutils_dir}/admin

# Set sensible permissions

chmod -R  a+r $jw_root
chmod -R  u+w $jw_root
chmod -R go-w $jw_root
find $jw_root -type d -exec chmod a+x {} \;

# Generate initscripts and move them into place

if [[ "$initscripts" = "true" ]] ; then
	copy_and_subs ${apc_enggutils_dir}/admin/janusweb /tmp/janusweb.$inst
	initscript_add /tmp/janusweb.$inst janusweb.$inst 97 03
fi

#Changes to version.txt
cp -p ${apc_enggutils_dir}/admin/janus-version.txt ${jw_root}/janusweb/current/bin/janus-version.txt
cp -p ${jw_root}/janusweb/current/bin/janus-version.txt ${jw_root}/janusweb/current/bin/janus-version.txt-backup
buildreleasedate=`echo $buildreleasedate | tr -d " "`

sed \
 -e "s/@version@/"$version"/" \
 -e "s/@bitsizevalue@/"$bitsizevalue"/" \
-e "s/@buildreleasedate@/"$buildreleasedate"/" \
-e "s/@buildversion@/"$buildversion"/" \
 $jw_root/janusweb/current/bin/janus-version.txt-backup > $jw_root/janusweb/current/bin/janus-version.txt 2> /dev/null

 cp -p ${jw_root}/janusweb/current/bin/janus-version.txt ${apc_enggutils_dir}/admin/janus-version.txt
 rm ${jw_root}/janusweb/current/bin/janus-version.txt-backup

#Signature File details
get_product_dtls $apache22_root $userid $group $jwversion "$bitsizevalue" "Janus-Apache-$jwversion" "JW$jwversion" $apc_enggutils_dir

exit 0
 
./install/installmodsecurity.sh
========================================
#!/bin/ksh
# installmod_security.sh - Install Mod Security within Apache 2.2
# RR Mar 17 2011, Initial version for support of Mod Security within Apache 2.2.17.
# AC Jul 13 2015, Build E-2.0.0. modsec 2.2.7; crs baserules 2.2.9.  Changed installation path to apache root (from eu-apache22u). Tested with Apache 2.2.29
  
# Platform specific things

case `uname -s` in
	Linux)
		whoami=whoami
                unalias rm mv cp
		;;
	 SunOS)
		whoami=/usr/ucb/whoami
		;;
	AIX)
		whoami=whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number       installation instance number"
	print "                          (default: none, must be specified)"
	print "       -apache22_root dir  Apache installation directory"
	print "                          (default: /local/apache22/<inst>)"
	print "       -version v         Mod Security version number"
	print "                          (default: 2.7.7)"
	print "       -jpmcversion v     Mod Security JPMC version number"
	print "                          (default: 0)"
        print "       -userid userid     UNIX userid to own installation"
        print "                          (default: webuser)"
        print "       -group group       UNIX group to own installation"
        print "                          (default: webgroup)"
	print "       -media dir         location with binary archive files"
	print "                          (default: media subdirectory)"
	print "       -action choice     one of check, install"
	print "                          (default: install)"
	print "       -64bit flag        flag to set to 64 bit"
	print "                          (default: false)"
	print "       -quiet flag        install quietly, true or false"
	print "                          (default: false)"
	exit 2
	}

# Get the utility functions we need

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh

#Config file for Standard build architecture

if [[ $1 = "true" ]] ; then
. $2/installmodsecurity.conf
else
. ${baseDir}/conf/installmodsecurity.conf
fi

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

#inst=
#apache22_root=
#version=2.7.7
#jpmcversion=0
#userid=webuser
#group=webgroup
#modsecurity_root=
#media=media
#action=install
#quiet=false
#xopts=
#64bit=false
#m64mode=false
BUILD_VERSION=2.0.0
crs_version=2.2.9

# Parse arguments

if [[ "$inst" = "" ]] ; then
	#usage
        print ""
fi

if [[ "$apache22_root" = "" ]] ; then
	apache22_root=/local/apache22/$inst
fi

if [[ "$modsecurity_root" = "" ]] ; then
        securityRoot=$apache22_root/security
	modsecurity_root=$securityRoot/modsecurity
	# modsecurity_root=$apc_enggutils_dir/security/modsecurity
fi

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$action" != "check" && "$action" != "install" ]] ; then
	#usage
        print ""
fi


#if [[ "$m64mode" = "true" ]] ; then
#	m=x64
#fi	

if [[ "$m64mode" = "true" ]] ; then
        m=x64
        mode=64
else
        mode=32
fi



# Check required userids and groups exists

if [[ $userid = root ]] ; then
        print "$0: root should not be used to own and run ModSecurity."
        exit 30
fi


# Check for source media related things being present
determine_rhel_version

if [[ "$m64mode" = "true" ]] ; then
        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
		apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-${rhel_version}-$m-jpmc.bin	
        else
                apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
        fi

else

        if [ -n "$(grep 5.[0-9] /etc/redhat-release 2>/dev/null)" ];then
                
		apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-${rhel_version}-jpmc.bin

        else
                apache22_modsecurity_archive=$media/apache-modsecurity-$version.$jpmcversion-`uname -s`-jpmc.bin

        fi
fi


# Umask
# Note: ksh umask builtin reports three octal digits

if [[ `umask` != 022 ]] ; then
	umask 022
fi

# Pick up variables

. $apc_enggutils_dir/admin/apacheutil.conf

# Checks complete

if [[ "$action" = "check" ]] ; then
	exit 0
fi

# Log
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/installmodsecurity$m.$hostname.$inst

print "=== installmod_security.sh ===" > $log

env >> $log
df -k >> $log 2>&1

# Install

if [[ ! -d $securityRoot ]] ; then
  mkdir $securityRoot
fi
if [[ ! -d $modsecurity_root ]] ; then
  mkdir $modsecurity_root
fi
expand_arc $apache22_modsecurity_archive $modsecurity_root
cp $modsecurity_root/module/mod_security2.so $apache22_root/modules
if [[ ! -r $apache22_root/modules/mod_security2.so ]] ; then
	print "$0: didn't install all of Mod Security, investigate why"
	exit 53
fi

chown -Rh $userid:$group $securityRoot $modsecurity_root $apache22_root/modules/mod_security2.so
chmod -R a+r             $securityRoot $modsecurity_root $apache22_root/modules/mod_security2.so

mkdir -p $apache22_root/conf/modsecurity_crs

cp -R $modsecurity_root/conf/*.conf $apache22_root/conf/modsecurity_crs/
cp -R $modsecurity_root/rules/base_rules/ $apache22_root/conf/modsecurity_crs/
cp $modsecurity_root/libraries/lib*.* $apache22_root/lib/
cp $modsecurity_root/libraries/pkgconfig/*.* $apache22_root/lib/pkgconfig/
cp $modsecurity_root/libraries/python*/*/*.* $apache22_root/lib/
cp ../security/unicode.mapping $apache22_root/conf/modsecurity_crs/

chown -Rh $userid:$group $apache22_root/conf/modsecurity_crs/
chown -Rh $userid:$group $apache22_root/lib/

# Mod Security Version Info
print "
"Product: ModSecurity for Apache 2.2"
"Product Version: "${version}
"Engineering Build Version: E-"${BUILD_VERSION}
"Engineered Build Release Date: Jul 2015"
"Product Architecture: 32-bit"
"ModSecurity Core Rule Set\("CRS"\)Version: ${crs_version}"
" > /tmp/version-modsecurity.txt.$$

mv /tmp/version-modsecurity.txt.$$ $securityRoot/version-modsecurity.txt
chown -Rh $userid:$group $securityRoot/version-modsecurity.txt

cp ../security/configuremodsecurity.sh $securityRoot/
cp ../security/deletemodsecurity.sh $securityRoot/
chown -Rh $userid:$group $securityRoot/configuremodsecurity.sh
chown -Rh $userid:$group $securityRoot/deletemodsecurity.sh

exit 0
./upgrade/upgradeapache22.sh
========================================
#!/bin/ksh
# upgradeapache22.sh - Upgrade Apache 2.2
# Unarchive the pre-compiled Apache 2.2 binary.
# Although our build scripts create .tar.gz files, we cope with .zip etc too.
# Adjust paths within Apache.
# Adjust paths where Apache refers to Perl.
# Add our value added scripting. 
#
# RR, 02 Sep 2011, Update Apache HTTPd version to 2.2.21
# RR, 02 Feb 2013, Update Apache HTTPd version to 2.2.23
# AR, 15 Aug 2013, Update Apache HTTPd version to 2.2.29

# Platform specific things

buildreleasedate="Aug 2015"
buildversion="E-1.19.2"

case `uname -s` in
	Linux)
		whoami=whoami
                unalias rm mv cp
		;;
	SunOS)
		whoami=/usr/ucb/whoami
		;;
	AIX)
		whoami=whoami
		;;
	*)
		print "$0: unsupported platform"
		exit 1
		;;
esac

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -inst number        upgrade instance number"
	print "                           (default: none, must be specified)"
	print "       -apache22_root dir   Apache upgradation directory"
	print "                           (default: /local/apache22/<inst>)"
	print "       -version v          Apache version number"
	print "                           (default: 2.2.29)"
	print "       -jpmcversion v      Apache JPMC version number"
	print "                           (default: 0)"
	print "       -perlbin path       alternatively, use Perl binary indicated"
	print "                           (default: none specified, look along \$PATH)"
	print "       -media dir          location with binary archive files"
	print "                           (default: media subdirectory)"
	print "       -userid userid      UNIX userid to own installation"
	print "                           (default: webuser)"
	print "       -group group        UNIX group to own installation"
	print "                           (default: webgroup)"
	print "       -rootok flag        allow running as root"
	print "                           (default: false)"
	print "       -64bit flag     	  flag to set 64 bit"
	print "                       	  (default: false )"
	print "       -action choice      one of check, install"
	print "                           (default: install)"
	print "       -quiet flag         install quietly, true or false"
	print "                           (default: false)"
	exit 2
	}


scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh
. ${baseDir}/utility/sgtfile.sh

#Config file for Standard build architecture

if [[ $1 = "true" ]] ; then
. $2/upgradeapache22.conf
else
. ${baseDir}/conf/upgradeapache22.conf
fi


# Vars
hostname=`hostname|cut -d. -f1`


# Parse arguments

if [[ "$inst" = "" ]] ; then
	usage
fi

if [[ "$apache22_root" = "" ]] ; then
	apache22_root=/local/apache22/$inst
fi

if [[ "$m64mode" = "true" ]] ; then
	m=x64
	mode=64
else
	mode=32
fi	

# Check there is not an install already there

if [[ ! -d  $apache22_root/bin ]] ; then
        print "$0: it looks as if there is no installation in $apache22_root"
        exit 37
fi

if [[ "$media" != /* ]] ; then
	media=`pwd`/$media
fi

if [[ "$action" != "check" && "$action" != "install" ]] ; then
	usage
fi

# Check required userids and groups exists

if [[ $userid = root ]] ; then
	print "$0: root should not be used to own and run Apache 2.2"
	exit 30
fi

# Check for source media related things being present
if [[ "$m64mode" = "true" ]] ; then
	apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-$m-jpmc.bin
else
	apache22_archive=$media/apache-$version.$jpmcversion-`uname -s`-jpmc.bin
fi

check_file_arc $apache22_archive

if [[ "$m64mode" = "true" ]] ; then
  bitsizevalue=64
else
  bitsizevalue=32
fi
print ""
print "Info: Installing "$bitsizevalue"-bit Apache"


# Check for parts of this script (files needed by it) being present

if [[ "$action" = "check" ]] ; then
 rm -rf $apache22_root 
        exit 12
fi

# Log
# Create directory for logs.
mkdir -p /tmp/apache22$m
log=/tmp/apache22$m/upgradeapache22$m.$hostname.$inst

print "=== upgradeapache22.sh ===" > $log

env >> $log
df -k >> $log 2>&1

# Install Apache 2.2 base

expand_arc $apache22_archive $apache22_root
if [[ ! -r $apache22_root/bin/httpd ]] ; then
	print "$0: didn't upgrade everything, investigate why"
	exit 53
fi

# On Solaris, programs compiled by GCC can end up depending on GNU libraries.
# We cannot rely on these being in place on the target system, as the standard
# Solaris build doesn't include them, so we put copies within Apaches lib dir.

if [[ `uname -s` = SunOS ]] ; then
	if [[ "$m64mode" = "true" ]] ; then
		cp $media/libgcc_s.so.1_64 $apache22_root/lib/libgcc_s.so.1
		cp $media/libiconv.so.2_64 $apache22_root/lib/libiconv.so.2
	else		
		cp $media/libgcc_s.so.1 $apache22_root/lib
		cp $media/libiconv.so.2 $apache22_root/lib
	fi	
elif [[ `uname -s` = AIX ]] ; then
	cp $media/libgcc_s.a $apache22_root/lib
fi

# Rename CGI directory, as per security standard
mv $apache22_root/cgi-bin $apache22_root/cgi

# Patch up references to Apache directory - the binary archives will say
# /local/apache22build/apache22, but we've probably not installed there
# We also patch OpenSSL, but unfortunately the binary has a hard coded
# reference to /local/apache22build/apache22. This means we have to pass the -config
# argument when using it, to ensure it can find its configuration.

for f in \
	$apache22_root/bin/apr-1-config \
	$apache22_root/bin/apu-1-config \
	$apache22_root/build/apr_rules.mk \
	$apache22_root/bin/apxs \
	$apache22_root/bin/apachectl \
	$apache22_root/bin/envvars \
	$apache22_root/bin/envvars-std \
	$apache22_root/build/config_vars.mk \
	$apache22_root/build/config.nice \
	$apache22_root/conf/*.conf \
	$apache22_root/conf/extra/*.conf \
	$apache22_root/conf/original/extra/*.conf \
	$apache22_root/conf/original/*.conf \
	$apache22_root/include/*.h \
	$apache22_root/lib/*.la \
	$apache22_root/lib/pkgconfig/apr-1.pc \
	$apache22_root/lib/pkgconfig/apr-util-1.pc \
	$apache22_root/man/man8/httpd.8 \
	$apache22_root/openssl/bin/c_rehash \
	$apache22_root/openssl/lib/pkgconfig/openssl.pc \
	$apache22_root/openssl/lib/pkgconfig/libcrypto.pc \
	$apache22_root/openssl/lib/pkgconfig/libssl.pc \
	$apache22_root/openssl/include/openssl/openssl.conf.h \
	$apache22_root/openssl/include/openssl/opensslconf.h \
	$apache22_root/openssl/include/opensslconf.h \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed "s?/local/apache22build$m/apache22?$apache22_root?g" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
done

# Patch up references to Perl within Apache
# Note that CA.pl is in different places, depending on OS

for f in \
	$apache22_root/bin/apxs \
	$apache22_root/bin/dbmmanage \
	$apache22_root/cgi/printenv \
	$apache22_root/openssl/misc/CA.pl \
	$apache22_root/openssl/ssl/misc/CA.pl \
	$apache22_root/openssl/bin/c_rehash \
; do
	if [[ -r $f ]] ; then
		cp $f $f-pre_fix_dir
		sed -e "s?#!/usr/local/bin/perl?#!$perlbin?" \
		    -e "s?#!/usr/bin/perl?#!$perlbin?" \
			< $f-pre_fix_dir \
			> $f
		rm $f-pre_fix_dir
	fi
done

# Make apachectl files unique to each MPM

for mpm in worker prefork ; do
	sed -e "s/^\(HTTPD='.*\)'/\1_$mpm'/" \
		< $apache22_root/bin/apachectl \
		> $apache22_root/bin/apachectl_$mpm
done


#Changes to version.txt
cp -p ${baseDir}/admin/version.txt ${apc_enggutils_dir}/admin/version.txt
cp -p ${apc_enggutils_dir}/admin/version.txt ${apc_enggutils_dir}/admin/version.txt-backup
buildreleasedate=`echo $buildreleasedate | tr -d " "`
sed \
 -e "s/@version@/"$version"/" \
 -e "s/@bitsizevalue@/"$bitsizevalue"/" \
-e "s/@buildreleasedate@/"$buildreleasedate"/" \
-e "s/@buildversion@/"$buildversion"/" \
  ${apc_enggutils_dir}/admin/version.txt-backup > ${apc_enggutils_dir}/admin/version.txt 2> /dev/null

rm ${apc_enggutils_dir}/admin/version.txt-backup

cat ${baseDir}/admin/createwebsite.sh |
    sed \
        -e "s/@version@/"$version"/" \
        > $apc_enggutils_dir/admin/createwebsite.sh.tmp
mv $apc_enggutils_dir/admin/createwebsite.sh.tmp $apc_enggutils_dir/admin/createwebsite.sh


websitedir=`ls -l $apache22_root/htdocs/ | egrep '^d' | awk '{print $9}'`

cat $apache22_root/htdocs/$websitedir/index.html | sed  -e "s/2.2.[0-9]*/"$version"/g" > $apache22_root/htdocs/$websitedir/index.html-backup 

mv $apache22_root/htdocs/$websitedir/index.html-backup $apache22_root/htdocs/$websitedir/index.html 

# Fix permissions issue on AIX (similar restrictions not present on Solaris).
# Access needed to /dev/random to generate secret for digest authentication. 
# Access granted to both to allow use of either in SSLRandomSeed.

if [[ `$whoami` = "root" && `uname -s` = AIX ]] ; then	
	chmod a+r /dev/random
	chmod a+r /dev/urandom
fi


# Signature File update

if [ -f $apc_enggutils_dir/admin/SignatureFile ] && [ -x ${baseDir}/admin/sigfile-refresh.sh ] ; then
        ${baseDir}/admin/sigfile-refresh.sh server $apc_enggutils_dir/admin/SignatureFile
fi

if [ -f $apc_enggutils_dir/admin/SignatureFile.Apache2.2 ] && [ -x ${baseDir}/admin/sigfile-refresh.sh ] ; then
        ${baseDir}/admin/sigfile-refresh.sh server $apc_enggutils_dir/admin/SignatureFile.Apache2.2
fi


# Ok, give some worthwhile advice, if relevant.

if [[ "$quiet" = "false" ]] ; then
	print "Apache $version upgraded."
	print "Use UNIX userid $userid (not root) to manage it"
	if [[ "$rootok" = "true" ]] ; then
		print "To start and stop web sites listening on ports < 1024, or with rootparent=true"
		print "you'll need to run apache22.sh as root (perhaps via sudo or KeON suexec)"
		print "$apc_enggutils_dir/admin/apache22.keon has a sample KeON suexec route."
	fi
fi

exit 0
./upgrade/prechkwrapper.sh
========================================
#!/bin/ksh
#set -x
#==============================================================================================
# prechkwrapper.sh  - Script which is a wrapper that invokes other modular pre-check.sh scripts
#
# Description:
# This script acts as a wrapper to invoke other pre-check scripts for various modules like
# security,install,monitoring,etc. Basically all of them individualy perform a task of checking
# ex: space, user id details on a host are in present. Feeds back as and when some details are
# missing.
#  
# Input Parameters: See usage
#
# Revison History:
# RR    02 Sep 2011    Created for Apache 2.2 
#==============================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="$scriptDir"
   export baseDir

# Get the utility functions we need
. $baseDir/../utility/installutils.sh
. $baseDir/../utility/commonutils.sh

# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product                Prerequisite check for Apache Server"
        print "                               (default:none, options: server)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)        configpath=$2 ;;
                -product)           product=$2 ;;
                -custom)            custom=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

#check if Weblogic Server or Weblogic Plugin installation to execute

if [[ "$product" == "server" ]] ; then
	print " "
else
        usage
fi

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . $baseDir/conf/upgradeapache22.conf
    fi
fi


if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=upgradeapache22.conf
  fi

 if [[ -r $configpath ]] ; then
           . $configpath/$cfgfile
     fi
fi

# Pre-check for web logic server or plugin
 $baseDir/pre-chk.sh -product  $product  -custom $custom  -configpath $configpath
./upgrade/run.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# run.sh  - Script that performs the Apache 2.2 upgrade 
#
# Description:
# Main script that performs the Apache 2.2 upgrade
# Also invokes the pre-check and post check script.
# 
# Input Parameters: See usage
#
# Revison History:
# RR    02 Sep 2011    Created for Apache 2.2
#================================================================================

case `uname -s` in
        SunOS)
                whoami=/usr/ucb/whoami
                os=solaris
                nslookup=/usr/sbin/nslookup
		PS="/usr/ucb/ps -auxww"
                ;;
        Linux)
                whoami=whoami
                os=linux
                nslookup="/usr/bin/nslookup -silent"
		PS="ps auxww"
                ;;
        AIX)
                whoami=whoami
                os=aix
                nslookup="/usr/bin/nslookup -silent"
		PS="ps auxww"
                ;;

        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


#Defaults
custom=false
configpath=
instorplg=

# usage

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product                Flag to upgrade Apache Server"
        print "                               (default:none, options: server)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp if custom true)"
        exit 1
        }


while [[ "$1" != "" ]] ; do
        case $1 in
                -custom)            custom=$2 ;;
                -configpath)        configpath=$2 ;;
                -product)           product=$2 ;;
                          *)        usage ;;
        esac
        shift 2
done

#check if Apache HTTP Server installation to execute

if [[ "$product" = "" ]] ; then 
       usage 
fi 

if [[ "$product" != "server"  ]] ; then
        usage
fi

if [[ "$custom" = "true" ]] ; then
        if [[ "$configpath" == "" ]] ; then
            configpath=/tmp
        fi
else
        configpath=${baseDir}/conf/
fi

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/upgradeapache22.conf
        print ""
        echo "-------------------------------------------------------------------------------------------"
        echo "You are using default conf file to upgrade Apache HTTP Server 2.2 with below key value pair:"
        echo "--------------------------------------------------------------------------------------------"
        cat ${baseDir}/conf/upgradeapache22.conf
        read;
        echo "Are you sure you want to continue with above values (Yes/No)...."
        read userchoice
        if [ "$userchoice" = "Yes" ] ; then
                clear;
        else
                echo "Please generate the conf file as per your requirement."
                exit 0;
        fi
        echo "Press enter key to continue....."
        read enterkey
   fi
fi

#check if path exists or not

if [[ ! -d "$configpath" ]] ; then
	echo "Config path $configpath is not specified.."
        usage 
fi

if [[ "$custom" = "true" ]] ; then

     if [[ $product = "server" ]] ; then
          cfgfile=upgradeapache22.conf
     fi
 if [[ -r $configpath ]] ; then
           . $configpath/$cfgfile
     fi
fi


#Pre-chk wrapper Apache 2.2"
flag=$product
export flag

 if [[ "$skipprechk" = "false" ]] ; then
   	${baseDir}/upgrade/prechkwrapper.sh -product $product -custom $custom -configpath $configpath
     	 rc=$?
   if [[ $rc -ne 0 ]] ; then
   	exit $rc
        fi
 else
       ${baseDir}/upgrade/pre-chk.sh -product $product -custom $custom -configpath $configpath
        rc=$?
   if [[ $rc -ne 0 ]] ; then
   	exit $rc
       fi
fi

#Upgrade Base Server
if [[ $product = "server" ]] ; then

      ${baseDir}/upgrade/upgradeapache22.sh $custom $configpath
         rc=$?
   	if [[ $rc -ne 0 ]] ; then
   		exit $rc
   	fi


#Do Post check
     ${baseDir}/upgrade/post-chk.sh -product $product -custom $custom -configpath $configpath
     rc=$?
   	if [[ $rc -ne 0 ]] ; then
   		exit $rc
        fi
 fi


./upgrade/post-chk.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# post-chk.sh 
#
# Description:
# Check the security permission on Apache 2.2 upgrade
# and remove any temp files from the host.
#
# Input Parameters: See usage
#
# Revison History:
# RR     02 Sep 2011    Created for Apache 2.2 
#================================================================================

case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        AIX)
                whoami=whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir


# Get the utility functions we need
. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh


# Defaults
configpath=/tmp
product=
custom=false

#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product                Prerequisite to check Apache Server"
        print "                               (default:none, options: server)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)       configpath=$2 ;;
                -product)          product=$2 ;;
                -custom)           custom=$2 ;;
                      *)           usage ;;
        esac
        shift 2
done

#check if Apache HTTP Server installation to execute

if [[ "$product" = "server" ]] ; then
	print ""
	print "Apache 2.2 Server upgrade post check done."
else
	usage
fi
 

if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/upgradeapache22.conf
   fi
elif [[ "$custom" = "true" ]] ; then
     if [[ $product = "server" ]] ; then
          . $configpath/upgradeapache22.conf
     fi

fi


# Userid check
if [[ `$whoami` != $userid && `$whoami` != "root" ]] ; then
        print "$0: please run this script as $userid or 'root'"
        exit 11
fi

if [[ $product = "server" ]] ; then

	# Ownerships, all is owned by chosen userid:group

	chown -Rh $userid:$group $apache22_root
	chmod -R o-w $apache22_root 2> /dev/null

        chown -Rh $userid:$group $apc_enggutils_dir/admin/version.txt
        chown -Rh $userid:$group $apc_enggutils_dir/admin/createwebsite.sh

	#Start all the servers after upgrade
	print "Info: Starting all Servers if any running..."

	# Check before starting

	if [[  ! -r $apc_enggutils_dir/admin/apacheutil.conf || \
       	       ! -r $apc_enggutils_dir/admin/apache22.sh  ]] ; then
       		print "$0: no standard build of Apache 2.2  at $apc_enggutils_dir"
     	        exit 21
	fi

	# Pick up its variables, specifically the userid

	. $apc_enggutils_dir/admin/apacheutil.conf

	# Start everything

        case `uname -s` in
                SunOS|Linux)
                        /etc/init.d/apache22.$inst start
                        ;;
                AIX)
                        /etc/rc.apache22.$inst start
                        ;;
        esac

fi 

./upgrade/pre-chk.sh
========================================
#!/bin/ksh
#set -x
#================================================================================
# pre-chk.sh
#
# Description:
# Pre-requisite check on Apache 2.2 before upgrade
#
# Input Parameters: See usage
#
# Revison History:
# RR     02 Sep 2011    Created for Apache 2.2
#================================================================================

scriptDir=`dirname $0`
if [[ "$scriptDir" = "." ]] ;then
      scriptDir=$PWD
fi

   baseDir="${scriptDir}/.."
   export baseDir

. ${baseDir}/utility/utilinstall.sh
. ${baseDir}/utility/utilcommon.sh
. ${baseDir}/utility/sgtfile.sh

# Defaults
configpath=/tmp
product=
custom=false
#Ask for the path where the conf file resides.

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -product                Prerequisite check Apache Server"
        print "                               (default:server, options: server)"
        print "       -custom                 Is this a custom Install"
        print "                               (default: false)"
        print "       -configpath  config     Path of config file"
        print "                               (default:/tmp)"
        exit 1
        }

while [[ "$1" != "" ]] ; do
        case $1 in
                -configpath)        configpath=$2 ;;
                -product)           product=$2 ;;
                -custom)            custom=$2 ;;
                      *)            usage ;;
        esac
        shift 2
done

#check if Apache HTTP Server installation to execute

if [[ "$product" = "server" ]] ; then
        print "Apache 2.2 Server upgrade prerequisite check."
else
        usage
fi


if [[ "$custom" = "false" ]] ; then
   if [[ $product = "server" ]] ; then
          . ${baseDir}/conf/upgradeapache22.conf
   fi
elif [[ "$custom" = "true" ]] ; then
     if [[ $product = "server" ]] ; then
          . $configpath/upgradeapache22.conf
     fi

fi

# Check required userids and groups exists

if [[ $userid = root ]] ; then
        print "$0: root should not be used to own and run Apache 2.2"
        exit 30
fi

echo " "
echo "Info: User/Group Id Check"

check_group $group
check_userid $userid
check_primary_group $userid $group

# Check for source media related things being present
if [[ $product = "server" ]] ; then
echo " "
echo "Info: Apache 2.2 Server media check "

fi

if [[ $product = "server" ]] ; then

echo " "
echo "Info: Disk Space Check for Apache 2.2 Server"

dd=`dirname $apache22_root`
dd2=`dirname /tmp`

devi=`device_of $dd`
devt=`device_of $dd2`
if [[ "$devi" = "$devt" ]] ; then
        free_mb $devi 300
else
        free_mb $devi  150
        free_mb $devt  150
fi

fi

echo " "
echo "Info: Checking if there is any installation directory already there"

# Check there is not an install already there
if [[ $product = "server" ]] ; then

        if [[ -r $apache22_root/bin/apachectl ]] ; then
		 echo "Installation exists at $apache22_root"
	else
                 print "No Apache 2.2 Installation found in $apache22_root"
                 exit 37
        fi

fi



if [[ "$product" = "server" ]] ; then

print "Stopping the Server for upgrade..."

# Pick up its variables, specifically the userid

. $apc_enggutils_dir/admin/apacheutil.conf

# Stop it before removing anything

        case `uname -s` in
                SunOS|Linux)
                        /etc/init.d/apache22.$inst stop
                        ;;
                AIX)
                        /etc/rc.apache22.$inst stop
                        ;;
        esac

fi

./security/configuremodsecurity.sh
========================================
#!/bin/ksh
# configuremodsecurity.sh - Configures ModSecurity and Apache 2.2
#
# RR, 04 Apr 2011, Initial Version of ModSecurity
# Platform specific things

case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
         AIX)
                whoami=whoami
                ;;
        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Where is everything

scriptDir=`dirname $0`

# Go fetch all the variables needed for this script

. $scriptDir/../admin/apacheutil.conf

if [[ ! "${logroot}" = "" ]] ; then
  default_logroot="(default: $logroot)"
else
  default_logroot=""
fi

# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        print "                               default: none, must be specified)"
        print "       -apache22_root dir      Apache installation directory"
        print "                               $default_logroot"
        exit 2
        }

gen_conf()
        # $1=httpdConf
        {
            cat $1 | \
            sed \
                -e "/modsecurity_module/d" \
                -e "/modsecurityRuleFile/d" \
                > $2
            print "# ModSecurity Configuration" >> $2		
            print "LoadModule security2_module modules/mod_security2.so" >> $2
	    print "<IfModule security2_module>"  >> $2
	    print "  Include conf/modsecurity_crs/$website.modsecurity.conf"  >> $2
            print "  Include conf/modsecurity_crs/modsecurity_crs_10_setup.conf"  >> $2
            print "  Include conf/modsecurity_crs/base_rules/*.conf"  >> $2
            print "</ifmodule>"  >> $2
        }
update()
        # $1=target
        # $2=source
        {
            cmp $1 $2 > /dev/null 2> /dev/null
            if [[ $? -eq 0 ]] ; then
                print "$0: $1 is already correct"
                rm $2
            elif [[ -w $1 ]] ; then
                cp -p $1 $1-premodsecurity_config
                cat $2 > $1
                rm $2
                print "$1 backed up and updated."
            else
                print "$0: $1 needs replacing with $2"
            fi
        }


determine_fq_host_name()
        {
                case `uname -s` in
                        Linux)  nslookup=/usr/bin/nslookup ;;
                        SunOS)  nslookup=/usr/sbin/nslookup ;;
                        AIX)    nslookup=/usr/bin/nslookup ;;
                esac
                hostname | grep '\.' > /dev/null
                if [ $? -eq 0 ] ; then
                        fq_host_name=`hostname`
                else
                        hostname=`hostname`
                        $nslookup $hostname 2> /dev/null | grep Name: > /dev/null
                        test $? -ne 0 && ( print "$0: $nslookup $host throws errors" ; exit 5 )
                        fq_host_name=`$nslookup $hostname 2> /dev/null | grep Name: | awk '{print $2}'`
                fi
        }
determine_fq_host_name


# Get the utility functions we need

# Vars

hostname=`hostname|cut -d. -f1`
# Defaults

website=
apache22_root_dir="${apache22_root}"



# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-website)	website=$2 ;;
               	-ap*)		apache22_root_dir=$2 ;;
               	  *)		usage ;;
	esac
	shift 2
done


#Checks to be done
if [[ "$website" = "" ]] ; then
     usage
fi

# already set in apacheutil.conf
# if [[ "$apache22_root_dir" = "" ]] ; then
     # apache22_root_dir=/local/apache22/$instno
# fi

# Check required userids and groups exists

userid=`$whoami`
if [[ "$userid" = "root" ]] ; then
      print "$0: Cant use root to execute, su - fire a/c "
      exit 30
fi

#Check if installs exists
if [[ ! -r $apache22_root_dir/modules/mod_security2.so ]] ; then
     print "$0: mod_security2.so missing, investigate why"
     exit 53
fi

if [[ ! -d $apache22_root_dir ]] ; then
     print "Apache not installed under" $apache22_root_dir
     exit 44
fi

#if [[ ! -r $stmw_root/siteminderu/version.txt ]] ; then
 #    print "Siteminder not installed under" $stmw_root
   #  exit 45
#fi

if [[ ! -f $apache22_root_dir/conf/$website.conf ]] ; then
     print "Website $website.conf does not exist" 
     exit 45
fi

#check if website is running
if [[ `$apc_enggutils_dir/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
     print ""	
     print "$website website must be stopped before configuring ModSecurity."
     exit 48
fi

#Symblinks for ModSecurity Libraries

if [[ `uname -s` = Linux ]] ; then
      if [[ -f $apache22_root_dir/lib/libxml2.so.2.7.2 ]];then
              ln -s $apache22_root_dir/lib/libxml2.so.2.7.2 $apache22_root_dir/lib/libxml2.so.2 > /dev/null 2>&1
              ln -s $apache22_root_dir/lib/libxml2.so.2.7.2 $apache22_root_dir/lib/libxml2.so > /dev/null 2>&1
      fi
fi

if [[ `uname -s` = SunOS ]] ; then
      if [[ -f $apache22_root_dir/lib/libxml2.so.2.7.2 ]];then
              ln -s $apache22_root_dir/lib/libxml2.so.2.7.2 $apache22_root_dir/lib/libxml2.so.2 > /dev/null 2>&1
              ln -s $apache22_root_dir/lib/libxml2.so.2.7.2 $apache22_root_dir/lib/libxml2.so > /dev/null 2>&1
      fi
fi

if [[ -f $apache22_root_dir/lib/libpcrecpp.so.0.0.0 ]];then
         ln -s $apache22_root_dir/lib/libpcrecpp.so.0.0.0 $apache22_root_dir/lib/libpcrecpp.so.0 > /dev/null 2>&1
         ln -s $apache22_root_dir/lib/libpcrecpp.so.0.0.0 $apache22_root_dir/lib/libpcrecpp.so > /dev/null 2>&1
fi

if [[ -f $apache22_root_dir/lib/libpcreposix.so.0.0.0 ]];then
        ln -s $apache22_root_dir/lib/libpcreposix.so.0.0.0 $apache22_root_dir/lib/libpcreposix.so.0 > /dev/null 2>&1
        ln -s $apache22_root_dir/lib/libpcreposix.so.0.0.0 $apache22_root_dir/lib/libpcreposix.so > /dev/null 2>&1
fi

if [[ -f $apache22_root_dir/lib/libpcre.so.0.0.1 ]];then
        ln -s $apache22_root_dir/lib/libpcre.so.0.0.1 $apache22_root_dir/lib/libpcre.so.0 > /dev/null 2>&1
        ln -s $apache22_root_dir/lib/libpcre.so.0.0.1 $apache22_root_dir/lib/libpcre.so > /dev/null 2>&1
fi

if [[ -f $apache22_root_dir/lib/libcurl.so.4.2.0 ]];then
        ln -s $apache22_root_dir/lib/libcurl.so.4.2.0 $apache22_root_dir/lib/libcurl.so.4 > /dev/null 2>&1
        ln -s $apache22_root_dir/lib/libcurl.so.4.2.0 $apache22_root_dir/lib/libcurl.so > /dev/null 2>&1
fi



#Modify Apache ws<inst no>.conf 

gen_conf $apache22_root_dir/conf/$website.conf $apache22_root_dir/conf/$website.conf-backup

update $apache22_root_dir/conf/$website.conf $apache22_root_dir/conf/$website.conf-backup 2> /dev/null

cp $apache22_root_dir/conf/modsecurity_crs/modsecurity.conf $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf

# disable server brand in http respond header
echo "SecServerSignature \" \"" >> $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf

# sed -e "s!"logs/modsec_debug.log"!"logs/$website".modsec_debug.log!g" $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf  > $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf.new   
# mv $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf.new    $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf
# sed -e "s!"logs/modsec_audit.log"!"logs/$website".modsec_audit.log!g" $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf  > $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf.new   

# had to turn off audit due to fast growing logs. if enabling is required. Change "SecAuditEngine RelevantOnly"
sed "s!\(.*\)\ \(.*\)/log/debug.log!\1 ${logroot}/${website}.debug.log!" $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf |\
sed "s!\(.*\)\ \(.*\)/modsec_audit.log!\1 ${logroot}/${website}.modsec_audit.log!" |\
sed "s!\(.*\)SecAuditEngine \(.*\)!\1SecAuditEngine Off!" |\
sed "s!\(.*\)SecAuditLogType \(.*\)!\1SecAuditLogType concurrent!" |\
sed "s!\(.*\)SecAuditLogStorageDir \(.*\)!SecAuditLogStorageDir ${logroot}/${website}_modsecurity!" > $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf.new

mv $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf.new    $apache22_root_dir/conf/modsecurity_crs/$website.modsecurity.conf


# Ok, give some worthwhile advice, if relevant.
print ""
print "ModSecurity configured for $website.conf."
print "Next Steps:" 
print "1) Start Apache Server "$apc_enggutils_dir"/admin/./apache22.sh start "$website 
print "2) Test Application url" 
print "http://<hostname>:<Port No>/<application name>"
print ""

exit 0
./security/deletemodsecurity.sh
========================================
#!/bin/ksh

# deletemodsecurity.sh - Delete ModSecurity installation and configuration details
#
# RR, 05 Apr 2011,Initial version 


# Platform specific things

case `uname -s` in
        Linux)
                whoami=whoami
                unalias rm mv cp
                ;;
        SunOS)
                whoami=/usr/ucb/whoami
                ;;
        AIX)
                whoami=whoami
                ;;

        *)
                print "$0: unsupported platform"
                exit 1
                ;;
esac

# Where is everything

scriptDir=`dirname $0`

# Go fetch all the variables needed for this script

. $scriptDir/../admin/apacheutil.conf


# Display usage, and quit

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website website        Website name"
        print "                               default: none, must be specified)"
        print "       -apache22_root dir      Apache installation directory"
        print "                               (default: none,must be specified)"
	print "       -action choice          one of check, install"
        print "                               (default: delete)"

        exit 2
       } 

# Vars

hostname=`hostname|cut -d. -f1`

# Defaults

website=
apache22_root=
action=delete


# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-website*)	     website=$2 ;;
		-apache22_root*)     apache22_root=$2 ;;
		-ac*)                action=$2 ;;
		  *)		     usage ;;
	esac
	shift 2
done

#Checks to be done
if [[ "$website" = "" ]] ; then
      usage
fi

if [[ "$apache22_root" = "" ]] ; then
      usage
fi

if [[ "$action" != "delete" ]] ; then
        usage
fi


#check if website exists
if [[ ! -f $apache22_root/conf/$website.conf ]] ; then
     print "Website $website.conf does not exists "
     exit 49
fi

modsecurity_root=$apache22_root/security/modsecurity

#check if ModSecurity directory exists
if [[ ! -d $modsecurity_root ]] ; then
     print "ModSecurity directory does not exists"
     exit 45
fi

#check if website is running
if [[ `$apc_enggutils_dir/admin/apache22.sh status $website | grep -c "not running"` -ne 1 ]] ; then
     print "Website $website must be stopped before deleting ModSecurity."
     exit 48
fi

#Delete install directory 

if [[ $action = "delete" ]] ; then
        mv $apache22_root/conf/$website.conf $apache22_root/conf/$website.conf-postmodsecurity_config
        mv $apache22_root/conf/$website.conf-premodsecurity_config $apache22_root/conf/$website.conf
        rm -rf $apache22_root/modsecurity > /dev/null 2>&1 
	rm -rf $apache22_root/conf/modsecurity_crs/ > /dev/null 2>&1 
        rm -rf $apache22_root/lib/xml2Conf.sh > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libxml2.so.2.7.2 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libxml2.so.2 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libxml2.so > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libxml2.la > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libxml2.a > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcreposix.so.0.0.0 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcreposix.so.0 > /dev/null 2>&1 
        rm -rf $apache22_root/lib/libpcreposix.a > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcreposix.so > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcreposix.la > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcrecpp.so.0.0.0 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcrecpp.so.0 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcrecpp.so > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcrecpp.la > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcrecpp.a > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcre.so.0.0.1 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcre.so.0 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcre.so > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcre.la > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libpcre.a > /dev/null 2>&1 
	rm -rf $apache22_root/lib/liblua5.1.so > /dev/null 2>&1 
	rm -rf $apache22_root/lib/liblua5.1.a > /dev/null 2>&1 
	rm -rf $apache22_root/lib/liblua.a > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libcurl.so.4.2.0 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libcurl.so.4 > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libcurl.so > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libcurl.la > /dev/null 2>&1 
	rm -rf $apache22_root/lib/libcurl.a > /dev/null 2>&1      
	rm -rf $apache22_root/modules/mod_security2.so > /dev/null 2>&1
        rm -rf $apc_enggutils_dir/security/version-modsecurity.txt > /dev/null 2>&1 
        if [[ `uname -s` = SunOS ]] ; then
		rm -rf $apache22_root/lib/liblua.so > /dev/null 2>&1
		rm -rf $apache22_root/lib/libxml2.so.2.7.7 > /dev/null 2>&1
	fi
fi

#Give some kind of advice
print "ModSecurity has been uninstalled." 
print "Startup Apache and test the application url."
exit 0
./security/getCA.sh
========================================
#!/bin/ksh
#
# getCA.sh - Get Custom Attributes
#
# This script returns some configurable parameters in a way which is easy
# for something like an Opsware ISM control script to consume.
#
# AK, 12 Oct 2007, from Apache 2.0
# IS, 16 Oct 2007, add support for mod_jk custom attributes
# IS, 17 Oct 2007, add support for mod_proxy_ajp custom attributes
# IS, 18 Oct 2007, add support for mod_janus custom attributes
# IS, 18 Oct 2007, set custom attributes to 'none' if no value is set
#

# Usage

usage()
        {
        print "usage: $0 {flags}"
        print "flags: -website <website>  website name"
        print "                           (default: none, must be specified)"
        exit 2
        }

# Pick up configuration and common code

apache2uDir=`dirname $0`
. $apache2uDir/../admin/apacheutil.conf
called_into=true
. $apc_enggutils_dir/utility/utilcommon.sh

# Defaults

website=

# Parse arguments

while [[ ! "$1" = "" ]] ; do
        case $1 in
                -w*)    website=$2 ;;
        esac
        shift 2
done

if [[ "$website" = "" ]] ; then
        usage
fi

conf=$apache22_root/conf/$website.conf

grep '^ServerName' $conf | sed -e "s?ServerName \(.*\)?SERVERNAME=\1?"
grep '^User' $conf | sed -e "s?^User \(.*\)?USERID=\1?"
grep '^Group' $conf | sed -e "s?^Group \(.*\)?GROUP=\1?"
grep '^DocumentRoot' $conf | sed -e "s?^DocumentRoot \"\(.*\)\"?DOCROOT=\1?"
grep '^Listen' $conf | sed -e "1 s?^Listen \(.*\)?LISTEN=\1?; 2 s?^Listen \(.*\)?SSLLISTEN=\1?"
grep 'SSLCertificateFile' $conf | sed -e "s?.*SSLCertificateFile.*/\(.*\)\.cer?SSLCERT=\1?"
grep 'autostart' $conf | sed -e "s?^# autostart=\(.*\)?AUTOSTART=\1?"
grep 'mpm=' $conf | sed -e "s?^# mpm=\(.*\)?MPM=\1?"

grep '^LoadModule jk_module' $conf | sed -e "s?LoadModule jk_module \(.*\)?JK_MODULE=\1?"
grep '^JkWorkersFile' $conf | sed -e "s?JkWorkersFile \(.*\)?JK_WORKERSPROPS=\1?"
grep '^JkLogFile' $conf | sed -e "s?JkLogFile \(.*\)?JK_LOG_FILE=\1?"
grep '^JkLogLevel' $conf | sed -e "s?JkLogLevel \(.*\)?JK_LOG_LEVEL=\1?"

grep '^ProxyPass ' $conf | sed -e "s?ProxyPass \(.*\) \(.*\)?AJP_PROXY_SRC=\1\nAJP_PROXY_TARGET=\2?"

grep '^Include .*/janus.conf' $conf | sed -e "s?Include \(.*\)?JANUS_INCLUDE=\1?"
./security/makecert.sh
========================================
#!/bin/ksh
#
# makecert.sh - Create a self-signed SSL cert using our copy of OpenSSL
#
# Make a private/public key pair (in .pem file)
# Make a certificate request for the server name and public key (in .csr file)
# Sign it using our own private key, making a self signed cert (in .cer file)
# This is basically to get you going quickly.
#
# Can also submit certificate request to Verisign to get a certificate.
# However, you may want to better protect the private key in that case.
# And you'll need to get the distinguished name right for Verisign.
#
# 
# SM, 29 Sept 2006, Initial Version from Apache2 by AK

# Display usage, and quit

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -servername name  server name"
	print "                         (default: auto determine hostname)"
	print "       -sslcert name     generate <name>.pem, .csr and .cer"
	print "                         (default: first part of <servername>)"
	print "       -dn name          distinguished name"
	print "                         (default: /C=US/ST=New York/L=New York/CN=<servername>)"
	exit 2
	}

# Where is everything

scriptDir=`dirname $0`

# Go fetch all the variables needed for this script

. $scriptDir/../admin/apacheutil.conf
. $apc_enggutils_dir/utility/utilcommon.sh

determine_apache22_root_dir
determine_apache22_site_dir
check_apache22_site_dir_writeable

# Defaults

servername=
sslcert=
dn=

# Parse arguments

while [[ "$1" != "" ]] ; do
	case $1 in
		-se*)		servername=$2 ;;
		-sslc*)		sslcert=$2 ;;
		-d*)		dn=$2 ;;
		*)		usage ;;
	esac
	shift 2
done

if [[ "$servername" = "" ]] ; then
	determine_fq_host_name
	servername=$fq_host_name
fi

if [[ "$sslcert" = "" ]] ; then
	sslcert=${servername%%.*}
fi

if [[ "$dn" = "" ]] ; then
	dn="/C=US/ST=New York/L=New York/CN=$servername"
fi

if [[ "$1" != "" ]] ; then
	usage
fi

# Make new SSL private key, and protect it

# Create CSR from the private key

if [[ -r $apache22_root_dir/openssl/ssl/openssl.cnf ]] ; then
	cnf=$apache22_root_dir/openssl/ssl/openssl.cnf
elif [[ -r $apache22_root_dir/openssl/openssl.cnf ]] ; then
	cnf=$apache22_root_dir/openssl/openssl.cnf
fi

export OPENSSL_CONF=$cnf
$apache22_root_dir/openssl/bin/openssl genrsa \
-out $apache22_site_dir/conf/$sslcert.pem \
2048 -config $cnf
chmod 640 $apache22_site_dir/conf/$sslcert.pem


$apache22_root_dir/openssl/bin/openssl req \
-config $cnf \
-new \
-subj "$dn" \
-key $apache22_site_dir/conf/$sslcert.pem \
-out $apache22_site_dir/conf/$sslcert.csr

# Sign it with our own private key

$apache22_root_dir/openssl/bin/openssl x509 \
-req \
-in $apache22_site_dir/conf/$sslcert.csr \
-signkey $apache22_site_dir/conf/$sslcert.pem \
-out $apache22_site_dir/conf/$sslcert.cer

exit 0
./security/setCA.sh
========================================
#!/bin/ksh
#
# setCA.sh - Set Custom Attributes
#
# This script enables the modification of some configurable parameters in
# a way which is easy for an Opsware ISM control script to drive.
#
# AK, 15 Oct 2007, initial version from Apache 2.0
# IS, 16 Oct 2007, add support for mod_jk custom attributes
# IS, 17 Oct 2007, add support for mod_proxy_ajp custom attributes
# IS, 18 Oct 2007, add support for mod_janus
# IS, 19 Oct 2007, add support for 'none' in custom attributes
# IS, 31 Oct 2007, handle the case where mod_jk has been disabled and needs to be re-enabled
# AK, 12 Dec 2007, fix setting the SSL port
#

# Usage

usage()
	{
	print "usage: $0 {flags}"
	print "flags: -website <website>  website name"
	print "                           (default: none, must be specified)"
	exit 2
	}

# Read name/value pairs from stdin

scan_values()
	{
	while read nv ; do
		n=${nv%=*}
		v=${nv##*=}
		case $n in
			DOCROOT)		DOCROOT=$v ;;
			SERVERNAME)		SERVERNAME=$v ;;
			USERID)			USERID=$v ;;
			GROUP)			GROUP=$v ;;
			LISTEN)			LISTEN=$v ;;
			SSLLISTEN)		SSLLISTEN=$v ;;
			SSLCERT)		SSLCERT=$v ;;
			MPM)			MPM=$v ;;
			AUTOSTART)		AUTOSTART=$v ;;
			JK_MODULE)		JK_MODULE=$v ;;
			JK_WORKERSPROPS)	JK_WORKERSPROPS=$v ;;
			JK_LOG_FILE)		JK_LOG_FILE=$v ;;
			JK_LOG_LEVEL)		JK_LOG_LEVEL=$v ;;
			AJP_PROXY_SRC)		AJP_PROXY_SRC=$v ;;
			AJP_PROXY_TARGET)	AJP_PROXY_TARGET=$v ;;
			JANUS_INCLUDE)		JANUS_INCLUDE=$v ;;
			*)			print "$nv not recognized" ;;
		esac
	done
	}

# import configuration and common code

apache2uDir=`dirname $0`
. $apache2uDir/../admin/apacheutil.conf
called_into=true
. $apc_enggutils_dir/utility/utilcommon.sh

# Defaults

website=

# Parse arguments

while [[ ! "$1" = "" ]] ; do
	case $1 in
		-w*)	website=$2 ;;
	esac

	shift 2
done

if [[ "$website" = "" ]] ; then
	usage
fi

conf=$apache22_root/conf/$website.conf

DOCROOT=none
SERVERNAME=none
USERID=none
GROUP=none
LISTEN=none
SSLLISTEN=none
SSLCERT=none
MPM=none
AUTOSTART=none
JK_MODULE=none
JK_WORKERSPROPS=none
JK_LOG_FILE=none
JK_LOG_LEVEL=none
AJP_PROXY_SRC=none
AJP_PROXY_TARGET=none
JANUS_INCLUDE=none

# Read in current values

$apc_enggutils_dir/security/getCA.sh -website $website > /tmp/setCA.$$
scan_values < /tmp/setCA.$$
rm /tmp/setCA.$$

# Read in updated values from stdin

scan_values

cp $conf $conf-pre_setCA

if [ "$SSLLISTEN" != "none" ] ; then
	sslenable=SSLEnable
else
	sslenable=#SSLEnable
fi

if [ "$SSLCERT" = "none" ] ; then
	SSLCERT=`hostname`
fi

SSLPORT=${SSLLISTEN##*:}

sed \
	-e "s?^DocumentRoot .*?DocumentRoot \"$DOCROOT\"?" \
	-e "s?^ServerName .*?ServerName $SERVERNAME?" \
	-e "s?^User .*?User $USERID?" \
	-e "s?^Group .*?Group $GROUP?" \
	-e "s?^Listen .*?Listen $LISTEN?" \
	-e "s?#*SSLEnable?$sslenable?" \
	-e "/<IfDefine SSL>/,/<VirtualHost/ s?^Listen .*?Listen $SSLLISTEN?" \
	-e "s?<VirtualHost  *\([^:]*\):[^:]*>?<VirtualHost \1:$SSLPORT>?" \
	-e "s?SSLCertificateFile .*?SSLCertificateFile conf/$SSLCERT.cer?" \
	-e "s?SSLCertificateKeyFile .*?SSLCertificateKeyFile conf/$SSLCERT.pem?" \
	-e "s?mpm=.*?mpm=$MPM?" \
	-e "s?autostart=.*?autostart=$AUTOSTART?" \
	-e "/^LoadModule jk_module/d" \
	-e "/^JkWorkersFile/d" \
	-e "/^JkLogFile/d" \
	-e "/^JkLogLevel/d" \
	-e "/^ProxyPass .*/d" \
	-e "/^ProxyReversePass/d" \
	-e "/^Include .*janus.conf/d" \
	< $conf-pre_setCA > $conf

if [ "$JK_MODULE" != "none" ] ; then
	print "LoadModule jk_module $JK_MODULE" >> $conf
fi

if [ "$JK_WORKERSPROPS" != "none" ] ; then
	print "JkWorkersFile $JK_WORKERSPROPS" >> $conf
fi

if [ "$JK_LOG_FILE" != "none" ] ; then
	print "JkLogFile $JK_LOG_FILE" >> $conf
fi

if [ "$JK_LOG_LEVEL" != "none" ] ; then
	print "JkLogLevel $JK_LOG_LEVEL" >> $conf
fi

if [ "$AJP_PROXY_SRC" != "none" ] ; then
	print "ProxyPass $AJP_PROXY_SRC $AJP_PROXY_TARGET" >> $conf
	print "ProxyReversePass $AJP_PROXY_SRC $AJP_PROXY_TARGET" >> $conf
fi

if [ "$JANUS_INCLUDE" != "none" ] ; then
	print "Include $JANUS_INCLUDE" >> $conf
fi
./utility/utilcommon.sh
========================================
#!/bin/ksh
#
# utilcommon.sh - Utilities commonly used by most scripts
#
# Contains code to
#   Prompt, possibly with default response, or for passwords with no echo
#   Review a file during script execution
#   Workaround getent not being present (AIX).
#   Check for users and groups.
#
# AK, 07 Mar 2005, initial version
# AK, 02 Feb 2007, work around aliases
# IS, 08 Aug 2007, replace calls to write_log with a simple print
#

unalias rm
unalias cp
unalias mv

wp_root_dir=/local/web/apache22
wp_inst="web"

# How to prompt
prompt()
	# $1=message
	{
	print -n "$1: "
	read reply
	}

# How to prompt, with default

prompt_def()
	# $1=message
	# $2=default
	{
	print -n "$1 [$2]: "
	read reply
	if [[ "$reply" = "" ]] ; then
		reply="$2"
	fi
	}

# Prompting for a password

prompt_password()
	# $1=message
	{
	while true ; do
		print -n "$1: "
		stty -echo
		read reply
		stty echo
		print
		print -n "$1 (again): "
		stty -echo
		read reply2
		stty echo
		print
		if [[ "$reply" = "$reply2" ]] ; then
			break
		fi
		print "*** Mismatch, please retry"
	done
	}

# Review file during script execution

review_file()
	# $1=file
	# $2=xoption
	{
	if [[ ",$xopts," = *,$2,* || ",$xopts," = *,all,* ]] ; then
		${EDITOR:-vi} $1
		if [[ $? -ne 0 ]] ; then
			print "$0: editor returned non-zero return code, installation aborted"
			exit 99
		fi
	fi
	}

# Getent

mygetent()
	# $1=file
	# $1=key
	{
	whence getent > /dev/null
	if [[ $? -eq 0 ]] ; then
		getent $1 $2
	else
		grep ^$2 /etc/$1
	fi
	}

# How to check for a userid being present

check_userid()
	# $1=userid
	{
	mygetent passwd $1 > /dev/null
	if [[ $? -ne 0 ]] ; then
		print "$0: no user $1"
		exit 10
	fi
	}

# How to check for a group being present

check_group()
	# $1=group
	{
	mygetent group $1 > /dev/null
	if [[ $? -ne 0 ]] ; then
		print "$0: no group $1"
		exit 11
	fi
	}

# How to check for a users primary group

check_primary_group()
	# $1=user
	# $2=group
	{
	pgid=`mygetent passwd $1 | cut -d: -f4`
	gid=`mygetent group $2 | cut -d: -f3`
	if [[ $pgid != $gid ]] ; then
		print "$0: $1 should have a primary group of $2"
		exit 12
	fi
	}

get_primary_group()
	# $1=user
	{
	pgid=`mygetent passwd $1 | cut -d: -f4`
	pgroup=`mygetent group $pgid | cut -d: -f1`
	}

# How to check for a users secondary group

check_secondary_group()
	# $1=user
	# $2=group
	{
	uid=`mygetent passwd $1 | cut -d: -f3`
	gids=,`mygetent group $2 | sed "s/  */,/g" | cut -d: -f4`,
	if [[ $gids != *,$uid,* && $gids != *,$1,* ]] ; then
		print "$0: $1 should have $2 as a secondary group"
		exit 13
	fi
	}

# Determine where Apache is installed

determine_apache22_root_dir()
	{
	if [[ "$apache22U_ROOT_DIR" != "" ]] ; then
		apache22_root_dir=$apache22U_ROOT_DIR
	else
		apache22_root_dir=$apache22_root
			# from apacheutil.conf
	fi
	}

# Determine where its sites are located below

determine_apache22_site_dir()
	{
	if [[ "$apache22U_SITE_DIR" != "" ]] ; then
		apache22_site_dir=$apache22U_SITE_DIR
	else
		apache22_site_dir=$apache22_root_dir
	fi
	}

# In order to administer Apache, we must be able to write to the web sites

check_apache22_site_dir_writeable()
	{
	if [[ ! -w $apache22_site_dir ]] ; then
		print "$0: apache site directory $apache22_site_dir is not writeable"
		exit 10
	fi
	}

# Determine Fully Qualified Host Name, set into $fq_host_name variable
# Check if hostname output has a dot ('.') in it.
# If yes, take that output as fq_host_name.
# If no, then use nslookup <host>.
# If nslookup throws errors then abort the script.

determine_fq_host_name()
	{
	if [[ "$apache22U_FQHN" != "" ]] ; then
		fq_host_name=$apache22U_FQHN
	else
		case `uname -s` in
		        Linux)	nslookup=/usr/bin/nslookup ;;
		        SunOS)	nslookup=/usr/sbin/nslookup ;;
			AIX)	nslookup=/usr/bin/nslookup ;;
		esac
		hostname | grep '\.' > /dev/null
		if [ $? -eq 0 ] ; then
			fq_host_name=`hostname`
		else
			hostname=`hostname`
			$nslookup $hostname 2> /dev/null | grep Name: > /dev/null
			test $? -ne 0 && ( print "$0: $nslookup $host throws errors" ; exit 5 )
			fq_host_name=`$nslookup $hostname 2> /dev/null | grep Name: | awk '{print $2}'`
		fi
	fi
	}

determine_rhel_version()
{
	export rhel_version=$(uname -a |sed -e 's/.*\(el.\)\(.*\)/\1/')
}
./utility/utilinstall.sh
========================================
#!/bin/ksh
#
# utilinstall.sh - Utilities used by installers
#
# Contains code to
#   Check for files and archive files
#   Check for sufficient free space
#   Copy and subs, primarily for init-scripts
#
# AK, 25 Jan 2006, initial version, from IHS 6
# AK, 23 Jul 2006, add linux_release function
# AK, 24 Oct 2007, tolerate whitespace on end of Linux df output
#

# Check for a file being present

check_file()
	# $1=file
	# $2=description
	{
	if [[ ! -r $1 ]] ; then
		if [[ "$2" != "" ]] ; then
			print "$0: $1 ($2) not found"
		else
			print "$0: $1 not found"
		fi
		exit 14
	elif [[ ",$xopts," = *,whichfiles,* ]] ; then
		if [[ "$2" != "" ]] ; then
			print "Found $1 ($2)"
		else
			print "Found $1"
		fi
	fi
	}

# Check for an archive file being present.
# Various archivers and compressors are supported.
# I've included every standard file suffix than the man pages for these
# compressors lists as a common possibility.
# I do this as IBM don't seem to be consistent as to how they package fixes.
# If we find the archive, $arcsuffix is the file extension found.

check_file_arc()
	# $1=file (without suffix)
	# $2=description
	{
	found=false
	for arcsuffix in .zip .tar .tar.Z .taz .tar.gz .tgz .tar.bz .tar.bz2 .tbz .tbz2 ; do
		if [[ -r $1$arcsuffix ]] ; then
			found=true
			break
		fi

	done
	if [[ "$found" != "true" ]] ; then
		if [[ "$2" != "" ]] ; then
			print "$0: $1.zip, .tar, .tar.Z, .taz, .tar.gz, .tgz, .tar.bz, .tar.bz2, .tbz or .tbz2 ($2) not found"
		else
			print "$0: $1.zip, .tar, .tar.Z, .taz, .tar.gz, .tgz, .tar.bz, .tar.bz2, .tbz or .tbz2 not found"
		fi
		exit 14
	fi
	if [[ ",$xopts," = *,whichfiles,* ]] ; then
		if [[ "$2" != "" ]] ; then
			print "Found $1$arcsuffix ($2)"
		else
			print "Found $1$arcsuffix"
		fi
	fi
	return
	}

# Decompress archive into a directory.
# Supports all the file suffixes checked by check_file_arc, as above.

expand_arc()
	# $1=file (without suffix)
	# $2=destination directory
	{
	found=false
	for arcsuffix in .zip .tar .tar.Z .taz .tar.gz .tgz .tar.bz .tar.bz2 .tbz .tbz2 ; do
		if [[ -r $1$arcsuffix ]] ; then
			found=true
			break
		fi
	done
	if [[ "$found" != "true" ]] ; then
		print "$0: $1.zip, .tar, .tar.Z, .tar.gz, .tar.bz, .tar.bz2,, .tbz or .tbz2 not found"
		exit 14
	fi

	case $arcsuffix in
		.zip)	
			unzip -o -q $1$arcsuffix -d $2
			;;
		.tar)
			cat $1$arcsuffix | ( cd $2 && tar -xf - )
			;;
		.tar.Z|.taz)
			uncompress -c $1$arcsuffix | ( cd $2 && tar -xf - )
			;;
		.tar.gz|.tgz)
			gunzip -c $1$arcsuffix | ( cd $2 && tar -xf - )
			;;
		.tar.bz|.tar.bz2|.tbz|.tbz2)
			bunzip2 -c $1$arcsuffix | ( cd $2 && tar -xf - )
			;;
	esac
	}

# Replacement for df that doesn't split lines for readability

df_1l()
	# $*=arguments
	{
	df $* |\
	awk ' { if ( NF == 1 ) printf "%s ", $1 ; else print ; } '
	}

# How to determine which device-dir a given directory is on

device_of()
	# $1=dir
	{
	if [[ `uname -s` = AIX ]] ; then
		df_1l -k $1 2> /dev/null | grep / | awk ' { print $1 " " $7 } '
	else
		df_1l -k $1 2> /dev/null | grep / | awk ' { print $1 " " $6 } '
	fi
	}

# How to check there is sufficient free space on a device-dir

free_mb()
	# $1=device
	# $2=dir
	# $3=MB_free
	{
	if [[ `uname -s` = AIX ]] ; then
		kb=`df_1l -k 2> /dev/null | grep "^$1" | grep "$2\$" | awk ' { print $3 } '`
	else
		kb=`df_1l -k 2> /dev/null | grep "^$1" | grep "$2 *\$" | awk ' { print $4 } '`
	fi
	mb=$(( kb / 1024 ))
	if [[ $mb -lt $3 ]] ; then
		print "$0: got ${mb}MB, but need $3MB, on $1 $2"
		exit 15
	fi
	}

# How to ensure /etc/rc.shutdown invokes our script.
# Add it immediately after the comments.

rc_shutdown_add()
	# $1=command
	{
	if [[ -r /etc/rc.shutdown ]] ; then
		cp /etc/rc.shutdown /etc/rc.shutdown-pre_add
		added=0
		grep -v "^$1\$" /etc/rc.shutdown-pre_add > /etc/rc.shutdown-pre_add2
		while read line ; do
			if [[ $added -eq 0 && "$line" != \#* ]] ; then
				print "$1"
				added=1
			fi
			print $line
		done < /etc/rc.shutdown-pre_add2 > /etc/rc.shutdown
		if [[ $added -eq 0 ]] ; then
			print "$1" >> /etc/rc.shutdown
		fi
		chmod 744 /etc/rc.shutdown
		rm /etc/rc.shutdown-pre_add2
	else
		print "$1" > /etc/rc.shutdown
		chmod 744 /etc/rc.shutdown
	fi		
	review_file /etc/rc.shutdown rcshutdown
	}

# How to install init-scripts
# We name the target script differently depending upon the OS.
# Also, what links we put in depends upon the OS too.
# eg: on Linux, running
#   initscript_add /tmp/sometempfile websphere5.2 98 02
# generates
#   /etc/init.d/websphere5.2
#   /etc/rc3.d/S98websphere5.2 -> /etc/init.d/websphere5.2
#   /etc/rc0.d/K02websphere5.2 -> /etc/init.d/websphere5.2
#   /etc/rc6.d/K02websphere5.2 -> /etc/init.d/websphere5.2

initscript_add()
	# $1=initscriptfile
	# $1=initscriptname
	# $2=sindex
	# $3=kindex
	{
	file=$1
	name=$2
	sindex=$3
	kindex=$4
	case `uname -s` in
		Linux)
			is=/etc/init.d/${name}
			ln -fs $is /etc/rc3.d/S${sindex}${name}
			ln -fs $is /etc/rc0.d/K${kindex}${name}
			ln -fs $is /etc/rc6.d/K${kindex}${name}
			;;
		SunOS)
			is=/etc/init.d/${name}
			sl3=/etc/rc3.d/S${sindex}${name}
			kl0=/etc/rc0.d/K${kindex}${name}
			rm $sl3 $kl0 2> /dev/null
			ln -s $is $sl3
			ln -s $is $kl0
			;;
		AIX)
			is=/etc/rc.${name}
			ln -fs $is /etc/rc.d/rc2.d/S${sindex}${name}
			rc_shutdown_add "$is stop"
			;;
	esac
	mv $file $is
	chmod 744 $is
	}

# Copy a file, whilst substituting installation specific things
# Used for generated init scripts, autosys JIL, crontabs etc.

copy_and_subs()
	# $1=src
	# $2=dest
	{
	typeset -u hostnameu=$hostname
	typeset -l hostnamel=$hostname
	sed \
		-e "s?#HOSTNAME#?$hostname?" \
		-e "s?#HOSTNAMEU#?$hostnameu?" \
		-e "s?#HOSTNAMEL#?$hostnamel?" \
		-e "s?#APACHE22_ROOT#?$apache22_root?" \
		-e "s?#INST#?$inst?" \
		-e "s?#USERID#?$userid?" \
		-e "s?#GROUP#?$group?" \
		-e "s?#ROOTOK#?$rootok?" \
                -e "s?#APC_ENGGUTILS_DIR#?$apc_enggutils_dir?" \
	< $1 > $2
	}

# What kind of Linux is this ?

linux_release()
	{
	for rf in /etc/redhat-release /etc/fedora-release ; do
		if [[ -r $rf ]] ; then
			rr=`cat $rf`
			if [[ "$rr" = *Psyche* ]] ; then
				print RH8
				return
			elif [[ "$rr" = *Shrike* ]] ; then
				print RH9
				return
			elif [[ "$rr" = *Pensacola* ]] ; then
				print RHEL21
				return
			elif [[ "$rr" = *Enterprise*release\ 3 ]] ; then
				print RHEL3
				return
			elif [[ "$rr" = *Enterprise*release\ 4 ]] ; then
				print RHEL4
				return
			elif [[ "$rr" = *Yarrow* ]] ; then
				print FC1
				return
			elif [[ "$rr" = *Tettnang* ]] ; then
				print FC2
				return
			elif [[ "$rr" = *Heidleberg* ]] ; then
				print FC3
				return
			elif [[ "$rr" = *Stentz* ]] ; then
				print FC4
				return
			elif [[ "$rr" = *Bordeaux* ]] ; then
				print FC5
				return
			else
				print "RHunknown"
				return
			fi
		fi
	done
	print "unknown"
	}


./utility/sgtfile.sh
========================================
#!/bin/ksh
# The intent of the signature file is gather all the product specific 
# details and write them to a signature file, this would ease tideway
# of having to scan all the partitions where the product would be idealy installed 
# and pick up the relevant product specific details from the signature.

# RR, 25 Aug 2011, Added update_signature_file()

LinkDirBase="/var/jpmcappsig"
LinkDir="${LinkDirBase}/web_sigfile"

create_signature_file() {

	#Get required details for signature file and create it

	#Get Engineering build details
	val=$(getEngBuildDtls)
	engg_utils=$apc_enggutils_dir

	#Create Signature file

	Sigfile="$engg_utils$prdt_sgnt_file_dest/SignatureFile.${what_product}"

	print "Web Products Signature File" >> $Sigfile
	print "Product: "$prdt_descpt >> $Sigfile
	print "Product Version: "$prdt_version >> $Sigfile
	print "$val" >> $Sigfile
	print "Product Architecture: "$prdt_archt >> $Sigfile
	print "Product Install Date: "`date` >> $Sigfile
	print "Product Installation Path: "$prdt_path >> $Sigfile
	print "Product Owner: "$prdt_owner >> $Sigfile
	print "Patch Level/Fix Pack Level: "$prdt_version >> $Sigfile
	print "File Update Data Stamp: "`date` >> $Sigfile
	print "Product Code: "${what_product} >> $Sigfile

	#Signature File will be world readable
	chmod 644 $Sigfile

	#Signature File would be owned by the user specified at install time
	chown $prdt_owner:$prdt_group $Sigfile

	#Create Signature file symlink folder if not created. Set the right permission if not set properly
	if [ ! -d "${LinkDirBase}" ] ; then
	  mkdir -p ${LinkDirBase}
	  chmod 1777 ${LinkDirBase}/
	elif [ "`ls -ld ${LinkDirBase}/ | grep drwxrwxrwt`" = "" ] ; then
	  chmod 1777 ${LinkDirBase}/
	fi

	#Create symlink directory
	if [ ! -d "${LinkDir}" ] ; then
	  mkdir -p ${LinkDir}/
	  chmod 1777 ${LinkDir}/
	fi

	#Create Symlink
	((num=$RANDOM))
	dt=`date +%m-%d-%Y_%H:%M:%S`
	ln -s $Sigfile ${LinkDir}/$what_product.$inst-$dt:$num
}

getJdkAndOthPrdtInfo () {
	#$1=Product path
	#$2= Product Info Ex:Apache2.2 , PHP , Perl , Siteminder

	prdt_path=$1
	prdt_info=$2

	#Get specific product info
	#Jdk is paths as they vary from product to product
	#Grep string to return what we need from jdk version
	#Engineering Build Information
	#Signature destination

	jdk_dtls=""
	case "$prdt_info" in
	  Apache2.2 | PHP | Perl | Siteminder )
	    prdt_path_java=$prdt_path/java/jre/bin
            case `uname -s` in
              AIX | Linux)
                  i=`${prdt_path_java}/java -version 2>&1 | grep -c " J2RE "`
                  if [ $i -eq 0 ] ; then
                    jdk_dtls=" JRE "
                  else
                    jdk_dtls=" J2RE "
                  fi
                  ;;
              SunOS) 
	          jdk_dtls="IBM build"
                  ;;
            esac
	    engbuildfilename="${baseDir}/utility/apache22.txt"
	    prdt_sgnt_file_dest="/admin"
	    ;;
	  *)
	    engbuildfilename="${baseDir}/utility/apache22.txt"
	    prdt_sgnt_file_dest="/admin"
	    ;;
	esac
	if [ "$jdk_dtls" = "" ] ; then jdk_dtls="^Java(TM)" ; fi

	#Get JDK details
	# prdt_jdk_ver=`$prdt_path_java/java -version 2>&1 | grep "$jdk_dtls" | sed -e 's/.*"$jdk_dtls"* "\(.*\)".*/\1/'` >> /dev/null
	prdt_jdk_ver=`$prdt_path_java/java -version 2>&1 | grep "$jdk_dtls" | sed -e 's/.*"$jdk_dtls"* "\(.*\)".*/\1/'` >> /dev/null
	if [[ $prdt_jdk_ver = "" ]] ; then prdt_jdk_ver="NA" ; fi
}

getEngBuildDtls() {

	cat $engbuildfilename | while read LINE ; do
	  print "$LINE"
	done
}

get_product_dtls() {
	#$1=Product Path
	#$2=Product Owner (Ex: a_tom0, webuser, a_was0)
	#$3=Product group (Ex: a_tom0, webuser, a_was0)
	#$4=Product version
	#$5=Product Architecture (Ex: 32-bit or 64-bit)
	#$6=Description of Product
	#$7=What product Ex:WAS,IHS,Plugin

	prdt_path=$1
	prdt_owner=$2
	prdt_group=$3
	prdt_version=$4
	prdt_archt=$5
	prdt_descpt=$6
	what_product=$7 
        engg_utils=$8

	#Get the product details required for Signature File
	getJdkAndOthPrdtInfo $prdt_path $what_product

	#Create Signature File
	create_signature_file
}

update_signature_file() {
	Sigfile=$1

	if [ -f $Sigfile ] && [ -w $Sigfile ] ; then
	  Sigfile_SAV=${Sigfile}_sav
	  Sigfile_TMP1=${Sigfile}_tmp1.$$
	  Sigfile_TMP2=${Sigfile}_tmp2.$$

	  case `uname -s` in
	    AIX | Linux) jdk_dtls="J2RE"
		;;
	    SunOS) jdk_dtls="IBM build"
		;;
	  esac
	  BAD_CONDITION=0

	  prdt_path=`grep -i "^[ 	]*Product Installation Path:" $Sigfile | head -1 | awk -F: '{printf("%s\n",$2)}' |  sed 's/ //g'`

	  if [ ! -d "$prdt_path" ] || [ "$prdt_path" = "" ] ; then
	    echo "Invalid Signature file ${Sigfile}. Cannot see \"Product Installation Path:\".  Please Investigate."
	    BAD_CONDITION=1
	  fi

	  if [ ! -x ${prdt_path}/bin/versionInfo.sh ] ; then
	    print "Cannot run ${prdt_path}/bin/versionInfo.sh. Please Investigate"
	    BAD_CONDITION=1
	  fi

	  if [ ! -x ${prdt_path}/java/jre/bin/java ] ; then
	    print "Cannot run ${prdt_path}/java/jre/bin/java. Please Investigate"
	    BAD_CONDITION=1
	  fi

	  if [ $BAD_CONDITION -eq 0 ] ; then

	    # work on temporary version
	    cp -p $Sigfile $Sigfile_TMP1
	    # preserve permission of TMP2
	    cp -p $Sigfile $Sigfile_TMP2

	    if [ `grep -c "^[ 	]*Product:" $Sigfile_TMP1` -eq 0 ] ; then
	      echo "Product version: Unknown" >> $Sigfile_TMP1
	    fi
	    old_version1=`grep -i "^[ 	]*Product version:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
	    old_version2=`grep -i "^[ 	]*Product version:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`
	    prdt_version=`${prdt_path}/bin/versionInfo.sh | grep "^Version[ ]*[0-9]" | awk '{print $2}'`

	    if [ `grep -c "^[ 	]*JDK Version and Patch Level:" $Sigfile_TMP1` -eq 0 ] ; then 
	      echo "JDK Version and Patch Level: Unknown" >> $Sigfile_TMP1
	    fi
	    old_jdk_ver1=`grep -i "^[ 	]*JDK Version and Patch Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
	    old_jdk_ver2=`grep -i "^[ 	]*JDK Version and Patch Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`
	    prdt_jdk_ver=`${prdt_path}/java/jre/bin/java -version 2>&1 | grep "$jdk_dtls" | sed -e 's/.*"$jdk_dtls"* "\(.*\)".*/\1/'` >> /dev/null

	    if [ `grep -c "^[ 	]*Patch Level/Fix Pack Level:" $Sigfile_TMP1` -eq 0 ] ; then 
	      echo "Patch Level/Fix Pack Level: Unknown" >> $Sigfile_TMP1
	    fi
	    old_patch1=`grep -i "^[ 	]*Patch Level/Fix Pack Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
	    old_patch2=`grep -i "^[ 	]*Patch Level/Fix Pack Level:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`

	    if [ `grep -c "^[ 	]*File Update Data Stamp:" $Sigfile_TMP1` -eq 0 ] ; then 
	      echo "File Update Data Stamp: Unknown" >> $Sigfile_TMP1
	    fi
	    old_datestamp1=`grep -i "^[ 	]*File Update Data Stamp:" $Sigfile_TMP1 | head -1 | cut -d ':' -f1 | sed 's/\//\\\\\//g`
	    old_datestamp2=`grep -i "^[ 	]*File Update Data Stamp:" $Sigfile_TMP1 | head -1 | cut -d ':' -f2- | sed 's/\//\\\\\//g`
	    newdatestamp=`date`

            sed \
            -e "s/${old_version1}\:${old_version2}/${old_version1}\:\ ${prdt_version}/" \
            -e "s/${old_jdk_ver1}\:${old_jdk_ver2}/${old_jdk_ver1}\:\ ${prdt_jdk_ver}/" \
            -e "s/${old_patch1}\:${old_patch2}/${old_patch1}\:\ ${prdt_version}/" \
            -e "s/${old_datestamp1}\:${old_datestamp2}/${old_datestamp1}\:\ ${newdatestamp}/" \
	    $Sigfile_TMP1 > $Sigfile_TMP2

	    cp -p ${Sigfile} ${Sigfile_SAV}
	    mv ${Sigfile_TMP2} ${Sigfile}

	    if [ $? -eq 0 ] ; then 
	      rm ${Sigfile_SAV}
	      rm $Sigfile_TMP1
	    else
	      print "Fail to update ${Sigfile}. Please investigate"
	    fi
	  else
	    print "Signaturefile ${Sigfile} is not updated"
	  fi
	else
	  print "Cannot update ${Sigfile}. Please investigate."
	fi
}
